<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS7磁盘扩展</title>
    <url>/823759cb/</url>
    <content><![CDATA[<h1 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h1><p>硬盘——扩展</p>
<p>假如有快照，先删除</p>
<img src="/823759cb/image-20210222120000691.png" style="zoom:80%;">

<a id="more"></a>

<h1 id="Linux设置"><a href="#Linux设置" class="headerlink" title="Linux设置"></a>Linux设置</h1><h2 id="对新增的硬盘分区"><a href="#对新增的硬盘分区" class="headerlink" title="对新增的硬盘分区"></a>对新增的硬盘分区</h2><p>对原有的硬盘sda进行扩展</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">命令(输入 m 获取帮助)：（步骤）[root@localhost mihao]# fdisk /dev/sda</span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：p	（查看分区）</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：42.9 GB, 42949672960 字节，83886080 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x000b9dd0</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048     2099199     1048576   83  Linux</span><br><span class="line">/dev/sda2         2099200    41943039    19921920   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：n （新建分区）</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (2 primary, 0 extended, 2 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p （选择主分区）</span><br><span class="line">分区号 (3,4，默认 3)：3	（选区号）</span><br><span class="line">起始 扇区 (41943040-83886079，默认为 41943040)：	enter</span><br><span class="line">将使用默认值 41943040</span><br><span class="line">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (41943040-83886079，默认为 83886079)：enter</span><br><span class="line">将使用默认值 83886079</span><br><span class="line">分区 3 已设置为 Linux 类型，大小设为 20 GiB</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：t （修改分区）</span><br><span class="line">分区号 (1-3，默认 3)：3	（刚刚新建的3分区）</span><br><span class="line">Hex 代码(输入 L 列出所有代码)：8e	（对应sda2 id）</span><br><span class="line">已将分区“Linux”的类型更改为“Linux LVM”</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：w （保存）</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"></span><br><span class="line">WARNING: Re-reading the partition table failed with error 16: 设备或资源忙.</span><br><span class="line">The kernel still uses the old table. The new table will be used at</span><br><span class="line">the next reboot or after you run partprobe(8) or kpartx(8)</span><br><span class="line">正在同步磁盘。</span><br><span class="line">[root@localhost mihao]# partprobe （上面提示）</span><br><span class="line">[root@localhost mihao]# reboot （重启）</span><br></pre></td></tr></table></figure>
<h2 id="对新增的硬盘格式化"><a href="#对新增的硬盘格式化" class="headerlink" title="对新增的硬盘格式化"></a>对新增的硬盘格式化</h2><p><code> df-Th</code>查看文件系统</p>
<p>xfs系统使用<code>mkfs.xfs</code>命令，对硬盘进行格式化</p>
<h2 id="添加新LVM到已有LVM组"><a href="#添加新LVM到已有LVM组" class="headerlink" title="添加新LVM到已有LVM组"></a>添加新LVM到已有LVM组</h2><p><code>lvm</code>进入lvm管理</p>
<p>初始化分区</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lvm&gt; pvcreate /dev/sda3</span><br></pre></td></tr></table></figure>
<p>查看卷组Volumegroup名称</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lvm&gt; vgdisplay</span><br></pre></td></tr></table></figure>
<blockquote>
<p>VG Name        <strong>centos</strong></p>
</blockquote>
<p>将初始化过的分区加入centos</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lvm&gt; vgextend centos /dev/sda3</span><br></pre></td></tr></table></figure>
<p>查看逻辑卷Logical volume情况</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lvm&gt; lvdisplay</span><br></pre></td></tr></table></figure>
<p>文件系统扩容</p>
<p>退出lvm，扩展LV</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lvextend /dev/centos/root /dev/sda3</span><br></pre></td></tr></table></figure>
<p>运行命令</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">xfs_growfs /dev/centos/root</span><br></pre></td></tr></table></figure>
<h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p>查看磁盘，是否拓展成功</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-static探讨</title>
    <url>/6de462c1/</url>
    <content><![CDATA[<h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><h2 id="非static函数工作原理"><a href="#非static函数工作原理" class="headerlink" title="非static函数工作原理"></a>非static函数工作原理</h2><blockquote>
<p>使用&lt;对象&gt;.&lt;方法名称&gt; 调用函数</p>
<p>实际上是在调用类对应函数，并将该对象作为第一个参数进行传递。在函数内，该对象称为<code>this</code>。函数中的所有操作都是针对此对象及其数据执行的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表面代码</span></span><br><span class="line">Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">String name = cat.getName();</span><br><span class="line">cat.setAge(<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际运行代码</span></span><br><span class="line">Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">String name = Cat.getName(cat);</span><br><span class="line">Cat.setAge(cat, <span class="number">17</span>);</span><br></pre></td></tr></table></figure>


<h2 id="static函数工作原理"><a href="#static函数工作原理" class="headerlink" title="static函数工作原理"></a>static函数工作原理</h2><blockquote>
<p>使用&lt;类名&gt;.&lt;方法名称&gt; 调用函数</p>
<p>不会传递任何对象，即<code>this</code>为<code>null</code></p>
<p>因此，<strong>static 函数无法访问非 static 变量和函数</strong> </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表面代码</span></span><br><span class="line">Cat cat1 = <span class="keyword">new</span> Cat();</span><br><span class="line">Cat cat2 = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="keyword">int</span> catCount = Cat.getAllCatsCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际运行代码</span></span><br><span class="line">Cat cat1 = <span class="keyword">new</span> Cat();</span><br><span class="line">Cat cat2 = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="keyword">int</span> catCount = Cat.getAllCatsCount(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>优点</p>
<blockquote>
<ul>
<li>不必传递对象引用，就可以使用 <code>static</code>  方法和变量</li>
<li>可能需先调用一个一个方法，才能创建对象<ul>
<li>如<code>main()</code>设置为static，因此在任意对象创建</li>
<li>之前，在将类加载到内存后立即调用它</li>
</ul>
</li>
<li>可能需要只有一个变量副本，如，<code>System.out</code></li>
</ul>
</blockquote>
<h2 id="static内部类"><a href="#static内部类" class="headerlink" title="static内部类"></a>static内部类</h2><blockquote>
<ul>
<li>对嵌套类使用static，即static不能用于最外层的类。</li>
<li>只能访问外部类静态的成员变量和方法<ul>
<li>但普通内部类可以访问任意外部类的成员变量和方法</li>
</ul>
</li>
<li>可以声明普通成员变量和方法<ul>
<li>但普通内部类不能声明static成员变量和方法</li>
</ul>
</li>
<li>外部类的静态方法只能访问静态内部类</li>
<li>可以直接初始化<ul>
<li>普通内部类必须先新建外部类实例</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 下面程序演示如何在java中创建静态内部类和非静态内部类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String msg = <span class="string">&quot;GeeksForGeeks&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 静态内部类</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedStaticClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 静态内部类只能访问外部类的静态成员</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 试着将msg改成非静态的，这将导致编译错误 </span></span><br><span class="line">         System.out.println(<span class="string">&quot;Message from nested static class: &quot;</span> + msg); </span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非静态内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 不管是静态方法还是非静态方法都可以在非静态内部类中访问</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;Message from non-static nested class: &quot;</span>+ msg);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 怎么创建静态内部类和非静态内部类的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建静态内部类的实例</span></span><br><span class="line">       OuterClass.NestedStaticClass printer = <span class="keyword">new</span> OuterClass.NestedStaticClass();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建静态内部类的非静态方法</span></span><br><span class="line">       printer.printMessage();   </span><br><span class="line"></span><br><span class="line">       <span class="comment">// 为了创建非静态内部类，我们需要外部类的实例</span></span><br><span class="line">       OuterClass outer = <span class="keyword">new</span> OuterClass();        </span><br><span class="line">       OuterClass.InnerClass inner  = outer.<span class="function">new <span class="title">InnerClass</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 调用非静态内部类的非静态方法</span></span><br><span class="line">       inner.display();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 我们也可以结合以上步骤，一步创建的内部类实例</span></span><br><span class="line">       OuterClass.InnerClass innerObject = <span class="keyword">new</span> OuterClass().<span class="function">new <span class="title">InnerClass</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 同样我们现在可以调用内部类方法</span></span><br><span class="line">       innerObject.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://codegym.cc/quests/lectures/zh.questsyntax.level06.lecture06">static 变量和方法</a></p>
<p><a href="https://www.cnblogs.com/Alex--Yang/p/3386863.html">Java-静态类</a></p>
<p><a href="https://blog.csdn.net/winfredzen/article/details/78458233">Java 静态类、静态方法和静态变量</a></p>
<p><a href="https://www.cnblogs.com/kissazi2/p/3971065.html">java中的Static class</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-异常</title>
    <url>/c2b6c13e/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>Java的基本理念是“结构不佳的代码不能运行”</strong></p>
<p>使用异常，可以降低错误处理代码的复杂度</p>
<blockquote>
<ul>
<li>不必在方法调用处进行检查，异常机制会捕捉该错误</li>
<li>只需在一个地方（异常处理程序）中处理错误，节省代码</li>
</ul>
</blockquote>
<p><img src="/c2b6c13e/1080.webp"></p>
<h1 id="基本异常"><a href="#基本异常" class="headerlink" title="基本异常"></a>基本异常</h1><p><strong>抛出异常</strong>：从当前环境中跳出，把问题提交给上一级环境</p>
<p>问题指的是，当前方法或作用域被阻止而无法继续执行，即<strong>异常情形</strong></p>
<blockquote>
<p>抛出异常后，将使用<code>new</code>在堆上<strong>创建异常对象</strong>,然后当前路径不会再继续执行，并且从当前环境中<strong>弹出异常对象的引用</strong>，此时，<strong>异常处理机制</strong>接管程序，并在<a href="#ycclcx"><strong>异常处理程序</strong></a>继续执行程序</p>
<p>异常对象的<strong>引用</strong>将传给<code>throw</code>，可以<strong>简单地</strong>把异常处理看成是一种<strong>不同的返回机制</strong>，因此，利用抛出异常的方式可以<strong>从当前作用域退出</strong></p>
<p>返回的“地点”是<strong>异常处理程序</strong>，可能跨越方法调用栈的许多层次</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String t = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>异常允许我们<strong>强制程序停止运行</strong>，并告诉我们出现的问题，或者<strong>强制程序处理问题</strong>，并返回到稳定状态</p>
<h2 id="异常参数"><a href="#异常参数" class="headerlink" title="异常参数"></a>异常参数</h2><p>标准异常类有<strong>两个</strong>构造器，分别是<strong>默认构造器</strong>，<strong>接受字符串作为参数</strong>的构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;t = null&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h1><h2 id="try块"><a href="#try块" class="headerlink" title="try块"></a>try块</h2><p>如果在方法内部或方法内部调用其他方法抛出异常，这个方法将在抛出异常的过程中结束，因此，为了不让方法结束，我们使用<strong>try块</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 可能产生异常的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="异常处理程序"><a href="#异常处理程序" class="headerlink" title="异常处理程序"></a><p id="ycclcx">异常处理程序</p></h2><p>抛出异常的处理“地点”，紧跟<strong>try块</strong>之后，用关键字<code>catch</code>表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(Type1 id1)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(Type2 id2)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只有异常类型匹配的第一个catch语句才会被执行</p>
<h1 id="创建自定义异常"><a href="#创建自定义异常" class="headerlink" title="创建自定义异常"></a>创建自定义异常</h1><p>必须从已有的异常类继承</p>
<p>产生默认构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exception1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throw MyException&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        exception1 e1 = <span class="keyword">new</span> exception1();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            e1.f();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (MyException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;捕获异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Throw MyException</span><br><span class="line">捕获异常</span><br></pre></td></tr></table></figure>
<p>自定义字符串作参数的构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exception1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throw MyException from f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Throw MyException from g()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;g() 产生异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        exception1 e1 = <span class="keyword">new</span> exception1();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            e1.f();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (MyException e)&#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            e1.g();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (MyException e)&#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Throw MyException from f()</span><br><span class="line">MyException</span><br><span class="line">	at exception1.f(exception1.java:15)</span><br><span class="line">	at exception1.main(exception1.java:24)</span><br><span class="line">Throw MyException from g()</span><br><span class="line">MyException: g() 产生异常</span><br><span class="line">	at exception1.g(exception1.java:19)</span><br><span class="line">	at exception1.main(exception1.java:29)</span><br></pre></td></tr></table></figure>
<p><code>e.printStackTrace()</code>在<code>Throwable</code>类中声明，该方法打印<strong>从方法调用处直到异常抛出处</strong>的方法调用序列</p>
<h1 id="异常说明"><a href="#异常说明" class="headerlink" title="异常说明"></a>异常说明</h1><p><code>throws</code>后面接所有可能产生的异常类型</p>
<h1 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h1><p>通过捕获异常类型的基类<code>Exception</code>，且放在处理程序列表的<strong>末尾</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取详细信息</span></span><br><span class="line"><span class="function">String <span class="title">getMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取用本地语言表示的详细信息</span></span></span><br><span class="line"><span class="function">String <span class="title">getLocalizedMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回堆Throwable的简单描述</span></span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 打印Throwable和Throwable的调用栈轨迹</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;MyException简单信息&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;捕获异常&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;getMessage():  &quot;</span>+e.getMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;getLocalizedMessage():  &quot;</span>+e.getLocalizedMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;toString():  &quot;</span>+e.toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;printStackTrace():&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">捕获异常</span><br><span class="line">getMessage():  MyException简单信息</span><br><span class="line">getLocalizedMessage():  MyException简单信息</span><br><span class="line">toString():  MyException: MyException简单信息</span><br><span class="line">printStackTrace():</span><br><span class="line">MyException: MyException简单信息</span><br><span class="line">	at exception1.main(exception1.java:33)</span><br></pre></td></tr></table></figure>
<h2 id="栈轨迹"><a href="#栈轨迹" class="headerlink" title="栈轨迹"></a>栈轨迹</h2><p><code>getStackTrace()</code>返回一个由栈轨迹中的元素所构成的数组，其中每一个元素都表示栈中的一帧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exception2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">for</span>(StackTraceElement ste : e.getStackTrace())</span><br><span class="line">                System.out.println(ste.getMethodName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span></span>&#123;</span><br><span class="line">        g();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        f();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        g();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        h();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">f</span><br><span class="line">main</span><br><span class="line">--------------------</span><br><span class="line">f</span><br><span class="line">g</span><br><span class="line">main</span><br><span class="line">--------------------</span><br><span class="line">f</span><br><span class="line">g</span><br><span class="line">h</span><br><span class="line">main</span><br></pre></td></tr></table></figure>
<h2 id="重新抛出异常"><a href="#重新抛出异常" class="headerlink" title="重新抛出异常"></a>重新抛出异常</h2><p>重抛异常会将异常抛给<strong>上一级</strong>环境，同try块的后续catch语句将不会被执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>异常对象的所有信息都被<strong>保存</strong>，因此，上一级环境所捕获的异常包含这个异常对象的<strong>所有信息</strong></p>
<p>对于重新抛出的异常对象，<code>printStackTrace()</code>显示的仍是<strong>原来异常抛出点</strong>的调用栈信息。</p>
<p>因此使用<code>fillInStackTrace()</code>更新信息，该方法返回一个<code>Throwable</code>对象，它是通过把当前调用信息填入原来的异常对象而建立的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">rethrowing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception from f()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;thrown from f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;g(), e.printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;h(), e.printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">            <span class="keyword">throw</span> (Exception)e.fillInStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            g();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;mian: printStackTrace()&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            h();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main: printStackTrace&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">exception from f()</span><br><span class="line">g(), e.printStackTrace()</span><br><span class="line">java.lang.Exception: thrown from f()</span><br><span class="line">	at rethrowing.f(rethrowing.java:5)</span><br><span class="line">	at rethrowing.g(rethrowing.java:9)</span><br><span class="line">	at rethrowing.main(rethrowing.java:28)</span><br><span class="line">mian: printStackTrace()</span><br><span class="line">java.lang.Exception: thrown from f()</span><br><span class="line">	at rethrowing.f(rethrowing.java:5)</span><br><span class="line">	at rethrowing.g(rethrowing.java:9)</span><br><span class="line">	at rethrowing.main(rethrowing.java:28)</span><br><span class="line">	</span><br><span class="line">//有更新</span><br><span class="line">exception from f()</span><br><span class="line">h(), e.printStackTrace()</span><br><span class="line">java.lang.Exception: thrown from f()</span><br><span class="line">	at rethrowing.f(rethrowing.java:5)</span><br><span class="line">	at rethrowing.h(rethrowing.java:18)</span><br><span class="line">	at rethrowing.main(rethrowing.java:34)</span><br><span class="line">main: printStackTrace</span><br><span class="line">java.lang.Exception: thrown from f()</span><br><span class="line">	at rethrowing.h(rethrowing.java:22)</span><br><span class="line">	at rethrowing.main(rethrowing.java:34)</span><br></pre></td></tr></table></figure>
<h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>异常链：在捕获一个异常后抛出另一个异常，并且把原始异常的信息保存下来</p>
<p>构造器接受<code>cause</code>对象作为参数，适用于<code>Error</code>,<code>Exception</code>,<code>RuntimeException</code>.</p>
<p>其它类型的异常类，使用<code>initCause()</code>方法</p>
<h1 id="标准异常"><a href="#标准异常" class="headerlink" title="标准异常"></a>标准异常</h1><p><code>Error</code>表示编译时的系统错误</p>
<p><code>Exception</code>是可以抛出的基本类型</p>
<p><img src="/c2b6c13e/1080.webp"></p>
<p>不接受检查的异常，如<code>RuntimeException</code>类，这种异常会被<strong>自动捕获</strong></p>
<p><img src="/c2b6c13e/1080.webp"></p>
<h1 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h1><p>无论异常是否被抛出，<code>finally</code>始终被执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即使异常没有当前异常处理程序捕获，异常处理机制也会在跳到更高一层的异常处理程序之前，执行<code>finally</code>语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 该层没有异常处理程序</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception();	<span class="comment">// 会跳到上一层异常处理程序</span></span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="comment">// 该异常处理程序执行之前，上方的finally语句会被执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>finally</code>即使在<code>return</code>之后，依然会被执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">// 会被执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><p>基本原则：每一次构造新对象，都应包含在其<strong>try-finally</strong>语句块中，并且每一个对象构造之后跟随一个<strong>try-finally</strong>语句块一确保成功清理对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	Person p = <span class="keyword">new</span> Person;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">		</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//清理对象，假设dispose()已在Person类实现</span></span><br><span class="line">        p.dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果，p对象构造失败，将进入<strong>外部</strong>catch语句，因此，dispose()方法<strong>不会调用</strong>。</p>
<p>如果构造成功，为了保证对象能够被清理，在<strong>构造之后立即创建一个try块</strong></p>
<p>在这种方法中，finally只有在p对象构造成功才会执行</p>
<h1 id="异常匹配"><a href="#异常匹配" class="headerlink" title="异常匹配"></a>异常匹配</h1><p>派生类的对象也可以匹配基类的处理程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exception1</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exception2</span> <span class="keyword">extends</span> <span class="title">Exception1</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception2();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception1 e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;捕获异常Exception1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>《Java编程思想》</p>
<p><a href="https://codegym.cc/groups/posts/28-exceptions-checked-unchecked-and-custom">Java的异常</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 类的初始化顺序</title>
    <url>/2af416/</url>
    <content><![CDATA[<blockquote>
<p><strong>静态变量，静态代码块&gt;主函数main&gt;变量，构造代码块&gt;构造方法</strong></p>
</blockquote>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><blockquote>
<ul>
<li>只有创建对象，构造函数才会执行</li>
<li>只运行一次</li>
<li>给对象进行初始化</li>
</ul>
</blockquote>
<h1 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>创建对象时执行，且<strong>优先于构造函数</strong></li>
<li>无法自行调用</li>
<li>给<strong>对象</strong>经行统一初始化</li>
</ul>
</blockquote>
<h1 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>随着类的加载而执行，且<strong>只执行一次</strong>，<strong>优先于主函数</strong></li>
<li>给<strong>类</strong>进行初始化</li>
<li>块中变量为<strong>局部变量</strong></li>
<li>一个类可以有<strong>多个</strong>静态代码块</li>
</ul>
</blockquote>
<h2 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h2><blockquote>
<ul>
<li>new 创建该类对象时</li>
<li>使用java.lang.reflext进行反射调用时</li>
<li>无事先加载该类，而加载该类的子类时</li>
<li>虚拟机启动，初始化main函数所在的类</li>
</ul>
</blockquote>
<h1 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1 a = <span class="keyword">new</span> test1();</span><br><span class="line">        test1 b = <span class="keyword">new</span> test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">构造代码块</span><br><span class="line">构造函数</span><br><span class="line">构造代码块</span><br><span class="line">构造函数</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str1 = <span class="string">&quot;静态变量&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span>  String str2 = <span class="string">&quot;变量&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        <span class="comment">// System.out.println(str2);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1 a = <span class="keyword">new</span> test1();</span><br><span class="line">        <span class="comment">//test1 b = new test1();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">静态变量</span><br><span class="line">---------------</span><br><span class="line">构造代码块</span><br><span class="line">静态变量</span><br><span class="line">变量</span><br><span class="line">---------------</span><br><span class="line">构造函数</span><br><span class="line">---------------</span><br></pre></td></tr></table></figure>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>执行顺序</p>
<blockquote>
<ul>
<li>执行父类静态代码块，初始化父类静态成员变量</li>
<li>执行子类静态代码块，初始化子类静态成员变量</li>
<li>执行父类构造代码块，父类构造函数，父类普通成员变量</li>
<li>执行子类构造代码块，子类构造函数，子类普通成员变量</li>
</ul>
</blockquote>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://zhuanlan.zhihu.com/p/122554857">知乎-Java初始化顺序</a></p>
<p><a href="https://blog.csdn.net/z69183787/article/details/25366627?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&dist_request_id=1328593.10670.16147488454022055&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control">CSDN-Java初始化顺序</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java后端学习之路</title>
    <url>/6714d3d6/</url>
    <content><![CDATA[<p><img src="/6714d3d6/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.png" alt="Java后端开发"></p>
<h1 id="Java后端开发"><a href="#Java后端开发" class="headerlink" title="Java后端开发"></a>Java后端开发</h1><h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h3><ul>
<li><p>语言基础</p>
<ul>
<li>基础语法</li>
<li>面向对象</li>
<li>接口</li>
<li>容器</li>
<li>异常</li>
<li>泛型</li>
<li>反射</li>
<li>注解</li>
<li>I/O</li>
<li>图形化</li>
</ul>
</li>
<li><p>JVM虚拟机</p>
<ul>
<li>类加载机制</li>
<li>字节码执行机制</li>
<li>JVM内存模型</li>
<li>GC垃圾回收</li>
<li>JVM性能监控与故障定位</li>
<li>JVM调优</li>
</ul>
</li>
<li><p>多线程/并发</p>
<ul>
<li>并发编程的基础</li>
<li>线程池</li>
<li>锁</li>
<li>并发容器</li>
<li>原子类</li>
<li>JUC并发工具类</li>
</ul>
</li>
</ul>
<h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul>
<li><p>数据结构</p>
<ul>
<li>字符串</li>
<li>数组</li>
<li>链表</li>
<li>堆，栈，队列</li>
<li>二叉树</li>
<li>哈希</li>
<li>图</li>
</ul>
</li>
<li><p>算法</p>
<ul>
<li>排序</li>
<li>查找</li>
<li>贪心</li>
<li>分治</li>
<li>动态规划</li>
<li>回溯</li>
</ul>
</li>
</ul>
<h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><ul>
<li>ARP协议</li>
<li>IP协议，ICMP协议</li>
<li>TCP，UDP协议</li>
<li>DNS，HTTP，HTTPS协议</li>
<li>session，cookie</li>
</ul>
<h3 id="SQL-数据库"><a href="#SQL-数据库" class="headerlink" title="SQL/数据库"></a>SQL/数据库</h3><ul>
<li>SQL语句的书写</li>
<li>SQL语句的优化</li>
<li>事物，隔离级别</li>
<li>索引</li>
<li>锁</li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li>进程，线程</li>
<li>并发，锁</li>
<li>内存管理和调度</li>
<li>I/O原理</li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul>
<li>单例</li>
<li>工厂</li>
<li>代理</li>
<li>策略</li>
<li>模版方法</li>
<li>观察者</li>
<li>适配器</li>
<li>责任链</li>
<li>建造者</li>
</ul>
<h2 id="研发工具"><a href="#研发工具" class="headerlink" title="研发工具"></a>研发工具</h2><h3 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h3><ul>
<li>eclipse</li>
<li>intellij IDEA</li>
<li>VSCode</li>
</ul>
<h3 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h3><ul>
<li>常用命令</li>
<li>shell脚本</li>
</ul>
<h3 id="项目管理-构建工具"><a href="#项目管理-构建工具" class="headerlink" title="项目管理/构建工具"></a>项目管理/构建工具</h3><ul>
<li>Maven</li>
<li>Gradle</li>
</ul>
<h3 id="代码管理工具"><a href="#代码管理工具" class="headerlink" title="代码管理工具"></a>代码管理工具</h3><ul>
<li>git</li>
<li>s v n</li>
</ul>
<h2 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul>
<li><p>Spring家族框架</p>
<ul>
<li><p>Spring</p>
<ul>
<li>loC</li>
<li>AOP</li>
</ul>
</li>
<li><p>SpringMC</p>
</li>
<li><p>Spring Boot</p>
<ul>
<li><p>自动配置，开箱即用</p>
</li>
<li><p>整合Web</p>
</li>
<li><p>整合数据库（事物问题）</p>
</li>
<li><p>整合权限</p>
<ul>
<li>Shiro</li>
<li>Spring Security</li>
</ul>
</li>
<li><p>整合各种中间件</p>
<ul>
<li>Redis，MQ，PRC框架，NIO框架</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>服务器软件</p>
<ul>
<li><p>Web服务器</p>
<ul>
<li>N g i n x</li>
</ul>
</li>
<li><p>应用服务器</p>
<ul>
<li>Tomcat</li>
<li>Jetty</li>
<li>Undertow</li>
</ul>
</li>
</ul>
</li>
<li><p>中间件</p>
<ul>
<li><p>缓存</p>
<ul>
<li><p>Redis</p>
<ul>
<li>5大基础数据类型</li>
<li>事物</li>
<li>管道</li>
<li>持久化</li>
<li>集群</li>
</ul>
</li>
</ul>
</li>
<li><p>消息队列</p>
<ul>
<li>RocketMQ</li>
<li>R a b bi t MQ</li>
<li>Kafka</li>
</ul>
</li>
<li><p>RPC框架</p>
<ul>
<li>Dubbo</li>
<li>gRPC</li>
<li>Thrift</li>
<li>Spring Cloud</li>
<li>Netty</li>
</ul>
</li>
</ul>
</li>
<li><p>数据库框架</p>
<ul>
<li><p>ORM层框架</p>
<ul>
<li>Mybatis</li>
<li>Hibernate</li>
<li>JPA</li>
</ul>
</li>
<li><p>连接池</p>
<ul>
<li>Druid</li>
<li>HikariCP</li>
<li>C3P0</li>
</ul>
</li>
<li><p>分库分表</p>
<ul>
<li>M y CAT</li>
<li>Sharding-JDBC</li>
<li>Sharding- Sphere</li>
</ul>
</li>
</ul>
</li>
<li><p>搜索引擎</p>
<ul>
<li>ElasticSearch</li>
<li>S o l r</li>
</ul>
</li>
<li><p>分布式/微服务</p>
<ul>
<li><p>服务发现/注册</p>
<ul>
<li>Eureka</li>
<li>Consul</li>
<li>Zookeeper</li>
<li>Nacos</li>
</ul>
</li>
<li><p>网关</p>
<ul>
<li>Zuul</li>
<li>Gateway</li>
</ul>
</li>
<li><p>服务调用（负载均衡）</p>
<ul>
<li>Ribbon</li>
<li>Feign</li>
</ul>
</li>
<li><p>熔断/降级</p>
<ul>
<li>Hystrix</li>
</ul>
</li>
<li><p>配置中心</p>
<ul>
<li>Config</li>
<li>Apollo</li>
<li>Nacos</li>
</ul>
</li>
<li><p>认证和鉴权</p>
<ul>
<li>Spring Security</li>
<li>OAuth2</li>
<li>SSO单点登录</li>
</ul>
</li>
<li><p>分布式事务</p>
<ul>
<li><p>JTA接口</p>
<ul>
<li>Atomikos组件</li>
</ul>
</li>
<li><p>2PC，3PC</p>
</li>
<li><p>XA模式</p>
</li>
<li><p>TCC模式</p>
<ul>
<li>tcc-transaction</li>
<li>ByteTCC</li>
<li>EasyTransaction</li>
<li>Seata</li>
</ul>
</li>
<li><p>SAGA模式</p>
<ul>
<li>ServiceComb</li>
<li>Seata</li>
</ul>
</li>
<li><p>LCN模式</p>
<ul>
<li>tx-lcn</li>
</ul>
</li>
</ul>
</li>
<li><p>任务调度</p>
<ul>
<li>Quartz</li>
<li>Elastic-Job</li>
</ul>
</li>
<li><p>链路追踪和监控</p>
<ul>
<li>Zipkin</li>
<li>Sleuth</li>
<li>Skywalking</li>
</ul>
</li>
<li><p>日志分析与监控</p>
<ul>
<li><p>ELK</p>
<ul>
<li>ElasticSearch</li>
<li>Logstash</li>
<li>Kibana</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>虚拟化/容器化</p>
<ul>
<li><p>容器技术</p>
<ul>
<li>Docker</li>
</ul>
</li>
<li><p>容器编排技术</p>
<ul>
<li>Kubernetes</li>
<li>Swarm</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul>
<li><p>基础套餐</p>
<ul>
<li><p>三大件</p>
<ul>
<li>HTML</li>
<li>JavaScript</li>
<li>CSS</li>
</ul>
</li>
<li><p>基础库</p>
<ul>
<li>JQuery</li>
<li>Ajax</li>
</ul>
</li>
</ul>
</li>
<li><p>模版框架</p>
<ul>
<li>JSP/JSTL</li>
<li>Thymeleaf</li>
<li>FreeMarker</li>
</ul>
</li>
<li><p>组件化框架</p>
<ul>
<li>Node</li>
<li>Vue</li>
<li>React</li>
<li>Angular</li>
</ul>
</li>
</ul>
<h2 id="运维知识"><a href="#运维知识" class="headerlink" title="运维知识"></a>运维知识</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><ul>
<li>Nginx</li>
</ul>
<h3 id="应用服务器"><a href="#应用服务器" class="headerlink" title="应用服务器"></a>应用服务器</h3><ul>
<li>Tomcat</li>
<li>Jetty</li>
<li>Undertow</li>
</ul>
<h3 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h3><h3 id="持续集成-持续部署"><a href="#持续集成-持续部署" class="headerlink" title="持续集成/持续部署"></a>持续集成/持续部署</h3><ul>
<li>Jenkins</li>
</ul>
<h3 id="代码质量检查"><a href="#代码质量检查" class="headerlink" title="代码质量检查"></a>代码质量检查</h3><ul>
<li>sonar</li>
</ul>
<h3 id="日志收集和分析"><a href="#日志收集和分析" class="headerlink" title="日志收集和分析"></a>日志收集和分析</h3><ul>
<li>ELK</li>
</ul>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://www.bilibili.com/video/BV1GQ4y1N7HD">B站upCodesheepJava后端开发详细学习路线视频教程</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础语言</title>
    <url>/24268d51/</url>
    <content><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><h3 id="简单（原始）"><a href="#简单（原始）" class="headerlink" title="简单（原始）"></a>简单（原始）</h3><blockquote>
<p>直接存储值</p>
<p>赋值时，复制该值</p>
</blockquote>
<table>
<thead>
<tr>
<th>int</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="复合（引用）"><a href="#复合（引用）" class="headerlink" title="复合（引用）"></a>复合（引用）</h3><blockquote>
<p>所有复合类型都由简单类型组成，称为<strong>类</strong></p>
<p>存储对象的引用</p>
<p>赋值时，只复制对象的地址</p>
<p><code>String</code>也是一种复合类型，由<code>char</code>组成</p>
</blockquote>
<p><strong>复合类型的变量不存储对象本身，而只存储对象引用（即对象的四字节地址）</strong></p>
<p><strong>如果更改一个变量所引用的对象的数据，则会更改其他变量所引用的数据</strong></p>
<blockquote>
<p>但对<code>String</code>引用的直接修改有些不同</p>
</blockquote>
<h4 id="String深入探讨"><a href="#String深入探讨" class="headerlink" title="String深入探讨"></a><code>String</code>深入探讨</h4><h5 id="两种创建方式"><a href="#两种创建方式" class="headerlink" title="两种创建方式"></a>两种创建方式</h5><p>最简单，常量字符串赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">String b = <span class="string">&quot;1&quot;</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该方法所创建的字符串会存储在<strong>公共池</strong>中</p>
<p>JVM首先会查找创建的对象是否存在于公共池当中</p>
<p>若存在，则返回其引用（防止重复创建，节约内存）</p>
<p>否则，新建该对象，并存储在公共池</p>
<p><code>a == b</code> 返回 <code>true</code></p>
</blockquote>
<p>使用构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String c = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">String d = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该方法所创建的字符串会存储在<strong>堆</strong>中</p>
<p><code>c == d</code> 返回 <code>false</code></p>
</blockquote>
<h5 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h5><p>查看源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可见<code>String</code>数据被存储在<code>final</code>修饰的<code>char[]</code>中，因此无法修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">String b = a;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line">b = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>b = &quot;2&quot;</code>会在公共池中新建一个“2”字符串，b指向新建的“2”</p>
<p>a 指向原来的 “1” 不变</p>
</blockquote>
<h5 id="intern"><a href="#intern" class="headerlink" title="intern()"></a><code>intern()</code></h5><blockquote>
<p>检查常量池中是否有匹配的字符串</p>
<p>若存在，返回对应常量池字符串的引用</p>
<p>否则，将该字符串添加到常量池中并返回其引用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2.intern());</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回true</span></span><br></pre></td></tr></table></figure>


<h5 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h5><h5 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h5><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><blockquote>
<p>一旦没有变量引用某个对象，该对象就会被标记为垃圾， Java 在下次收集垃圾时会将其销毁</p>
<p>只要对象至少有一个引用，该对象即被视为活跃对象并且不会被销毁。如果你想尽快处理对象，可以通过为引用该对象的所有变量赋值 <strong>null</strong> 来清除该对象的所有引用。</p>
</blockquote>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><p>当函数参数为一个对象的引用时，调用该函数时，传递的是对象<strong>引用的副本</strong>，而不是引用本身，</p>
<p>因此会存在该对象的两个引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.age = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        test1.change1(person);</span><br><span class="line">        System.out.println(person.age);</span><br><span class="line"></span><br><span class="line">        test1.change2(person);</span><br><span class="line">        System.out.println(person.age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change1</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        person.age = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change2</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.age = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>change2()</code>结果是，两个引用指向两个不同的变量</p>
</blockquote>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="非static函数工作原理"><a href="#非static函数工作原理" class="headerlink" title="非static函数工作原理"></a>非static函数工作原理</h3><blockquote>
<p>使用&lt;对象&gt;.&lt;方法名称&gt; 调用函数</p>
<p>实际上是在调用类对应函数，并将该对象作为第一个参数进行传递。在函数内，该对象称为<code>this</code>。函数中的所有操作都是针对此对象及其数据执行的。</p>
</blockquote>
<h3 id="static函数工作原理"><a href="#static函数工作原理" class="headerlink" title="static函数工作原理"></a>static函数工作原理</h3><blockquote>
<p>使用&lt;类名&gt;.&lt;方法名称&gt; 调用函数</p>
<p>不会传递任何对象，即<code>this</code>为<code>null</code></p>
<p>因此，<strong>static 函数无法访问非 static 变量和函数</strong> </p>
</blockquote>
<p>优点</p>
<blockquote>
<ul>
<li>不必传递对象引用，就可以使用 <code>static</code>  方法和变量</li>
<li>可能需先调用一个一个方法，才能创建对象（如<code>main()</code>设置为static）</li>
<li>可能需要只有一个变量副本，如，<code>System.out</code></li>
</ul>
</blockquote>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h3 id><a href="#" class="headerlink" title="=="></a><code>==</code></h3><blockquote>
<p>比较引用对象时，不是比较对象的属性</p>
<p>即，只有两个引用变量是对同一个对象的引用时，才返回<code>true</code></p>
</blockquote>
<h3 id="equal"><a href="#equal" class="headerlink" title="equal()"></a><code>equal()</code></h3><blockquote>
<p><code>equals()</code>属于<code>Object</code>类-Java中最重要的类，是所有其他类的派生类</p>
<p>需对类中的<code>equals()</code>重写</p>
</blockquote>
<h3 id="equalsIgnoreCase"><a href="#equalsIgnoreCase" class="headerlink" title="equalsIgnoreCase()"></a><code>equalsIgnoreCase()</code></h3><blockquote>
<p>无视字符串中的大小写</p>
</blockquote>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h3><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote>
<p>泛型是带有参数的类型。在 Java 中，容器类允许你指出其内部对象的类型</p>
<p>声明泛型变量时,指出变量类型和它所存储的数据的类型</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();	</span><br></pre></td></tr></table></figure>
<blockquote>
<p>任何类都可以作为类型参数</p>
<p>不能是原始类型，所有类型参数都必须从 Object 类继承</p>
</blockquote>
<p>原始类型对应包装类</p>
<table>
<thead>
<tr>
<th>原始类型</th>
<th>类</th>
<th>列表</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>Integer</td>
<td>ArrayList<Integer></Integer></td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td>ArrayList<Double></Double></td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
<td>ArrayList<Boolean></Boolean></td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
<td>ArrayList<Character></Character></td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
<td>ArrayList<Byte></Byte></td>
</tr>
</tbody></table>
<h2 id="数组与ArraysList"><a href="#数组与ArraysList" class="headerlink" title="数组与ArraysList"></a>数组与ArraysList</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = &#123;<span class="number">167</span>, -<span class="number">2</span>, <span class="number">16</span>, <span class="number">99</span>, <span class="number">26</span>, <span class="number">92</span>, <span class="number">43</span>, -<span class="number">234</span>, <span class="number">35</span>, <span class="number">80</span>&#125;;</span><br></pre></td></tr></table></figure>
<p><code>Arrays.sort()</code>方法对数组进行排序</p>
<p><code>Arrays.toString()</code>将数组转换为字符串</p>
<p><code>Arrays.copyOf()</code>复制数组</p>
<p><code>Arrays.equals()</code>比较数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(numbers);</span><br><span class="line"><span class="keyword">int</span> [] numbersCopy = Arrays.copyOf(numbers, <span class="number">4</span>);</span><br><span class="line">System.out.println(Arrays.toString(numbers));</span><br><span class="line">System.out.println(Arrays.equals(numbers, numbers2));</span><br></pre></td></tr></table></figure>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p><code>Arrays.deepEquals()</code></p>
<p><code>Arrays.deepToString()</code></p>
<h3 id="ArraysList"><a href="#ArraysList" class="headerlink" title="ArraysList"></a>ArraysList</h3><p>创建一个具有特定大小的数组的列表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Car&gt; cars = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<p>一次分配一个包含100个元素的数组的内存，从而使该数组效率更高（不需要扩展）</p>
<p>缺点，<strong>从中删除对象时<code>ArrayList</code>，内部数组的大小不会自动减小。</strong> </p>
<p>使用<code>ArrayList</code>该类的一种特殊方法来优化内存使用：<code>trimToSize()</code>。此方法将内部数组的长度“修剪”到当前存储在内部数组中的元素数量。</p>
<h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h1 id="集合与接口"><a href="#集合与接口" class="headerlink" title="集合与接口"></a>集合与接口</h1><p>四个列表、三个集和四个映射</p>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">   set.add(<span class="string">&quot;西班牙&quot;</span>);</span><br><span class="line">   set.add(<span class="string">&quot;的&quot;</span>);</span><br><span class="line">   set.add(<span class="string">&quot;雨&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取集的迭代器</span></span><br><span class="line">    Iterator&lt;String&gt; iterator = set.iterator();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (iterator.hasNext())        <span class="comment">// 检查是否存在另一个元素</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// 获取当前元素并移至下一个</span></span><br><span class="line">      String text = iterator.next();</span><br><span class="line"></span><br><span class="line">       System.out.println(text);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="keyword">for</span> (String text : set)</span><br><span class="line">   &#123;</span><br><span class="line">       System.out.println(text);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有元素成对存储</span></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;第一个&quot;</span>, <span class="string">&quot;西班牙&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;第二个&quot;</span>, <span class="string">&quot;的&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;第三个&quot;</span>, <span class="string">&quot;雨&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (iterator.hasNext())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取键-值对</span></span><br><span class="line">        Map.Entry&lt;String, String&gt; pair = iterator.next();</span><br><span class="line">        String key = pair.getKey();            <span class="comment">// 键</span></span><br><span class="line">        String value = pair.getValue();        <span class="comment">// 值</span></span><br><span class="line">        System.out.println(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//简写</span></span><br><span class="line">	<span class="keyword">for</span> (Map.Entry&lt;String, String&gt; pair : map.entrySet())</span><br><span class="line">    &#123;</span><br><span class="line">        String key = pair.getKey();                      <span class="comment">// 键</span></span><br><span class="line">        String value = pair.getValue();                  <span class="comment">// 值</span></span><br><span class="line">        System.out.println(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h2 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">String s = reader.readLine();</span><br></pre></td></tr></table></figure>
<p><code>System.in</code>是一个<code>InputStream</code>对象</p>
<p><code>System.in.read()</code>读取的是<strong>字节</strong></p>
<p><code>InputStreamReader</code>不仅从流接收数据。它还将<strong>字节流转换为字符流</strong></p>
<p><code>BufferedReader</code>读取数据时，它使用一个称为<strong>缓冲区</strong>的特殊区域，在该区域中“存储”读取的字符。最终，当程序中需要这些字符时，它们将从缓冲区中获取，而不是直接从数据源（键盘，文件等）中获取。这样可以节省大量资源。</p>
<h1 id="持续更新中"><a href="#持续更新中" class="headerlink" title="持续更新中"></a>持续更新中</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux多节点环境打造</title>
    <url>/d49360d3/</url>
    <content><![CDATA[<h1 id="基本准备"><a href="#基本准备" class="headerlink" title="基本准备"></a>基本准备</h1><h2 id="软件资源准备"><a href="#软件资源准备" class="headerlink" title="软件资源准备"></a>软件资源准备</h2><h3 id="Linux-CentOS7"><a href="#Linux-CentOS7" class="headerlink" title="Linux CentOS7"></a>Linux CentOS7</h3><p>进入<a href="https://www.centos.org/">CentOS官网</a>，点击CentOS Linux</p>
<img src="/d49360d3/image-20210221150445096.png" style="zoom:50%;">

<p>选择CentOS7下的x86_64</p>
<img src="/d49360d3/image-20210221151338404.png" style="zoom:50%;">

<p>选择合适镜像链接下载CentOS-7-x86_64-DVD-2009.iso </p>
<p>也可以点击<a href="http://mirrors.huaweicloud.com/centos/7.9.2009/isos/x86_64/">安装链接</a>直接安装</p>
<a id="more"></a>

<h3 id="VMware-Workstation-Pro（虚拟机软件）"><a href="#VMware-Workstation-Pro（虚拟机软件）" class="headerlink" title="VMware Workstation Pro（虚拟机软件）"></a>VMware Workstation Pro（虚拟机软件）</h3><p>此软件适用于window和Linux操作系统</p>
<p>点击<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">下载链接</a>选择合适的版本下载</p>
<p>若使用mac操作系统，请下载<a href="https://www.vmware.com/products/fusion/fusion-evaluation.html">VMware fusion</a></p>
<h3 id="Xshell（SSH终端）"><a href="#Xshell（SSH终端）" class="headerlink" title="Xshell（SSH终端）"></a>Xshell（SSH终端）</h3><p>在该<a href="https://www.netsarang.com/zh/free-for-home-school/">网站</a>提交邮箱即可获得免费版下载地址</p>
<h3 id="Xftp（SFTP文件传输工具）"><a href="#Xftp（SFTP文件传输工具）" class="headerlink" title="Xftp（SFTP文件传输工具）"></a>Xftp（SFTP文件传输工具）</h3><p>在该<a href="https://www.netsarang.com/zh/free-for-home-school/">网站</a>提交邮箱即可获得免费版下载地址</p>
<h2 id="安装Linux"><a href="#安装Linux" class="headerlink" title="安装Linux"></a>安装Linux</h2><p>打开VMware，点击创建新的虚拟机</p>
<img src="/d49360d3/image-20210221162508578.png" style="zoom:50%;">

<p>选择-典型</p>
<img src="/d49360d3/image-20210221162708548.png" alt="image-20210221162708548" style="zoom:50%;">

<p>选择-稍后安装操作系统</p>
<img src="/d49360d3/image-20210221162749238.png" alt="image-20210221162749238" style="zoom:50%;">

<p>选择-CentOS7 64位版本</p>
<img src="/d49360d3/image-20210221162901609.png" alt="image-20210221162901609" style="zoom:50%;">

<p>设置名称和路径</p>
<img src="/d49360d3/image-20210221163030778.png" alt="image-20210221163030778" style="zoom:50%;">

<p>分配磁盘大小，实际占用的是刚刚我们选择路径的磁盘空间</p>
<img src="/d49360d3/image-20210221163144702.png" alt="image-20210221163144702" style="zoom:50%;">

<p>自定义硬件</p>
<p>选择刚刚下载CentOS7 ios文件</p>
<img src="/d49360d3/image-20210221163526501.png" alt="image-20210221163526501" style="zoom:50%;">

<p>设置处理器内核数量，博主笔记本为8核处理器，因此设置2核</p>
<img src="/d49360d3/image-20210221163738134.png" alt="image-20210221163738134" style="zoom:50%;">

<p>设置内存，博主笔记本为8g内存（打算以后再升级），设置2g内存</p>
<img src="/d49360d3/image-20210221163847605.png" alt="image-20210221163847605" style="zoom:50%;">

<p>点击完成，然后启动</p>
<p>按下键盘↑方向键，回车</p>
<img src="/d49360d3/image-20210221201145200.png" alt="image-20210221201145200" style="zoom:50%;">

<p>然后选择语言（选中文），点击继续，选择自己安装的软件，点击安装</p>
<p>设置root密码</p>
<img src="/d49360d3/image-20210221202349911.png" alt="image-20210221202349911" style="zoom:50%;">

<p>静静等待安装~</p>
<p>最后创建用户名即可</p>
<h1 id="设置静态ip"><a href="#设置静态ip" class="headerlink" title="设置静态ip"></a>设置静态ip</h1><h2 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h2><p>点击虚拟机——设置——网络适配器——桥接模式</p>
<p>点击编辑——虚拟网络编辑器——VMnet0设置桥接模式且选择对应网卡</p>
<p>如何查看自己的网卡</p>
<p>打开网络与共享中心——点击你所连接的网络——属性</p>
<img src="/d49360d3/image-20210221213438143.png" alt="image-20210221213438143" style="zoom:50%;">

<h2 id="Linux设置"><a href="#Linux设置" class="headerlink" title="Linux设置"></a>Linux设置</h2><p>打开控制台，输入<code>su root</code>,进入管理员模式</p>
<p>输入密码（密码不会显示），回车</p>
<p>输入<code>dhclient</code></p>
<p>输入<code>ifconfig</code></p>
<img src="/d49360d3/image-20210221205753363.png" alt="image-20210221205753363" style="zoom:100%;">

<p>ens33下的inet会有一串ip，记住</p>
<p>然后输入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>
<p>修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BROOTPROTO&#x3D;static</span><br><span class="line">ONBOOT&#x3D;yes</span><br></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">IPADDR</span>=刚刚生成的ip</span><br><span class="line"><span class="attr">NETMASK</span>=子网掩码</span><br><span class="line"><span class="attr">GATEWAY</span>=默认网关</span><br><span class="line"><span class="attr">DNS1</span>=DNS</span><br></pre></td></tr></table></figure>
<p>打开网络与共享中心</p>
<p>点击你所连接的网络</p>
<img src="/d49360d3/image-20210221210909932.png" alt="image-20210221210909932" style="zoom:50%;">

<p>点击详细信息，即可看到所需信息</p>
<img src="/d49360d3/image-20210221211130883.png" alt="image-20210221211130883" style="zoom:80%;">

<p>将对应信息填入即可，按esc退出编辑，输入<code>:wq</code>保存并退出</p>
<p>输入以下命令，重启网卡</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure>
<p>检验是否可以连接外网</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>
<p>若有数据，即成功</p>
<img src="/d49360d3/image-20210221212843755.png" alt="image-20210221212843755" style="zoom:75%;">

<h1 id="多节点打造"><a href="#多节点打造" class="headerlink" title="多节点打造"></a>多节点打造</h1><p>关闭Linux——右键刚刚创建的CentOS7——快照——拍摄快照</p>
<p>虚拟机——管理——克隆——创建完整克隆</p>
<p>设置静态ip参考上文</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>从线性变换角度理解线性代数</title>
    <url>/47d0bf4a/</url>
    <content><![CDATA[<h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><p>在计算机学科中，以<strong>有序列表</strong>表示一个向量<br>$$<br>\begin{bmatrix}<br>1\\<br>2<br>\end{bmatrix}<br>=1\hat i+2\hat j<br>$$</p>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>next8.0主题配置</title>
    <url>/4c5284d4/</url>
    <content><![CDATA[<h1 id="next主题安装及美化"><a href="#next主题安装及美化" class="headerlink" title="next主题安装及美化"></a>next主题安装及美化</h1><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p><a href="https://theme-next.js.org/">next主题官方文档</a></p>
<p>使用工具 Notepad++、Typora、Git</p>
<blockquote>
<p>博主一开始直接使用next 8.2.0版本（当时最新版本），由于该版本不再支持valine评论系统，所以博主安装了next 8.0.0 版本</p>
<p>但8.2.0支持其它评论系统，读者可以在<a href="https://theme-next.js.org/docs/third-party-services/comments.html">官方文档</a>阅读查看</p>
</blockquote>
<a id="more"></a>

<p>在你的博客路径下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd blog</span><br></pre></td></tr></table></figure>
<p>安装最新版next</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>镜像安装，速度较快（推荐）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ git clone https://gitlab.com/hexo-theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>指定安装版本text</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ git clone --branch v8.0.0 https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>镜像安装，速度较快（推荐）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ git clone --branch v8.0.0 https://gitlab.com/hexo-theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>然后将你博客根目录下的_config.yml打开（使用 Notepad++ 打开）</p>
<p>搜索themes，将里面的值改为next</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<h2 id="text基本配置信息"><a href="#text基本配置信息" class="headerlink" title="text基本配置信息"></a>text基本配置信息</h2><blockquote>
<p>由于next版本升级后，官方不建议直接修改next文件夹下的_config.yml</p>
<p>因此我们将 themes/next/config.yml 复制到你的博客根目录，重命名为_config.next.yml</p>
</blockquote>
<p>选择Schemes</p>
<p>打开 _config.next.yml，通过 Ctrl+F 搜索Scheme Settings，里面提供了四种模式，可以根据自己的喜好更改。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: MuseC</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>
<h2 id="设置菜单栏"><a href="#设置菜单栏" class="headerlink" title="设置菜单栏"></a>设置菜单栏</h2><p>搜索menu，可以设置菜单显示内容，此版本next支持font awesome图标，可以去<a href="https://link.zhihu.com/?target=https://fontawesome.com/">官网</a>更换其它图标。</p>
<p>若出现页面404情况，可将||前面空格删去</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line"> home: / || fa fa-home</span><br><span class="line"> #about: /about/ || fa fa-user</span><br><span class="line"> tags: /tags/ || fa fa-tags</span><br><span class="line"> categories: /categories/ || fa fa-th</span><br><span class="line"> archives: /archives/ || fa fa-archive</span><br><span class="line"> #schedule: /schedule/ || fa fa-calendar</span><br><span class="line"> #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line"> #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>
<h2 id="开启tags标签栏"><a href="#开启tags标签栏" class="headerlink" title="开启tags标签栏"></a>开启tags标签栏</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd blog</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>
<p>此时在你的 source/ 文件夹下会出现一个对应的tags文件夹，打开index.md（使用Typora）并编辑为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2021-02-19 20:08:14</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>其它菜单栏同理操作，编辑各自对应type类型即可</p>
<h2 id="设置新建文章模板"><a href="#设置新建文章模板" class="headerlink" title="设置新建文章模板"></a>设置新建文章模板</h2><p>新建文章</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> blog</span><br><span class="line"><span class="variable">$</span> hexo new <span class="string">&quot;文章名称&quot;</span></span><br></pre></td></tr></table></figure>
<p>进入 scaffolds 文件夹，打开 post.md 文件，根据你刚刚开启的菜单栏进行修改</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br></pre></td></tr></table></figure>
<h2 id="设置超链接样式"><a href="#设置超链接样式" class="headerlink" title="设置超链接样式"></a>设置超链接样式</h2><p>在根目录的source里新建 _data/styles.styl 文件，然后进入_config.next.yml，搜索 custom_file_path，删去下面style前面的#</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: <span class="keyword">source</span><span class="regexp">/_data/</span>head.njk</span><br><span class="line">  #header: <span class="keyword">source</span><span class="regexp">/_data/</span>header.njk</span><br><span class="line">  #sidebar: <span class="keyword">source</span><span class="regexp">/_data/</span>sidebar.njk</span><br><span class="line">  #postMeta: <span class="keyword">source</span><span class="regexp">/_data/</span>post-meta.njk</span><br><span class="line">  #postBodyEnd: <span class="keyword">source</span><span class="regexp">/_data/</span>post-body-end.njk</span><br><span class="line">  #footer: <span class="keyword">source</span><span class="regexp">/_data/</span>footer.njk</span><br><span class="line">  #bodyEnd: <span class="keyword">source</span><span class="regexp">/_data/</span>body-end.njk</span><br><span class="line">  #variable: <span class="keyword">source</span><span class="regexp">/_data/</span>variables.styl</span><br><span class="line">  #mixin: <span class="keyword">source</span><span class="regexp">/_data/mi</span>xins.styl</span><br><span class="line">  style: <span class="keyword">source</span><span class="regexp">/_data/</span>styles.styl</span><br></pre></td></tr></table></figure>
<p>然后打开刚刚新建的 styles.styl ，添加以下信息，颜色代码可在该<a href="https://htmlcolorcodes.com/zh/">网站</a>查询</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 修改链接样式</span><br><span class="line">// 修改文章内</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#E71DF7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 修改侧栏</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">span</span><span class="selector-class">.exturl</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#76C4F5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="菜单侧栏设置"><a href="#菜单侧栏设置" class="headerlink" title="菜单侧栏设置"></a>菜单侧栏设置</h2><p>打开 _config.next.yml ，搜索sidebar</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  # Sidebar Position.</span></span><br><span class="line">  <span class="attr">position</span>: <span class="string">left</span></span><br><span class="line"><span class="comment">  #position: right</span></span><br><span class="line"></span><br><span class="line"><span class="comment">  # Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line"><span class="comment">  # Muse | Mist: 320</span></span><br><span class="line"><span class="comment">  # Pisces | Gemini: 240</span></span><br><span class="line"><span class="comment">  #width: 300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">  # Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line"><span class="comment">  #  - post    expand on posts automatically. Default.</span></span><br><span class="line"><span class="comment">  #  - always  expand for all pages automatically.</span></span><br><span class="line"><span class="comment">  #  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line"><span class="comment">  #  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display</span>: <span class="string">post</span></span><br><span class="line"></span><br><span class="line"><span class="comment">  # Sidebar padding in pixels.</span></span><br><span class="line">  <span class="attr">padding</span>: <span class="string">18</span></span><br><span class="line"><span class="comment">  # Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">offset</span>: <span class="string">12</span></span><br></pre></td></tr></table></figure>
<h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><p>打开 _config.next.yml ，搜索Sidebar Avatar</p>
<p>将你的头像图片命名好，我的是header.jpg，然后放入 themes/next/source/images  里</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/header.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="设置代码高亮"><a href="#设置代码高亮" class="headerlink" title="设置代码高亮"></a>设置代码高亮</h2><p>进入 _config.yml ，搜索hightlight，将auto_detect改为true:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure>
<p>进入 _config.next.yml ，搜索 codeblock ，修改theme下的主题，可以该<a href="https://theme-next.js.org/highlight/">网站</a>查找自己喜欢的代码高亮样式</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">codeblock:</span></span><br><span class="line">  <span class="meta"># Code Highlight theme</span></span><br><span class="line">  <span class="meta"># All available themes: https:<span class="comment">//theme-next.js.org/highlight/</span></span></span><br><span class="line"><span class="symbol">  theme:</span></span><br><span class="line"><span class="symbol">    light:</span> tomorrow-night-eighties</span><br><span class="line"><span class="symbol">    dark:</span> tomorrow-night-eighties</span><br><span class="line"><span class="symbol">  prism:</span></span><br><span class="line"><span class="symbol">    light:</span> prism</span><br><span class="line"><span class="symbol">    dark:</span> prism-dark</span><br><span class="line">  <span class="meta"># Add copy button on codeblock</span></span><br><span class="line"><span class="symbol">  copy_button:</span></span><br><span class="line"><span class="symbol">    enable:</span> false</span><br><span class="line">    <span class="meta"># Available values: default | flat | mac</span></span><br><span class="line"><span class="symbol">    style:</span></span><br></pre></td></tr></table></figure>
<h2 id="添加阅读全文按钮和修改其样式"><a href="#添加阅读全文按钮和修改其样式" class="headerlink" title="添加阅读全文按钮和修改其样式"></a>添加阅读全文按钮和修改其样式</h2><p>添加按钮</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">文章中添加<span class="comment">&lt;!--more--&gt;</span>,你想再哪儿截止就在哪儿添加</span><br></pre></td></tr></table></figure>
<p>修改样式</p>
<p>进入之前的 styles.styl ，添加以下代码，读者可以根据自己喜好进行修改</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// [Read More]按钮样式</span><br><span class="line">.post-button .btn &#123;</span><br><span class="line">    color: #555 !important;</span><br><span class="line">    background-color: rgb(255, 255, 255);</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">    box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35);</span><br><span class="line">    border: none !important;</span><br><span class="line">    transition-property: unset;</span><br><span class="line">    padding: 0px 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-button .btn:hover &#123;</span><br><span class="line">    color: rgb(255, 255, 255) !important;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">    box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35);</span><br><span class="line">    background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改标题栏颜色"><a href="#修改标题栏颜色" class="headerlink" title="修改标题栏颜色"></a>修改标题栏颜色</h2><p>进入之前的 styles.styl ，添加以下代码，读者可以根据自己喜好进行修改</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.site-meta &#123;</span><br><span class="line">  background: #FF8C00; //修改为自己喜欢的颜色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="添加本地搜索功能"><a href="#添加本地搜索功能" class="headerlink" title="添加本地搜索功能"></a>添加本地搜索功能</h2><p>安装 <a href="https://link.jianshu.com/?t=https://github.com/flashlab/hexo-generator-search">hexo-generator-searchdb</a> 插件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>打开 _config.yml ，添加以下代码</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<p>打开 _config.next.yml ，搜索local_search </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>
<h2 id="添加个人社交链接"><a href="#添加个人社交链接" class="headerlink" title="添加个人社交链接"></a>添加个人社交链接</h2><p>打开 _config.next.yml ，搜索social</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/xxxxx || fab fa-github</span><br><span class="line">  E-Mail: mailto:xxxxxx@gmail.com || fa fa-envelope</span><br><span class="line">  QQ-Mail: mailto:xxxxxx@qq.com || fab fa-qq</span><br><span class="line">  #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || fab fa-google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || fab fa-youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || fab fa-instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br></pre></td></tr></table></figure>
<h2 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h2><p>打开 _config.next.yml ，搜索 links</p>
<p>链接格式设置，block 一行一个链接，inline一行多个链接</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">links_settings:</span><br><span class="line">  icon: fa fa-globe</span><br><span class="line">  title: Links</span><br><span class="line">  # Available values: block | inline</span><br><span class="line">  layout: inline</span><br></pre></td></tr></table></figure>
<p>添加友情链接</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">links:</span><br><span class="line">  #Title: http://yoursite.com</span><br><span class="line">  Bing: https://cn.bing.com/</span><br><span class="line">  Google: https://www.google.com/</span><br><span class="line">  BiliBili: https://www.bilibili.com/</span><br><span class="line">  YouTube: https://www.youtube.com/</span><br><span class="line">  知乎: https://www.zhihu.com/</span><br></pre></td></tr></table></figure>
<h2 id="修改文章底部tag的"><a href="#修改文章底部tag的" class="headerlink" title="修改文章底部tag的#"></a>修改文章底部tag的#</h2><p>进入themes\next\layout_macro，打开post.njk，搜索” rel=”tag”，将后面的替换成<code>&lt;i class=&quot;fas fa-tags&quot;&gt;&lt;/i&gt;</code></p>
<h2 id="网站logo"><a href="#网站logo" class="headerlink" title="网站logo"></a>网站logo</h2><p>从<a href="https://link.zhihu.com/?target=http://www.iconfont.cn/">阿里巴巴矢量图标库</a>查找自己喜欢的的图标或者在<a href="https://www.bitbug.net/">比特虫</a>制作图标</p>
<p>将制作好图标重新命名，然后放入image文件夹中</p>
<p>打开_config.next.yml，搜索favicon，将刚刚重新命名的文件填入</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">favicon:</span></span><br><span class="line"><span class="symbol">  small:</span> <span class="meta-keyword">/images/</span>favicon_16x16.ico</span><br><span class="line"><span class="symbol">  medium:</span> <span class="meta-keyword">/images/</span>favicon_32x32.ico</span><br></pre></td></tr></table></figure>
<h2 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd themes/next</span><br><span class="line">$ git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure>
<p>打开_config.next.yml ，添加以下信息</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  onmobile: true # display on mobile or not</span><br><span class="line">  color: &quot;0,0,255&quot; # RGB values, use &#x27;,&#x27; to separate</span><br><span class="line">  opacity: 0.5 # the opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # the number of lines</span><br></pre></td></tr></table></figure>
<p>然后在_data文件夹下新建footer.njk，添加以下信息</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;script color=&quot;0,0,255&quot; opacity=&quot;0.5&quot; zIndex=&quot;-1&quot; count=&quot;99&quot; src=&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>打开_config.next.yml，搜索<code>custom_file_path</code>，删去footer前的#</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: <span class="keyword">source</span><span class="regexp">/_data/</span>head.njk</span><br><span class="line">  #header: <span class="keyword">source</span><span class="regexp">/_data/</span>header.njk</span><br><span class="line">  #sidebar: <span class="keyword">source</span><span class="regexp">/_data/</span>sidebar.njk</span><br><span class="line">  #postMeta: <span class="keyword">source</span><span class="regexp">/_data/</span>post-meta.njk</span><br><span class="line">  #postBodyEnd: <span class="keyword">source</span><span class="regexp">/_data/</span>post-body-end.njk</span><br><span class="line">  footer: <span class="keyword">source</span><span class="regexp">/_data/</span>footer.njk</span><br><span class="line">  #bodyEnd: <span class="keyword">source</span><span class="regexp">/_data/</span>body-end.njk</span><br><span class="line">  #variable: <span class="keyword">source</span><span class="regexp">/_data/</span>variables.styl</span><br><span class="line">  #mixin: <span class="keyword">source</span><span class="regexp">/_data/mi</span>xins.styl</span><br><span class="line">  style: <span class="keyword">source</span><span class="regexp">/_data/</span>styles.styl</span><br></pre></td></tr></table></figure>
<h2 id="添加文章计数功能"><a href="#添加文章计数功能" class="headerlink" title="添加文章计数功能"></a>添加文章计数功能</h2><p>参考<a href="https://theme-next.js.org/docs/theme-settings/posts.html">官方文档</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-word-counter</span><br></pre></td></tr></table></figure>
<p>打开_config.yml，添加以下信息</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true # 文章字数统计</span><br><span class="line">  time: true # 文章时长统计</span><br><span class="line">  total_symbols: true # 全局字数统计</span><br><span class="line">  total_time: true # 全局时长统计</span><br><span class="line">  exclude_codeblock: false  # 排除代码字数统计</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>
<p>打开_config.next.yml，搜索symbols_count_time</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true #分行显示</span><br><span class="line">  item_text_total: true #显示文本</span><br></pre></td></tr></table></figure>
<h2 id="添加阅读进度条"><a href="#添加阅读进度条" class="headerlink" title="添加阅读进度条"></a>添加阅读进度条</h2><p>打开 _config.next.yml ，搜索reading</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Reading progress bar</span><br><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line">  # Available values: top | bottom</span><br><span class="line">  position: top</span><br><span class="line">  color: &quot;#FDDF96&quot;</span><br><span class="line">  height: 5px</span><br></pre></td></tr></table></figure>
<h2 id="修改博客底部显示"><a href="#修改博客底部显示" class="headerlink" title="修改博客底部显示"></a>修改博客底部显示</h2><p>打开 _config.next.yml ，搜索 <code>footer</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  #since: 2021</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon:</span><br><span class="line">    # Icon name in Font Awesome. See: https://fontawesome.com/icons</span><br><span class="line">    name: fa fa-heart</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: true</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: &quot;#ff0000&quot;</span><br><span class="line"></span><br><span class="line">  # If not defined, `author` from Hexo `_config.yml` will be used.</span><br><span class="line">  copyright:</span><br><span class="line"></span><br><span class="line">  # Powered by Hexo &amp; NexT</span><br><span class="line">  powered: false</span><br></pre></td></tr></table></figure>
<h2 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h2><p>打开 footer.njk ,添加以下信息</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;本站已运行&lt;span id=&quot;showDays&quot;&gt;&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var seconds = 1000;</span><br><span class="line">  var minutes = seconds * 60;</span><br><span class="line">  var hours = minutes * 60;</span><br><span class="line">  var days = hours * 24;</span><br><span class="line">  var years = days * 365;</span><br><span class="line">  var birthDay = Date.UTC(2021,02,20,08,00,00); // 这里设置建站时间</span><br><span class="line">  setInterval(function() &#123;</span><br><span class="line">    var today = new Date();</span><br><span class="line">    var todayYear = today.getFullYear();</span><br><span class="line">    var todayMonth = today.getMonth()+1;</span><br><span class="line">    var todayDate = today.getDate();</span><br><span class="line">    var todayHour = today.getHours();</span><br><span class="line">    var todayMinute = today.getMinutes();</span><br><span class="line">    var todaySecond = today.getSeconds();</span><br><span class="line">    var now = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span><br><span class="line">    var diff = now - birthDay;</span><br><span class="line">    var diffYears = Math.floor(diff/years);</span><br><span class="line">    var diffDays = Math.floor((diff/days)-diffYears*365);</span><br><span class="line">    var diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours);</span><br><span class="line">    var diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes);</span><br><span class="line">    var diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span><br><span class="line">      document.getElementById(&#x27;showDays&#x27;).innerHTML=&quot;&quot;+diffYears+&quot;年&quot;+diffDays+&quot;天&quot;+diffHours+&quot;小时&quot;+diffMinutes+&quot;分钟&quot;+diffSeconds+&quot;秒&quot;;</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="添加文章版权声明"><a href="#添加文章版权声明" class="headerlink" title="添加文章版权声明"></a>添加文章版权声明</h2><p>打开 _config.next.yml ,搜索creative_commons</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>
<p>打开 _config.yml ,将url设置为自己的域名</p>
<h2 id="图片放大查看"><a href="#图片放大查看" class="headerlink" title="图片放大查看"></a>图片放大查看</h2><p>打开 _config.next.yml ,搜索<code>fancybox</code>, 设置为true</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cd next</span><br><span class="line">$ git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox</span><br></pre></td></tr></table></figure>
<h2 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h2><p>打开 style.styl , 添加</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line"> 	background:url(/images/background.jpg);</span><br><span class="line"> 	background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">    background-size:cover</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="修改透明度"><a href="#修改透明度" class="headerlink" title="修改透明度"></a>修改透明度</h2><p>打开 style.styl , 添加</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//博客内容透明化</span></span><br><span class="line"><span class="comment">//文章内容的透明度设置</span></span><br><span class="line">.main-<span class="class">inner </span>&#123; </span><br><span class="line">   <span class="comment">// margin-top: 60px;</span></span><br><span class="line">   <span class="comment">// padding: 60px 60px 60px 60px;</span></span><br><span class="line"><span class="symbol">    opacity:</span> <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//侧边框的透明度设置</span></span><br><span class="line">.<span class="class">sidebar </span>&#123;</span><br><span class="line"><span class="symbol">  opacity:</span> <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单栏的透明度设置</span></span><br><span class="line">.header-<span class="class">inner </span>&#123;</span><br><span class="line"><span class="symbol">  background:</span> rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索框（local-search）的透明度设置</span></span><br><span class="line">.<span class="class">popup </span>&#123;</span><br><span class="line"><span class="symbol">  opacity:</span> <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改行代码样式"><a href="#修改行代码样式" class="headerlink" title="修改行代码样式"></a><p id="test">修改行代码样式</p></h2><p>打开 style.styl</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 代码行样式</span><br><span class="line">code&#123;</span><br><span class="line">  background: #FCDF9A;</span><br><span class="line">  color: #FF7029;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文章内跳转"><a href="#文章内跳转" class="headerlink" title="文章内跳转"></a>文章内跳转</h2><p>语法:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;p id=&quot;XXX&quot;&gt;应该跳转到的地方的文字&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;#XXX&quot;&gt;你的跳转按钮的文字&lt;/a&gt;</span><br></pre></td></tr></table></figure>


<p>样例</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;p id=&quot;test&quot;&gt;修改行代码样式&lt;/p&gt;</span><br><span class="line">&lt;a href=&quot;#test&quot;&gt;点击查看修改行代码样式&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="#test">点击查看修改行代码样式</a></p>
<h2 id="链接持久化"><a href="#链接持久化" class="headerlink" title="链接持久化"></a>链接持久化</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">$ npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>打开 _config.yml ,搜索permalink</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">permalink: :abbrlink/</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><blockquote>
<p>感谢以下文章的帮助</p>
<p><a href="https://zhuanlan.zhihu.com/p/251383216">hexo主题安装以及next8.0主题美化</a></p>
<p><a href="https://www.hxhowl.com/posts/e6f9a475/">blog - hexo NexT主题下配置和美化</a></p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
        <category>next</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>吴恩达——机器学习</title>
    <url>/91a709bb/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><blockquote>
<p>A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.                                                                ——Tom Mitchell</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Example: playing checkers.</span><br><span class="line"></span><br><span class="line">E = the experience of playing many games of checkers</span><br><span class="line"></span><br><span class="line">T = the task of playing checkers.</span><br><span class="line"></span><br><span class="line">P = the probability that the program will win the next game.</span><br></pre></td></tr></table></figure>
<h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><blockquote>
<p>得到一个数据集，知道<strong>正确</strong>的输出数据，并且认为输入和输出数据之间<strong>存在某种关系</strong>，</p>
<p>即，<strong>在知道输入和输出的情况下训练出一个模型，将输入映射到输出</strong></p>
</blockquote>
<p>流程</p>
<ul>
<li>选择一个适合目标任务的数学模型</li>
<li>先把一部分已知的“问题和答案”（训练集）给机器去学习</li>
<li>机器总结出了自己的“方法论”</li>
<li>人类把”新的问题”（测试集）给机器，让他去解答</li>
</ul>
<p>监督学习分为两大问题，”<strong>regression</strong>“和”<strong>classification</strong>“</p>
<blockquote>
<p>回归问题，利用<strong>连续</strong>的输出数据来预测结果，得到的是一个<strong>实际值</strong>，而不是分类结果，我们需要某个<strong>函数</strong>来建立输入与输出之间的映射</p>
<p>例，市场价格预测，降水量预测等问题</p>
</blockquote>
<blockquote>
<p>分类问题，利用<strong>离散</strong>的输出数据来预测结果，因此，通过输入变量预测出这一样本所属的<strong>类别</strong>，以<strong>不同的类别</strong>来建立输入与输出之间的映射</p>
<p>例，植物品种、客户年龄和偏好的预测问题</p>
</blockquote>
<h2 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h2><blockquote>
<p>得到一个数据集，<strong>不知道</strong>其正确的结果（输出数据）/标签/属性，或者说<strong>所有的数据都是一样的</strong>（没有区别），但可以找到数据中<strong>存在某种结构</strong>（不确定的），且不用关注变量（输入数据）的影响</p>
<p>通过研究<strong>变量之间的联系</strong>来推测出该结构</p>
<p>没有基于预测结果的反馈</p>
<p>例，设想我们有一批照片其中包含着不同颜色的几何形状。在这里计算机面对的是没有任何标记的图片，它并不知道几何形状的颜色和外形，它看到的只是一张张照片而已。但通过将数据输入到非监督学习的模型中去，算法可以尝试着理解图中的内容，通过相关性和特征将图中的相似的物体聚为一类。在<strong>理想的情况</strong>下它可以将不同形状不同颜色的几何形状聚集到不同的类别中去，特征提取和标签都是<strong>机器自己完成</strong>的。</p>
</blockquote>
<p>使用场景</p>
<ul>
<li>发现异常，通过无监督学习，快速将数据分类，虽然不知道这些分类的意义，但可以快速排出正常的数据，更有针对性的对异常数据进行深入分析</li>
<li>用户细分，如广告平台对用户按性别，年龄，位置，行为等维度进行用户细分，使广告投放更有针对性</li>
<li>推荐系统，如淘宝根据我们的浏览行为推荐相关商品。无监督学习通过聚类得到购物行为相似的用户，然后将这类用户的商品推荐给我们</li>
</ul>
<blockquote>
<p>Clustering（聚类算法），自动分类的方法，但不知道聚类后的几个分类分别代表什么</p>
<p>例如收集1,000,000个不同的基因，并找到一种方法，如不同变量（例如寿命，位置，角色等）之间的联系，将这些基因自动分组为在某种程度上相似或相关的组，即<strong>存在的某种结构</strong>。</p>
<p>我们只告知这个方法，有一堆（未知）数据，然后自动找到这些数据中的类型，并根据所找到类型对数据进行分类。也就是说，对于数据样本，我们没有给方法一个正确的答案，这便是无监督学习。</p>
</blockquote>
<blockquote>
<p>Non-clustering</p>
</blockquote>
<blockquote>
<p>降维</p>
</blockquote>
<h2 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h2><table>
<thead>
<tr>
<th>监督学习</th>
<th>无监督学习</th>
</tr>
</thead>
<tbody><tr>
<td><strong>目的明确</strong>的训练方式，知道会得到什么结果</td>
<td><strong>没有明确</strong>的训练方式，无法提前知道结果是什么</td>
</tr>
<tr>
<td>数据<strong>有标签</strong></td>
<td>数据<strong>没有标签</strong></td>
</tr>
<tr>
<td>目标明确，可以衡量效果</td>
<td>几乎无法评估效果</td>
</tr>
<tr>
<td>一种训练方式/学习方式，有明确的目标，很清楚自己想要什么结果</td>
<td>本质上是一个统计手段，在没有标签的数据里发现潜在的结构</td>
</tr>
</tbody></table>
<h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><blockquote>
<p>To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function h : X → Y so that h(x) is a “good” predictor for the corresponding value of y. For historical reasons, this function h is called a <strong>hypothesis</strong>. </p>
</blockquote>
<img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210306142126309.png" style="zoom:80%;">

<h1 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h1><blockquote>
<p>通过 cost Function 来确定我们的hypothesis，即，h(X)。</p>
<p>m表示样本数量</p>
</blockquote>
<p>$$<br>h_\Theta(x)=\Theta_0+\Theta_1x<br>$$</p>
<p>$$<br>J(\Theta_0,\Theta_1)=\frac {1}{2m}\sum_{i=1}^m(\hat y_i-y_i)^2=\frac {1}{2m}\sum_{i=1}^m(h_\Theta(x_i)-y_i)^2<br>$$</p>
<blockquote>
<p>cost Function 越小，表示hypothesis（拟合函数）约合理</p>
<p>因此寻找出使 cost Function 最小的参数</p>
</blockquote>
<h1 id="梯度下降算法Gradient-Descent"><a href="#梯度下降算法Gradient-Descent" class="headerlink" title="梯度下降算法Gradient Descent"></a>梯度下降算法Gradient Descent</h1><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210306163104402.png"></p>
<p>重复，直到趋近最小值(收敛)<br>$$<br>\Theta_j:=\Theta_j-\alpha\frac {\partial}{\partial{\Theta_j}}J(\Theta_0,\Theta_1)<br>$$</p>
<blockquote>
<p>首先假设一对$\Theta_0,\Theta_1$,然后由costFunction的导数确定梯度下降最大的方向，逐步找到costFunction的最小值（可能是局部最小值）</p>
<p>参数$\alpha$(学习速率)确定每一步的大小，即更新$\Theta_j$大小的幅度</p>
<p>不同的起点，可能会导致不同的结果，这也是梯度下降算法的重要特征</p>
</blockquote>
<p>梯度下降方程，需同步更新$\Theta_0,\Theta_1$</p>
<p>$temp0:=\Theta_0-\alpha\frac {\partial}{\partial{\Theta_0}}J(\Theta_0,\Theta_1)$</p>
<p>$temp1:=\Theta_1-\alpha\frac {\partial}{\partial{\Theta_1}}J(\Theta_0,\Theta_1)$</p>
<p>$\Theta_0:=temp0$</p>
<p>$\Theta_1:=temp1$</p>
<blockquote>
<p>利用梯度下降法，可以优化找到<strong>任何</strong>costFunction的(局部)最小值</p>
</blockquote>
<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>$$<br>h_\Theta(x)=\Theta_0+\Theta_1x<br>$$<br>线性回归不仅适用于2个变量（二维平面），也适用于多个变量。</p>
<p>如，3个变量是一个平面，4个变量是一个体</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210307131430617.png"></p>
<blockquote>
<p>梯度下降法——线性回归，得到的是最优解，而不是局部最优解</p>
</blockquote>
<p>重复，直到收敛</p>
<p>$temp0:=\Theta_0-\alpha\frac {1}{m}\sum_{i=1}^{m}(h_\Theta(x_i)-y_i)$</p>
<p>$temp1:=\Theta_1-\alpha\frac {1}{m}\sum_{i=1}^{m}((h_\Theta(x_i)-y_i)x_i)$</p>
<p>$\Theta_0:=temp0$</p>
<p>$\Theta_1:=temp1$</p>
<h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><blockquote>
<p>n表示特征变量个数</p>
</blockquote>
<p>hypothesis:<br>$$<br>h_\Theta(x)=\Theta_0+\Theta_1x_1+\Theta_2x_2+\cdots+\Theta_nx_n<br>$$<br>由矩阵乘法，简化上式<br>$$<br>h_\Theta(x)=<br>\begin{bmatrix}<br>\Theta_0&amp;\Theta_1\cdots\Theta_n<br>\end{bmatrix}<br>\begin{bmatrix}<br>x_0\\<br>x_1\\<br>\vdots\\<br>x_n<br>\end{bmatrix}<br>=\Theta^Tx<br>$$</p>
<h2 id="多个变量的梯度下降"><a href="#多个变量的梯度下降" class="headerlink" title="多个变量的梯度下降"></a>多个变量的梯度下降</h2><p>$$<br>\Theta_j:=\Theta_j-\alpha\frac {1}{m}\sum_{i=1}^{m}(h_\Theta(x^{(i)})-y^{(i)})x_j^{(i)}<br>$$</p>
<h2 id="优化梯度下降算法"><a href="#优化梯度下降算法" class="headerlink" title="优化梯度下降算法"></a>优化梯度下降算法</h2><p>当样本不均匀时，如0&lt;$x_1$&lt;20000，0&lt;$x_2$&lt;5，$\Theta$下降会十分缓慢，因此采用<strong>特征放缩</strong>和<strong>均值归一化</strong>将所有变量大致控制在较小范围<br>$$<br>x_i:=\frac{x_i-\mu_i}{s_i}<br>$$</p>
<blockquote>
<p>$\mu_i$为平均值</p>
<p>$s_i$为标准差</p>
</blockquote>
<h2 id="学习率a"><a href="#学习率a" class="headerlink" title="学习率a"></a>学习率a</h2><blockquote>
<p>a太小，$J(\Theta)$收敛很慢</p>
<p>a太大，每一次迭代$J(\Theta)$可能不会减少，无法收敛</p>
</blockquote>
<h2 id="特征与多项式回归"><a href="#特征与多项式回归" class="headerlink" title="特征与多项式回归"></a>特征与多项式回归</h2><blockquote>
<p>运用不同的方法改善<strong>特征变量</strong>和<strong>hypothesis</strong></p>
<p>如由$x_1*x_2$创建新的特征变量$x_3$</p>
</blockquote>
<p>当线性函数无法满足数据要求，更改<strong>hypothesis</strong>函数，如二次，三次等形式。</p>
<p>例如，</p>
<p>原hypothesis函数<br>$$<br>h(\Theta)=\Theta_1+\Theta_2x_1<br>$$<br>改进为<br>$$<br>h(\Theta)=\Theta_1+\Theta_2x_1+\Theta_3x_1^2<br>$$<br>更改新特征变量的范围</p>
<blockquote>
<p>如$0&lt;x_1&lt;10$，则$0&lt;x_1^2&lt;100$</p>
</blockquote>
<h1 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h1><p>一次性求解$\theta$的最优值，不需要像梯度下降法多次迭代<br>$$<br>\theta=(X^TX)^{-1}X^Ty<br>$$<br>有m个样本$(x^{(1)},y^{(1)},…,(x^{(m)},y^{(m)}))$，n个特征变量<br>$$<br>x^{(i)}=<br>\begin{bmatrix}<br>x_0^{(i)}\\<br>x_1^{(i)}\\<br>\vdots\\<br>x_n^{(i)}\\<br>\end{bmatrix}<br>\in R^{n+1}<br>$$<br>设计矩阵design matrix (m*(n+1))<br>$$<br>X=\begin{bmatrix}<br>(x^{(1)})^T\\<br>(x^{(2)})^T\\<br>\vdots\\<br>(x^{(m)})^T<br>\end{bmatrix}<br>$$</p>
<table>
<thead>
<tr>
<th>正规方程</th>
<th>梯度下降法</th>
</tr>
</thead>
<tbody><tr>
<td>不需要学习率a</td>
<td>需要学习率a</td>
</tr>
<tr>
<td>需要多次迭代</td>
<td>需要多次迭代</td>
</tr>
<tr>
<td>$O(n^3)$，需要计算$X^TX$</td>
<td>$O(kn^2)$</td>
</tr>
<tr>
<td>n很大时，运算很慢</td>
<td>适合于n很大(n&gt;10000)</td>
</tr>
</tbody></table>
<p>当$X^TX$不可逆，</p>
<p>原因</p>
<blockquote>
<ul>
<li>存在两个特征变量，它们（近似）线性相关</li>
<li>m&lt;n，样本数量少于特征变量数量</li>
</ul>
</blockquote>
<p>解决</p>
<blockquote>
<ul>
<li>删去存在线性相关的特征变量</li>
<li>减少特征变量</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>监督学习与无监督学习</title>
    <url>/72510051/</url>
    <content><![CDATA[<h1 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h1><blockquote>
<p>得到一个数据集，知道<strong>正确</strong>的输出数据，并且认为输入和输出数据之间<strong>存在某种关系</strong>，</p>
<p>即，<strong>在知道输入和输出的情况下训练出一个模型，将输入映射到输出</strong></p>
</blockquote>
<p>流程</p>
<ul>
<li>选择一个适合目标任务的数学模型</li>
<li>先把一部分已知的“问题和答案”（训练集）给机器去学习</li>
<li>机器总结出了自己的“方法论”</li>
<li>人类把”新的问题”（测试集）给机器，让他去解答</li>
</ul>
<p>监督学习分为两大问题，”<strong>regression</strong>“和”<strong>classification</strong>“</p>
<blockquote>
<p>回归问题，利用<strong>连续</strong>的输出数据来预测结果，得到的是一个<strong>实际值</strong>，而不是分类结果，我们需要某个<strong>函数</strong>来建立输入与输出之间的映射</p>
<p>例，市场价格预测，降水量预测等问题</p>
</blockquote>
<blockquote>
<p>分类问题，利用<strong>离散</strong>的输出数据来预测结果，因此，通过输入变量预测出这一样本所属的<strong>类别</strong>，以<strong>不同的类别</strong>来建立输入与输出之间的映射</p>
<p>例，植物品种、客户年龄和偏好的预测问题</p>
</blockquote>
<h1 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h1><blockquote>
<p>得到一个数据集，<strong>不知道</strong>其正确的结果（输出数据）/标签/属性，或者说<strong>所有的数据都是一样的</strong>（没有区别），但可以找到数据中<strong>存在某种结构</strong>（不确定的），且不用关注变量（输入数据）的影响</p>
<p>通过研究<strong>变量之间的联系</strong>来推测出该结构</p>
<p>没有基于预测结果的反馈</p>
<p>例，设想我们有一批照片其中包含着不同颜色的几何形状。在这里计算机面对的是没有任何标记的图片，它并不知道几何形状的颜色和外形，它看到的只是一张张照片而已。但通过将数据输入到非监督学习的模型中去，算法可以尝试着理解图中的内容，通过相关性和特征将图中的相似的物体聚为一类。在<strong>理想的情况</strong>下它可以将不同形状不同颜色的几何形状聚集到不同的类别中去，特征提取和标签都是<strong>机器自己完成</strong>的。</p>
</blockquote>
<p>使用场景</p>
<ul>
<li>发现异常，通过无监督学习，快速将数据分类，虽然不知道这些分类的意义，但可以快速排出正常的数据，更有针对性的对异常数据进行深入分析</li>
<li>用户细分，如广告平台对用户按性别，年龄，位置，行为等维度进行用户细分，使广告投放更有针对性</li>
<li>推荐系统，如淘宝根据我们的浏览行为推荐相关商品。无监督学习通过聚类得到购物行为相似的用户，然后将这类用户的商品推荐给我们</li>
</ul>
<blockquote>
<p>Clustering（聚类算法），自动分类的方法，但不知道聚类后的几个分类分别代表什么</p>
<p>例如收集1,000,000个不同的基因，并找到一种方法，如不同变量（例如寿命，位置，角色等）之间的联系，将这些基因自动分组为在某种程度上相似或相关的组，即<strong>存在的某种结构</strong>。</p>
<p>我们只告知这个方法，有一堆（未知）数据，然后自动找到这些数据中的类型，并根据所找到类型对数据进行分类。也就是说，对于数据样本，我们没有给方法一个正确的答案，这便是无监督学习。</p>
</blockquote>
<blockquote>
<p>Non-clustering</p>
</blockquote>
<blockquote>
<p>降维</p>
</blockquote>
<h1 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h1><table>
<thead>
<tr>
<th>监督学习</th>
<th>无监督学习</th>
</tr>
</thead>
<tbody><tr>
<td><strong>目的明确</strong>的训练方式，知道会得到什么结果</td>
<td><strong>没有明确</strong>的训练方式，无法提前知道结果是什么</td>
</tr>
<tr>
<td>数据<strong>有标签</strong></td>
<td>数据<strong>没有标签</strong></td>
</tr>
<tr>
<td>目标明确，可以衡量效果</td>
<td>几乎无法评估效果</td>
</tr>
<tr>
<td>一种训练方式/学习方式，有明确的目标，很清楚自己想要什么结果</td>
<td>本质上是一个统计手段，在没有标签的数据里发现潜在的结构</td>
</tr>
</tbody></table>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://easyai.tech/blog/supervised-reinforcement-unsupervised-learning/">机器学习三兄弟概念大揭秘：「监督学习」「非监督学习」「强化学习」</a></p>
<p><a href="https://easyai.tech/ai-definition/unsupervised-learning/">无监督学习 – Unsupervised learning | UL</a></p>
<p><a href="https://easyai.tech/ai-definition/supervised-learning/">监督学习 – Supervised learning</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
</search>
