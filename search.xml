<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Attention简单学习</title>
    <url>/8d6977eb/</url>
    <content><![CDATA[<h1 id="是什么Attention"><a href="#是什么Attention" class="headerlink" title="是什么Attention"></a>是什么Attention</h1><p>引入Attention机制是为了解决传统encoder-decoder模型存在的信息丢失问题</p>
<p>encoder将输入的信息(句子)压缩为一个定长的向量，然后decoder将其解码转换为对应的信息(句子)，然而，在encoder的压缩过程中，对于较长的信息(句子)，会存在信息丢失的问题。</p>
<p>因此提出Attention机制，通过<strong>对不同的输入分配不同的权重</strong>，然后在decoder解码过程中<strong>选出对当前决策影响(权重)最大的特征值</strong></p>
<blockquote>
<p>优点</p>
<ul>
<li>参数少<ul>
<li>与CNN，RNN相比，复杂度和所需的参数较少</li>
</ul>
</li>
<li>速度快<ul>
<li>每一步的计算<strong>不依赖与上一步的计算结果</strong>，因此可以进行<strong>并行</strong>计算</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="/8d6977eb/2019-11-13-3step.png" alt="attention原理3步分解"></p>
<blockquote>
<p>步骤</p>
<ul>
<li>query和key进行<strong>相似度计算</strong>(对齐模型)，得到权值</li>
<li>将权值进行softmax<strong>归一化</strong>，得到可直接使用的权重</li>
<li>将权重与value进行<strong>加权求和</strong></li>
</ul>
</blockquote>
<p>相似度计算</p>
<blockquote>
<ul>
<li>点乘<ul>
<li>$s(q,k)=q^Tk$</li>
</ul>
</li>
<li>矩阵相乘<ul>
<li>$s(q,k)=q^Tk$</li>
</ul>
</li>
<li>cos相似度<ul>
<li>$s(q,k)=\frac{q^Tk}{||q||*||k||}$</li>
</ul>
</li>
<li>串联，将q与k拼接起来<ul>
<li>$s(q,k)=W[q;k]$</li>
</ul>
</li>
<li>多层感知concat<ul>
<li>$s(q,k)=v_a^Ttanh(W_q + U_k)$</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="本质思想"><a href="#本质思想" class="headerlink" title="本质思想"></a>本质思想</h1><p><strong>从关注全部到关注重点</strong></p>
<p><img src="/8d6977eb/2019-11-13-only-attention.png" alt="attention原理图"></p>
<p>将source中的的元素理解成一个个<key,value>数据对，对于Target中的某一个query，计算query与key的相似度，得到每个key对应的value权重，然后对value进行加权求和，得到最终Attention数值。</key,value></p>
<script type="math/tex; mode=display">
Attention(Query,Source)=\sum_{i=1}^{S}align(Query,Key)*Value</script><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="计算区域"><a href="#计算区域" class="headerlink" title="计算区域"></a>计算区域</h2><p><strong>Soft</strong> Attention</p>
<blockquote>
<p>对<strong>所有key</strong>求权重概率，每个key都有对应一个权重。</p>
<p>缺点，计算量较大</p>
</blockquote>
<p><strong>Hard</strong> Attention</p>
<blockquote>
<p><strong>精确定位</strong>到一个key，即该key的权重概率为1，其余key的概率为0。</p>
<p>实现</p>
<ul>
<li>选取概率最高的输入信息</li>
<li>在对齐模型的概率分布上进行随机采样</li>
</ul>
<p>缺点，损失函数与Attention分布之间的函数不可导，无法在反向传播算法中训练</p>
</blockquote>
<p><strong>Local</strong> Attention</p>
<blockquote>
<p>综合上述两种Attention，先用Hard Attention定位到某个点，然后以该点为中心得到一个<strong>窗口区域</strong>，在该区域使用Soft Attention</p>
</blockquote>
<h2 id="所用信息"><a href="#所用信息" class="headerlink" title="所用信息"></a>所用信息</h2><p>对一段文本使用Attention所需要的信息，包括</p>
<ul>
<li>内部信息，该文本本身</li>
<li>外部信息，除该文本的额外信息</li>
</ul>
<p><strong>General</strong> Attention</p>
<blockquote>
<p>所有信息参与计算</p>
<p>通常用于<strong>构建两段文本关系的任务</strong>，如阅读理解中，问题与文章的联系</p>
<p>query包含外部信息，根据外部query对文本进行对齐</p>
</blockquote>
<p><strong>Local</strong> Attention</p>
<blockquote>
<p>只使用内部信息，即key，query，value只与输入文本有关</p>
</blockquote>
]]></content>
      <categories>
        <category>Transformer</category>
      </categories>
      <tags>
        <tag>Attention</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7磁盘扩展</title>
    <url>/823759cb/</url>
    <content><![CDATA[<h1 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h1><p>硬盘——扩展</p>
<p>假如有快照，先删除</p>
<p><img src="/823759cb/image-20210222120000691.png" style="zoom:80%;"></p>
<a id="more"></a>
<h1 id="Linux设置"><a href="#Linux设置" class="headerlink" title="Linux设置"></a>Linux设置</h1><h2 id="对新增的硬盘分区"><a href="#对新增的硬盘分区" class="headerlink" title="对新增的硬盘分区"></a>对新增的硬盘分区</h2><p>对原有的硬盘sda进行扩展</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">fdisk /dev/sda<br></code></pre></div></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">命令(输入 m 获取帮助)：（步骤）[root@localhost mihao]# fdisk /dev/sda<br>欢迎使用 fdisk (util-linux 2.23.2)。<br><br>更改将停留在内存中，直到您决定将更改写入磁盘。<br>使用写入命令前请三思。<br><br><br>命令(输入 m 获取帮助)：p	（查看分区）<br><br>磁盘 /dev/sda：42.9 GB, 42949672960 字节，83886080 个扇区<br>Units = 扇区 of 1 * 512 = 512 bytes<br>扇区大小(逻辑/物理)：512 字节 / 512 字节<br>I/O 大小(最小/最佳)：512 字节 / 512 字节<br>磁盘标签类型：dos<br>磁盘标识符：0x000b9dd0<br><br>   设备 Boot      Start         End      Blocks   Id  System<br>/dev/sda1   *        2048     2099199     1048576   83  Linux<br>/dev/sda2         2099200    41943039    19921920   8e  Linux LVM<br><br>命令(输入 m 获取帮助)：n （新建分区）<br>Partition type:<br>   p   primary (2 primary, 0 extended, 2 free)<br>   e   extended<br>Select (default p): p （选择主分区）<br>分区号 (3,4，默认 3)：3	（选区号）<br>起始 扇区 (41943040-83886079，默认为 41943040)：	enter<br>将使用默认值 41943040<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (41943040-83886079，默认为 83886079)：enter<br>将使用默认值 83886079<br>分区 3 已设置为 Linux 类型，大小设为 20 GiB<br><br>命令(输入 m 获取帮助)：t （修改分区）<br>分区号 (1-3，默认 3)：3	（刚刚新建的3分区）<br>Hex 代码(输入 L 列出所有代码)：8e	（对应sda2 id）<br>已将分区“Linux”的类型更改为“Linux LVM”<br><br>命令(输入 m 获取帮助)：w （保存）<br>The partition table has been altered!<br><br>Calling ioctl() to re-read partition table.<br><br>WARNING: Re-reading the partition table failed with error 16: 设备或资源忙.<br>The kernel still uses the old table. The new table will be used at<br>the next reboot or after you run partprobe(8) or kpartx(8)<br>正在同步磁盘。<br>[root@localhost mihao]# partprobe （上面提示）<br>[root@localhost mihao]# reboot （重启）<br></code></pre></div></td></tr></table></figure>
<h2 id="对新增的硬盘格式化"><a href="#对新增的硬盘格式化" class="headerlink" title="对新增的硬盘格式化"></a>对新增的硬盘格式化</h2><p><code>df-Th</code>查看文件系统</p>
<p>xfs系统使用<code>mkfs.xfs</code>命令，对硬盘进行格式化</p>
<h2 id="添加新LVM到已有LVM组"><a href="#添加新LVM到已有LVM组" class="headerlink" title="添加新LVM到已有LVM组"></a>添加新LVM到已有LVM组</h2><p><code>lvm</code>进入lvm管理</p>
<p>初始化分区</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">lvm&gt; pvcreate /dev/sda3<br></code></pre></div></td></tr></table></figure>
<p>查看卷组Volumegroup名称</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">lvm&gt; vgdisplay<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>VG Name        <strong>centos</strong></p>
</blockquote>
<p>将初始化过的分区加入centos</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">lvm&gt; vgextend centos /dev/sda3<br></code></pre></div></td></tr></table></figure>
<p>查看逻辑卷Logical volume情况</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">lvm&gt; lvdisplay<br></code></pre></div></td></tr></table></figure>
<p>文件系统扩容</p>
<p>退出lvm，扩展LV</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">lvextend /dev/centos/root /dev/sda3<br></code></pre></div></td></tr></table></figure>
<p>运行命令</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">xfs_growfs /dev/centos/root<br></code></pre></div></td></tr></table></figure>
<h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p>查看磁盘，是否拓展成功</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">df -h<br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-异常</title>
    <url>/c2b6c13e/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>Java的基本理念是“结构不佳的代码不能运行”</strong></p>
<p>使用异常，可以降低错误处理代码的复杂度</p>
<blockquote>
<ul>
<li>不必在方法调用处进行检查，异常机制会捕捉该错误</li>
<li>只需在一个地方（异常处理程序）中处理错误，节省代码</li>
</ul>
</blockquote>
<p><img src="/c2b6c13e/1080.webp" alt></p>
<h1 id="基本异常"><a href="#基本异常" class="headerlink" title="基本异常"></a>基本异常</h1><p><strong>抛出异常</strong>：从当前环境中跳出，把问题提交给上一级环境</p>
<p>问题指的是，当前方法或作用域被阻止而无法继续执行，即<strong>异常情形</strong></p>
<blockquote>
<p>抛出异常后，将使用<code>new</code>在堆上<strong>创建异常对象</strong>,然后当前路径不会再继续执行，并且从当前环境中<strong>弹出异常对象的引用</strong>，此时，<strong>异常处理机制</strong>接管程序，并在<a href="#ycclcx"><strong>异常处理程序</strong></a>继续执行程序</p>
<p>异常对象的<strong>引用</strong>将传给<code>throw</code>，可以<strong>简单地</strong>把异常处理看成是一种<strong>不同的返回机制</strong>，因此，利用抛出异常的方式可以<strong>从当前作用域退出</strong></p>
<p>返回的“地点”是<strong>异常处理程序</strong>，可能跨越方法调用栈的许多层次</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String t = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 抛出异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        &#125;<br></code></pre></div></td></tr></table></figure>
<p>异常允许我们<strong>强制程序停止运行</strong>，并告诉我们出现的问题，或者<strong>强制程序处理问题</strong>，并返回到稳定状态</p>
<h2 id="异常参数"><a href="#异常参数" class="headerlink" title="异常参数"></a>异常参数</h2><p>标准异常类有<strong>两个</strong>构造器，分别是<strong>默认构造器</strong>，<strong>接受字符串作为参数</strong>的构造器</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;t = null&quot;</span>)<br></code></pre></div></td></tr></table></figure>
<h1 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h1><h2 id="try块"><a href="#try块" class="headerlink" title="try块"></a>try块</h2><p>如果在方法内部或方法内部调用其他方法抛出异常，这个方法将在抛出异常的过程中结束，因此，为了不让方法结束，我们使用<strong>try块</strong></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">// 可能产生异常的代码</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="异常处理程序"><a href="#异常处理程序" class="headerlink" title="异常处理程序"></a><p id="ycclcx">异常处理程序</p></h2><p>抛出异常的处理“地点”，紧跟<strong>try块</strong>之后，用关键字<code>catch</code>表示</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <br>&#125;<span class="hljs-keyword">catch</span>(Type1 id1)&#123;<br>    <br>&#125;<span class="hljs-keyword">catch</span>(Type2 id2)&#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>只有异常类型匹配的第一个catch语句才会被执行</p>
<h1 id="创建自定义异常"><a href="#创建自定义异常" class="headerlink" title="创建自定义异常"></a>创建自定义异常</h1><p>必须从已有的异常类继承</p>
<p>产生默认构造器</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exception1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MyException</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Throw MyException&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        exception1 e1 = <span class="hljs-keyword">new</span> exception1();<br>        <span class="hljs-keyword">try</span>&#123;<br>            e1.f();<br>        &#125;<span class="hljs-keyword">catch</span> (MyException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;捕获异常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">Throw MyException<br>捕获异常<br></code></pre></div></td></tr></table></figure>
<p>自定义字符串作参数的构造器</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">(String s)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(s);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exception1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MyException</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Throw MyException from f()&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MyException</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Throw MyException from g()&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(<span class="hljs-string">&quot;g() 产生异常&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        exception1 e1 = <span class="hljs-keyword">new</span> exception1();<br>        <span class="hljs-keyword">try</span>&#123;<br>            e1.f();<br>        &#125;<span class="hljs-keyword">catch</span> (MyException e)&#123;<br>            e.printStackTrace(System.out);<br>        &#125;<br>        <span class="hljs-keyword">try</span>&#123;<br>            e1.g();<br>        &#125;<span class="hljs-keyword">catch</span> (MyException e)&#123;<br>            e.printStackTrace(System.out);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">Throw MyException from f()<br>MyException<br>	at exception1.f(exception1.java:15)<br>	at exception1.main(exception1.java:24)<br>Throw MyException from g()<br>MyException: g() 产生异常<br>	at exception1.g(exception1.java:19)<br>	at exception1.main(exception1.java:29)<br></code></pre></div></td></tr></table></figure>
<p><code>e.printStackTrace()</code>在<code>Throwable</code>类中声明，该方法打印<strong>从方法调用处直到异常抛出处</strong>的方法调用序列</p>
<h1 id="异常说明"><a href="#异常说明" class="headerlink" title="异常说明"></a>异常说明</h1><p><code>throws</code>后面接所有可能产生的异常类型</p>
<h1 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h1><p>通过捕获异常类型的基类<code>Exception</code>，且放在处理程序列表的<strong>末尾</strong></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace(System.out);<br>        &#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 获取详细信息</span><br><span class="hljs-function">String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-comment">// 获取用本地语言表示的详细信息</span></span><br><span class="hljs-function">String <span class="hljs-title">getLocalizedMessage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-comment">// 返回堆Throwable的简单描述</span></span><br><span class="hljs-function">String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">// 打印Throwable和Throwable的调用栈轨迹</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printStackTrace</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(<span class="hljs-string">&quot;MyException简单信息&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;捕获异常&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;getMessage():  &quot;</span>+e.getMessage());<br>            System.out.println(<span class="hljs-string">&quot;getLocalizedMessage():  &quot;</span>+e.getLocalizedMessage());<br>            System.out.println(<span class="hljs-string">&quot;toString():  &quot;</span>+e.toString());<br>            System.out.println(<span class="hljs-string">&quot;printStackTrace():&quot;</span>);<br>            e.printStackTrace(System.out);<br>        &#125;<br></code></pre></div></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">捕获异常<br>getMessage():  MyException简单信息<br>getLocalizedMessage():  MyException简单信息<br>toString():  MyException: MyException简单信息<br>printStackTrace():<br>MyException: MyException简单信息<br>	at exception1.main(exception1.java:33)<br></code></pre></div></td></tr></table></figure>
<h2 id="栈轨迹"><a href="#栈轨迹" class="headerlink" title="栈轨迹"></a>栈轨迹</h2><p><code>getStackTrace()</code>返回一个由栈轨迹中的元素所构成的数组，其中每一个元素都表示栈中的一帧</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exception2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">for</span>(StackTraceElement ste : e.getStackTrace())<br>                System.out.println(ste.getMethodName());<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span>&#123;<br>        f();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">h</span><span class="hljs-params">()</span></span>&#123;<br>        g();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        f();<br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        g();<br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        h();<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">f<br>main<br>--------------------<br>f<br>g<br>main<br>--------------------<br>f<br>g<br>h<br>main<br></code></pre></div></td></tr></table></figure>
<h2 id="重新抛出异常"><a href="#重新抛出异常" class="headerlink" title="重新抛出异常"></a>重新抛出异常</h2><p>重抛异常会将异常抛给<strong>上一级</strong>环境，同try块的后续catch语句将不会被执行。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    <span class="hljs-keyword">throw</span> e;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>异常对象的所有信息都被<strong>保存</strong>，因此，上一级环境所捕获的异常包含这个异常对象的<strong>所有信息</strong></p>
<p>对于重新抛出的异常对象，<code>printStackTrace()</code>显示的仍是<strong>原来异常抛出点</strong>的调用栈信息。</p>
<p>因此使用<code>fillInStackTrace()</code>更新信息，该方法返回一个<code>Throwable</code>对象，它是通过把当前调用信息填入原来的异常对象而建立的</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">rethrowing</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;exception from f()&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;thrown from f()&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            f();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;g(), e.printStackTrace()&quot;</span>);<br>            e.printStackTrace(System.out);<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">h</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            f();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;h(), e.printStackTrace()&quot;</span>);<br>            e.printStackTrace(System.out);<br>            <span class="hljs-keyword">throw</span> (Exception)e.fillInStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            g();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;mian: printStackTrace()&quot;</span>);<br>            e.printStackTrace(System.out);<br>        &#125;<br>        <span class="hljs-keyword">try</span>&#123;<br>            h();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;main: printStackTrace&quot;</span>);<br>            e.printStackTrace(System.out);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">exception from f()<br>g(), e.printStackTrace()<br>java.lang.Exception: thrown from f()<br>	at rethrowing.f(rethrowing.java:5)<br>	at rethrowing.g(rethrowing.java:9)<br>	at rethrowing.main(rethrowing.java:28)<br>mian: printStackTrace()<br>java.lang.Exception: thrown from f()<br>	at rethrowing.f(rethrowing.java:5)<br>	at rethrowing.g(rethrowing.java:9)<br>	at rethrowing.main(rethrowing.java:28)<br>	<br>//有更新<br>exception from f()<br>h(), e.printStackTrace()<br>java.lang.Exception: thrown from f()<br>	at rethrowing.f(rethrowing.java:5)<br>	at rethrowing.h(rethrowing.java:18)<br>	at rethrowing.main(rethrowing.java:34)<br>main: printStackTrace<br>java.lang.Exception: thrown from f()<br>	at rethrowing.h(rethrowing.java:22)<br>	at rethrowing.main(rethrowing.java:34)<br></code></pre></div></td></tr></table></figure>
<h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>异常链：在捕获一个异常后抛出另一个异常，并且把原始异常的信息保存下来</p>
<p>构造器接受<code>cause</code>对象作为参数，适用于<code>Error</code>,<code>Exception</code>,<code>RuntimeException</code>.</p>
<p>其它类型的异常类，使用<code>initCause()</code>方法</p>
<h1 id="标准异常"><a href="#标准异常" class="headerlink" title="标准异常"></a>标准异常</h1><p><code>Error</code>表示编译时的系统错误</p>
<p><code>Exception</code>是可以抛出的基本类型</p>
<p><img src="/c2b6c13e/1080.webp" alt></p>
<p>不接受检查的异常，如<code>RuntimeException</code>类，这种异常会被<strong>自动捕获</strong></p>
<p><img src="/c2b6c13e/1080.webp" alt></p>
<h1 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h1><p>无论异常是否被抛出，<code>finally</code>始终被执行</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>即使异常没有当前异常处理程序捕获，异常处理机制也会在跳到更高一层的异常处理程序之前，执行<code>finally</code>语句</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">// 该层没有异常处理程序</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception();	<span class="hljs-comment">// 会跳到上一层异常处理程序</span><br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        <br>    &#125;<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><span class="hljs-comment">// 该异常处理程序执行之前，上方的finally语句会被执行</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p><code>finally</code>即使在<code>return</code>之后，依然会被执行</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <span class="hljs-comment">// 会被执行</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><p>基本原则：每一次构造新对象，都应包含在其<strong>try-finally</strong>语句块中，并且每一个对象构造之后跟随一个<strong>try-finally</strong>语句块一确保成功清理对象</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>	Person p = <span class="hljs-keyword">new</span> Person;<br>    <span class="hljs-keyword">try</span>&#123;<br>		<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        <br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        <span class="hljs-comment">//清理对象，假设dispose()已在Person类实现</span><br>        p.dispose();<br>    &#125;<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>如果，p对象构造失败，将进入<strong>外部</strong>catch语句，因此，dispose()方法<strong>不会调用</strong>。</p>
<p>如果构造成功，为了保证对象能够被清理，在<strong>构造之后立即创建一个try块</strong></p>
<p>在这种方法中，finally只有在p对象构造成功才会执行</p>
<h1 id="异常匹配"><a href="#异常匹配" class="headerlink" title="异常匹配"></a>异常匹配</h1><p>派生类的对象也可以匹配基类的处理程序</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exception1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exception2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception1</span></span>&#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception2();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception1 e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;捕获异常Exception1&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>《Java编程思想》</p>
<p><a href="https://codegym.cc/groups/posts/28-exceptions-checked-unchecked-and-custom">Java的异常</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-static探讨</title>
    <url>/6de462c1/</url>
    <content><![CDATA[<h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><h2 id="非static函数工作原理"><a href="#非static函数工作原理" class="headerlink" title="非static函数工作原理"></a>非static函数工作原理</h2><blockquote>
<p>使用&lt;对象&gt;.&lt;方法名称&gt; 调用函数</p>
<p>实际上是在调用类对应函数，并将该对象作为第一个参数进行传递。在函数内，该对象称为<code>this</code>。函数中的所有操作都是针对此对象及其数据执行的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//表面代码</span><br>Cat cat = <span class="hljs-keyword">new</span> Cat();<br>String name = cat.getName();<br>cat.setAge(<span class="hljs-number">17</span>);<br><br><span class="hljs-comment">//实际运行代码</span><br>Cat cat = <span class="hljs-keyword">new</span> Cat();<br>String name = Cat.getName(cat);<br>Cat.setAge(cat, <span class="hljs-number">17</span>);<br></code></pre></div></td></tr></table></figure>
<h2 id="static函数工作原理"><a href="#static函数工作原理" class="headerlink" title="static函数工作原理"></a>static函数工作原理</h2><blockquote>
<p>使用&lt;类名&gt;.&lt;方法名称&gt; 调用函数</p>
<p>不会传递任何对象，即<code>this</code>为<code>null</code></p>
<p>因此，<strong>static 函数无法访问非 static 变量和函数</strong> </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//表面代码</span><br>Cat cat1 = <span class="hljs-keyword">new</span> Cat();<br>Cat cat2 = <span class="hljs-keyword">new</span> Cat();<br><span class="hljs-keyword">int</span> catCount = Cat.getAllCatsCount();<br><br><span class="hljs-comment">//实际运行代码</span><br>Cat cat1 = <span class="hljs-keyword">new</span> Cat();<br>Cat cat2 = <span class="hljs-keyword">new</span> Cat();<br><span class="hljs-keyword">int</span> catCount = Cat.getAllCatsCount(<span class="hljs-keyword">null</span>);<br></code></pre></div></td></tr></table></figure>
<p>优点</p>
<blockquote>
<ul>
<li>不必传递对象引用，就可以使用 <code>static</code>  方法和变量</li>
<li>可能需先调用一个一个方法，才能创建对象<ul>
<li>如<code>main()</code>设置为static，因此在任意对象创建</li>
<li>之前，在将类加载到内存后立即调用它</li>
</ul>
</li>
<li>可能需要只有一个变量副本，如，<code>System.out</code></li>
</ul>
</blockquote>
<h2 id="static内部类"><a href="#static内部类" class="headerlink" title="static内部类"></a>static内部类</h2><blockquote>
<ul>
<li>对嵌套类使用static，即static不能用于最外层的类。</li>
<li>只能访问外部类静态的成员变量和方法<ul>
<li>但普通内部类可以访问任意外部类的成员变量和方法</li>
</ul>
</li>
<li>可以声明普通成员变量和方法<ul>
<li>但普通内部类不能声明static成员变量和方法</li>
</ul>
</li>
<li>外部类的静态方法只能访问静态内部类</li>
<li>可以直接初始化<ul>
<li>普通内部类必须先新建外部类实例</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/* 下面程序演示如何在java中创建静态内部类和非静态内部类 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span></span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String msg = <span class="hljs-string">&quot;GeeksForGeeks&quot;</span>;<br><br>   <span class="hljs-comment">// 静态内部类</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedStaticClass</span></span>&#123;<br><br>       <span class="hljs-comment">// 静态内部类只能访问外部类的静态成员</span><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMessage</span><span class="hljs-params">()</span> </span>&#123;<br><br>         <span class="hljs-comment">// 试着将msg改成非静态的，这将导致编译错误 </span><br>         System.out.println(<span class="hljs-string">&quot;Message from nested static class: &quot;</span> + msg); <br>       &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 非静态内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span></span>&#123;<br><br>       <span class="hljs-comment">// 不管是静态方法还是非静态方法都可以在非静态内部类中访问</span><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>&#123;<br>          System.out.println(<span class="hljs-string">&quot;Message from non-static nested class: &quot;</span>+ msg);<br>       &#125;<br>    &#125;<br>&#125; <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">// 怎么创建静态内部类和非静态内部类的实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;<br><br>       <span class="hljs-comment">// 创建静态内部类的实例</span><br>       OuterClass.NestedStaticClass printer = <span class="hljs-keyword">new</span> OuterClass.NestedStaticClass();<br><br>       <span class="hljs-comment">// 创建静态内部类的非静态方法</span><br>       printer.printMessage();   <br><br>       <span class="hljs-comment">// 为了创建非静态内部类，我们需要外部类的实例</span><br>       OuterClass outer = <span class="hljs-keyword">new</span> OuterClass();        <br>       OuterClass.InnerClass inner  = outer.<span class="hljs-function">new <span class="hljs-title">InnerClass</span><span class="hljs-params">()</span></span>;<br><br>       <span class="hljs-comment">// 调用非静态内部类的非静态方法</span><br>       inner.display();<br><br>       <span class="hljs-comment">// 我们也可以结合以上步骤，一步创建的内部类实例</span><br>       OuterClass.InnerClass innerObject = <span class="hljs-keyword">new</span> OuterClass().<span class="hljs-function">new <span class="hljs-title">InnerClass</span><span class="hljs-params">()</span></span>;<br><br>       <span class="hljs-comment">// 同样我们现在可以调用内部类方法</span><br>       innerObject.display();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://codegym.cc/quests/lectures/zh.questsyntax.level06.lecture06">static 变量和方法</a></p>
<p><a href="https://www.cnblogs.com/Alex--Yang/p/3386863.html">Java-静态类</a></p>
<p><a href="https://blog.csdn.net/winfredzen/article/details/78458233">Java 静态类、静态方法和静态变量</a></p>
<p><a href="https://www.cnblogs.com/kissazi2/p/3971065.html">java中的Static class</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 类的初始化顺序</title>
    <url>/2af416/</url>
    <content><![CDATA[<blockquote>
<p><strong>静态变量，静态代码块&gt;主函数main&gt;变量，构造代码块&gt;构造方法</strong></p>
</blockquote>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><blockquote>
<ul>
<li>只有创建对象，构造函数才会执行</li>
<li>只运行一次</li>
<li>给对象进行初始化</li>
</ul>
</blockquote>
<h1 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&#123;<br><span class="hljs-comment">//</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<ul>
<li>创建对象时执行，且<strong>优先于构造函数</strong></li>
<li>无法自行调用</li>
<li>给<strong>对象</strong>经行统一初始化</li>
</ul>
</blockquote>
<h1 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span>&#123;<br><span class="hljs-comment">//</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<ul>
<li>随着类的加载而执行，且<strong>只执行一次</strong>，<strong>优先于主函数</strong></li>
<li>给<strong>类</strong>进行初始化</li>
<li>块中变量为<strong>局部变量</strong></li>
<li>一个类可以有<strong>多个</strong>静态代码块</li>
</ul>
</blockquote>
<h2 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h2><blockquote>
<ul>
<li>new 创建该类对象时</li>
<li>使用java.lang.reflext进行反射调用时</li>
<li>无事先加载该类，而加载该类的子类时</li>
<li>虚拟机启动，初始化main函数所在的类</li>
</ul>
</blockquote>
<h1 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;构造函数&quot;</span>);<br>    &#125;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造代码块&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        test1 a = <span class="hljs-keyword">new</span> test1();<br>        test1 b = <span class="hljs-keyword">new</span> test1();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">静态代码块<br>构造代码块<br>构造函数<br>构造代码块<br>构造函数<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test1</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String str1 = <span class="hljs-string">&quot;静态变量&quot;</span>;<br>    <span class="hljs-keyword">public</span>  String str2 = <span class="hljs-string">&quot;变量&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;构造函数&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;---------------&quot;</span>);<br>    &#125;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造代码块&quot;</span>);<br>        System.out.println(str1);<br>        System.out.println(str2);<br>        System.out.println(<span class="hljs-string">&quot;---------------&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>        System.out.println(str1);<br>        <span class="hljs-comment">// System.out.println(str2);</span><br>        System.out.println(<span class="hljs-string">&quot;---------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        test1 a = <span class="hljs-keyword">new</span> test1();<br>        <span class="hljs-comment">//test1 b = new test1();</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">静态代码块<br>静态变量<br>---------------<br>构造代码块<br>静态变量<br>变量<br>---------------<br>构造函数<br>---------------<br></code></pre></div></td></tr></table></figure>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>执行顺序</p>
<blockquote>
<ul>
<li>执行父类静态代码块，初始化父类静态成员变量</li>
<li>执行子类静态代码块，初始化子类静态成员变量</li>
<li>执行父类构造代码块，父类构造函数，父类普通成员变量</li>
<li>执行子类构造代码块，子类构造函数，子类普通成员变量</li>
</ul>
</blockquote>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://zhuanlan.zhihu.com/p/122554857">知乎-Java初始化顺序</a></p>
<p><a href="https://blog.csdn.net/z69183787/article/details/25366627?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;dist_request_id=1328593.10670.16147488454022055&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control">CSDN-Java初始化顺序</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java后端学习之路</title>
    <url>/6714d3d6/</url>
    <content><![CDATA[<p><img src="/6714d3d6/Java后端开发.png" alt="Java后端开发"></p>
<h1 id="Java后端开发"><a href="#Java后端开发" class="headerlink" title="Java后端开发"></a>Java后端开发</h1><h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h3><ul>
<li><p>语言基础</p>
<ul>
<li>基础语法</li>
<li>面向对象</li>
<li>接口</li>
<li>容器</li>
<li>异常</li>
<li>泛型</li>
<li>反射</li>
<li>注解</li>
<li>I/O</li>
<li>图形化</li>
</ul>
</li>
<li><p>JVM虚拟机</p>
<ul>
<li>类加载机制</li>
<li>字节码执行机制</li>
<li>JVM内存模型</li>
<li>GC垃圾回收</li>
<li>JVM性能监控与故障定位</li>
<li>JVM调优</li>
</ul>
</li>
<li><p>多线程/并发</p>
<ul>
<li>并发编程的基础</li>
<li>线程池</li>
<li>锁</li>
<li>并发容器</li>
<li>原子类</li>
<li>JUC并发工具类</li>
</ul>
</li>
</ul>
<h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul>
<li><p>数据结构</p>
<ul>
<li>字符串</li>
<li>数组</li>
<li>链表</li>
<li>堆，栈，队列</li>
<li>二叉树</li>
<li>哈希</li>
<li>图</li>
</ul>
</li>
<li><p>算法</p>
<ul>
<li>排序</li>
<li>查找</li>
<li>贪心</li>
<li>分治</li>
<li>动态规划</li>
<li>回溯</li>
</ul>
</li>
</ul>
<h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><ul>
<li>ARP协议</li>
<li>IP协议，ICMP协议</li>
<li>TCP，UDP协议</li>
<li>DNS，HTTP，HTTPS协议</li>
<li>session，cookie</li>
</ul>
<h3 id="SQL-数据库"><a href="#SQL-数据库" class="headerlink" title="SQL/数据库"></a>SQL/数据库</h3><ul>
<li>SQL语句的书写</li>
<li>SQL语句的优化</li>
<li>事物，隔离级别</li>
<li>索引</li>
<li>锁</li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li>进程，线程</li>
<li>并发，锁</li>
<li>内存管理和调度</li>
<li>I/O原理</li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul>
<li>单例</li>
<li>工厂</li>
<li>代理</li>
<li>策略</li>
<li>模版方法</li>
<li>观察者</li>
<li>适配器</li>
<li>责任链</li>
<li>建造者</li>
</ul>
<h2 id="研发工具"><a href="#研发工具" class="headerlink" title="研发工具"></a>研发工具</h2><h3 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h3><ul>
<li>eclipse</li>
<li>intellij IDEA</li>
<li>VSCode</li>
</ul>
<h3 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h3><ul>
<li>常用命令</li>
<li>shell脚本</li>
</ul>
<h3 id="项目管理-构建工具"><a href="#项目管理-构建工具" class="headerlink" title="项目管理/构建工具"></a>项目管理/构建工具</h3><ul>
<li>Maven</li>
<li>Gradle</li>
</ul>
<h3 id="代码管理工具"><a href="#代码管理工具" class="headerlink" title="代码管理工具"></a>代码管理工具</h3><ul>
<li>git</li>
<li>s v n</li>
</ul>
<h2 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul>
<li><p>Spring家族框架</p>
<ul>
<li><p>Spring</p>
<ul>
<li>loC</li>
<li>AOP</li>
</ul>
</li>
<li><p>SpringMC</p>
</li>
<li><p>Spring Boot</p>
<ul>
<li>自动配置，开箱即用</li>
<li>整合Web</li>
<li>整合数据库（事物问题）</li>
<li><p>整合权限</p>
<ul>
<li>Shiro</li>
<li>Spring Security</li>
</ul>
</li>
<li><p>整合各种中间件</p>
<ul>
<li>Redis，MQ，PRC框架，NIO框架</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>服务器软件</p>
<ul>
<li><p>Web服务器</p>
<ul>
<li>N g i n x</li>
</ul>
</li>
<li><p>应用服务器</p>
<ul>
<li>Tomcat</li>
<li>Jetty</li>
<li>Undertow</li>
</ul>
</li>
</ul>
</li>
<li><p>中间件</p>
<ul>
<li><p>缓存</p>
<ul>
<li><p>Redis</p>
<ul>
<li>5大基础数据类型</li>
<li>事物</li>
<li>管道</li>
<li>持久化</li>
<li>集群</li>
</ul>
</li>
</ul>
</li>
<li><p>消息队列</p>
<ul>
<li>RocketMQ</li>
<li>R a b bi t MQ</li>
<li>Kafka</li>
</ul>
</li>
<li><p>RPC框架</p>
<ul>
<li>Dubbo</li>
<li>gRPC</li>
<li>Thrift</li>
<li>Spring Cloud</li>
<li>Netty</li>
</ul>
</li>
</ul>
</li>
<li><p>数据库框架</p>
<ul>
<li><p>ORM层框架</p>
<ul>
<li>Mybatis</li>
<li>Hibernate</li>
<li>JPA</li>
</ul>
</li>
<li><p>连接池</p>
<ul>
<li>Druid</li>
<li>HikariCP</li>
<li>C3P0</li>
</ul>
</li>
<li><p>分库分表</p>
<ul>
<li>M y CAT</li>
<li>Sharding-JDBC</li>
<li>Sharding- Sphere</li>
</ul>
</li>
</ul>
</li>
<li><p>搜索引擎</p>
<ul>
<li>ElasticSearch</li>
<li>S o l r</li>
</ul>
</li>
<li><p>分布式/微服务</p>
<ul>
<li><p>服务发现/注册</p>
<ul>
<li>Eureka</li>
<li>Consul</li>
<li>Zookeeper</li>
<li>Nacos</li>
</ul>
</li>
<li><p>网关</p>
<ul>
<li>Zuul</li>
<li>Gateway</li>
</ul>
</li>
<li><p>服务调用（负载均衡）</p>
<ul>
<li>Ribbon</li>
<li>Feign</li>
</ul>
</li>
<li><p>熔断/降级</p>
<ul>
<li>Hystrix</li>
</ul>
</li>
<li><p>配置中心</p>
<ul>
<li>Config</li>
<li>Apollo</li>
<li>Nacos</li>
</ul>
</li>
<li><p>认证和鉴权</p>
<ul>
<li>Spring Security</li>
<li>OAuth2</li>
<li>SSO单点登录</li>
</ul>
</li>
<li><p>分布式事务</p>
<ul>
<li><p>JTA接口</p>
<ul>
<li>Atomikos组件</li>
</ul>
</li>
<li><p>2PC，3PC</p>
</li>
<li>XA模式</li>
<li><p>TCC模式</p>
<ul>
<li>tcc-transaction</li>
<li>ByteTCC</li>
<li>EasyTransaction</li>
<li>Seata</li>
</ul>
</li>
<li><p>SAGA模式</p>
<ul>
<li>ServiceComb</li>
<li>Seata</li>
</ul>
</li>
<li><p>LCN模式</p>
<ul>
<li>tx-lcn</li>
</ul>
</li>
</ul>
</li>
<li><p>任务调度</p>
<ul>
<li>Quartz</li>
<li>Elastic-Job</li>
</ul>
</li>
<li><p>链路追踪和监控</p>
<ul>
<li>Zipkin</li>
<li>Sleuth</li>
<li>Skywalking</li>
</ul>
</li>
<li><p>日志分析与监控</p>
<ul>
<li><p>ELK</p>
<ul>
<li>ElasticSearch</li>
<li>Logstash</li>
<li>Kibana</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>虚拟化/容器化</p>
<ul>
<li><p>容器技术</p>
<ul>
<li>Docker</li>
</ul>
</li>
<li><p>容器编排技术</p>
<ul>
<li>Kubernetes</li>
<li>Swarm</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul>
<li><p>基础套餐</p>
<ul>
<li><p>三大件</p>
<ul>
<li>HTML</li>
<li>JavaScript</li>
<li>CSS</li>
</ul>
</li>
<li><p>基础库</p>
<ul>
<li>JQuery</li>
<li>Ajax</li>
</ul>
</li>
</ul>
</li>
<li><p>模版框架</p>
<ul>
<li>JSP/JSTL</li>
<li>Thymeleaf</li>
<li>FreeMarker</li>
</ul>
</li>
<li><p>组件化框架</p>
<ul>
<li>Node</li>
<li>Vue</li>
<li>React</li>
<li>Angular</li>
</ul>
</li>
</ul>
<h2 id="运维知识"><a href="#运维知识" class="headerlink" title="运维知识"></a>运维知识</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><ul>
<li>Nginx</li>
</ul>
<h3 id="应用服务器"><a href="#应用服务器" class="headerlink" title="应用服务器"></a>应用服务器</h3><ul>
<li>Tomcat</li>
<li>Jetty</li>
<li>Undertow</li>
</ul>
<h3 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h3><h3 id="持续集成-持续部署"><a href="#持续集成-持续部署" class="headerlink" title="持续集成/持续部署"></a>持续集成/持续部署</h3><ul>
<li>Jenkins</li>
</ul>
<h3 id="代码质量检查"><a href="#代码质量检查" class="headerlink" title="代码质量检查"></a>代码质量检查</h3><ul>
<li>sonar</li>
</ul>
<h3 id="日志收集和分析"><a href="#日志收集和分析" class="headerlink" title="日志收集和分析"></a>日志收集和分析</h3><ul>
<li>ELK</li>
</ul>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://www.bilibili.com/video/BV1GQ4y1N7HD">B站upCodesheepJava后端开发详细学习路线视频教程</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础语言</title>
    <url>/24268d51/</url>
    <content><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><h3 id="简单（原始）"><a href="#简单（原始）" class="headerlink" title="简单（原始）"></a>简单（原始）</h3><blockquote>
<p>直接存储值</p>
<p>赋值时，复制该值</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>int</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h3 id="复合（引用）"><a href="#复合（引用）" class="headerlink" title="复合（引用）"></a>复合（引用）</h3><blockquote>
<p>所有复合类型都由简单类型组成，称为<strong>类</strong></p>
<p>存储对象的引用</p>
<p>赋值时，只复制对象的地址</p>
<p><code>String</code>也是一种复合类型，由<code>char</code>组成</p>
</blockquote>
<p><strong>复合类型的变量不存储对象本身，而只存储对象引用（即对象的四字节地址）</strong></p>
<p><strong>如果更改一个变量所引用的对象的数据，则会更改其他变量所引用的数据</strong></p>
<blockquote>
<p>但对<code>String</code>引用的直接修改有些不同</p>
</blockquote>
<h4 id="String深入探讨"><a href="#String深入探讨" class="headerlink" title="String深入探讨"></a><code>String</code>深入探讨</h4><h5 id="两种创建方式"><a href="#两种创建方式" class="headerlink" title="两种创建方式"></a>两种创建方式</h5><p>最简单，常量字符串赋值</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String a = <span class="hljs-string">&quot;1&quot;</span>;<br>String b = <span class="hljs-string">&quot;1&quot;</span>;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>该方法所创建的字符串会存储在<strong>公共池</strong>中</p>
<p>JVM首先会查找创建的对象是否存在于公共池当中</p>
<p>若存在，则返回其引用（防止重复创建，节约内存）</p>
<p>否则，新建该对象，并存储在公共池</p>
<p><code>a == b</code> 返回 <code>true</code></p>
</blockquote>
<p>使用构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String c = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;1&quot;</span>);<br>String d = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;1&quot;</span>);<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>该方法所创建的字符串会存储在<strong>堆</strong>中</p>
<p><code>c == d</code> 返回 <code>false</code></p>
</blockquote>
<h5 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h5><p>查看源码</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span></span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;, <span class="hljs-title">CharSequence</span> </span>&#123;<br>    <span class="hljs-comment">/** The value is used for character storage. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> value[];<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>可见<code>String</code>数据被存储在<code>final</code>修饰的<code>char[]</code>中，因此无法修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String a = <span class="hljs-string">&quot;1&quot;</span>;<br>String b = a;<br>System.out.println(a);<br>System.out.println(b);<br><br>b = <span class="hljs-string">&quot;2&quot;</span>;<br><br>System.out.println(a);<br>System.out.println(b);<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p><code>b = &quot;2&quot;</code>会在公共池中新建一个“2”字符串，b指向新建的“2”</p>
<p>a 指向原来的 “1” 不变</p>
</blockquote>
<h5 id="intern"><a href="#intern" class="headerlink" title="intern()"></a><code>intern()</code></h5><blockquote>
<p>检查常量池中是否有匹配的字符串</p>
<p>若存在，返回对应常量池字符串的引用</p>
<p>否则，将该字符串添加到常量池中并返回其引用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;123&quot;</span>;<br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;123&quot;</span>);<br>System.out.println(s1 == s2.intern());<br><br><span class="hljs-comment">//返回true</span><br></code></pre></div></td></tr></table></figure>
<h5 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h5><h5 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h5><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><blockquote>
<p>一旦没有变量引用某个对象，该对象就会被标记为垃圾， Java 在下次收集垃圾时会将其销毁</p>
<p>只要对象至少有一个引用，该对象即被视为活跃对象并且不会被销毁。如果你想尽快处理对象，可以通过为引用该对象的所有变量赋值 <strong>null</strong> 来清除该对象的所有引用。</p>
</blockquote>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><p>当函数参数为一个对象的引用时，调用该函数时，传递的是对象<strong>引用的副本</strong>，而不是引用本身，</p>
<p>因此会存在该对象的两个引用</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person person = <span class="hljs-keyword">new</span> Person();<br>        person.age = <span class="hljs-number">5</span>;<br><br>        test1.change1(person);<br>        System.out.println(person.age);<br><br>        test1.change2(person);<br>        System.out.println(person.age);<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change1</span><span class="hljs-params">(Person person)</span></span>&#123;<br>        person.age = <span class="hljs-number">20</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change2</span><span class="hljs-params">(Person person)</span></span>&#123;<br>        person = <span class="hljs-keyword">new</span> Person();<br>        person.age = <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>        <span class="hljs-keyword">int</span> age;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p><code>change2()</code>结果是，两个引用指向两个不同的变量</p>
</blockquote>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="非static函数工作原理"><a href="#非static函数工作原理" class="headerlink" title="非static函数工作原理"></a>非static函数工作原理</h3><blockquote>
<p>使用&lt;对象&gt;.&lt;方法名称&gt; 调用函数</p>
<p>实际上是在调用类对应函数，并将该对象作为第一个参数进行传递。在函数内，该对象称为<code>this</code>。函数中的所有操作都是针对此对象及其数据执行的。</p>
</blockquote>
<h3 id="static函数工作原理"><a href="#static函数工作原理" class="headerlink" title="static函数工作原理"></a>static函数工作原理</h3><blockquote>
<p>使用&lt;类名&gt;.&lt;方法名称&gt; 调用函数</p>
<p>不会传递任何对象，即<code>this</code>为<code>null</code></p>
<p>因此，<strong>static 函数无法访问非 static 变量和函数</strong> </p>
</blockquote>
<p>优点</p>
<blockquote>
<ul>
<li>不必传递对象引用，就可以使用 <code>static</code>  方法和变量</li>
<li>可能需先调用一个一个方法，才能创建对象（如<code>main()</code>设置为static）</li>
<li>可能需要只有一个变量副本，如，<code>System.out</code></li>
</ul>
</blockquote>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h3 id><a href="#" class="headerlink" title="=="></a><code>==</code></h3><blockquote>
<p>比较引用对象时，不是比较对象的属性</p>
<p>即，只有两个引用变量是对同一个对象的引用时，才返回<code>true</code></p>
</blockquote>
<h3 id="equal"><a href="#equal" class="headerlink" title="equal()"></a><code>equal()</code></h3><blockquote>
<p><code>equals()</code>属于<code>Object</code>类-Java中最重要的类，是所有其他类的派生类</p>
<p>需对类中的<code>equals()</code>重写</p>
</blockquote>
<h3 id="equalsIgnoreCase"><a href="#equalsIgnoreCase" class="headerlink" title="equalsIgnoreCase()"></a><code>equalsIgnoreCase()</code></h3><blockquote>
<p>无视字符串中的大小写</p>
</blockquote>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h3><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote>
<p>泛型是带有参数的类型。在 Java 中，容器类允许你指出其内部对象的类型</p>
<p>声明泛型变量时,指出变量类型和它所存储的数据的类型</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();	<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>任何类都可以作为类型参数</p>
<p>不能是原始类型，所有类型参数都必须从 Object 类继承</p>
</blockquote>
<p>原始类型对应包装类</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>原始类型</th>
<th>类</th>
<th>列表</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td>Integer</td>
<td>ArrayList<Integer></Integer></td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td>ArrayList<Double></Double></td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
<td>ArrayList<Boolean></Boolean></td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
<td>ArrayList<Character></Character></td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
<td>ArrayList<Byte></Byte></td>
</tr>
</tbody>
</table>
</div>
<h2 id="数组与ArraysList"><a href="#数组与ArraysList" class="headerlink" title="数组与ArraysList"></a>数组与ArraysList</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] numbers = &#123;<span class="hljs-number">167</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">16</span>, <span class="hljs-number">99</span>, <span class="hljs-number">26</span>, <span class="hljs-number">92</span>, <span class="hljs-number">43</span>, -<span class="hljs-number">234</span>, <span class="hljs-number">35</span>, <span class="hljs-number">80</span>&#125;;<br></code></pre></div></td></tr></table></figure>
<p><code>Arrays.sort()</code>方法对数组进行排序</p>
<p><code>Arrays.toString()</code>将数组转换为字符串</p>
<p><code>Arrays.copyOf()</code>复制数组</p>
<p><code>Arrays.equals()</code>比较数组</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Arrays.sort(numbers);<br><span class="hljs-keyword">int</span> [] numbersCopy = Arrays.copyOf(numbers, <span class="hljs-number">4</span>);<br>System.out.println(Arrays.toString(numbers));<br>System.out.println(Arrays.equals(numbers, numbers2));<br></code></pre></div></td></tr></table></figure>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p><code>Arrays.deepEquals()</code></p>
<p><code>Arrays.deepToString()</code></p>
<h3 id="ArraysList"><a href="#ArraysList" class="headerlink" title="ArraysList"></a>ArraysList</h3><p>创建一个具有特定大小的数组的列表：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList&lt;Car&gt; cars = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-number">100</span>);<br></code></pre></div></td></tr></table></figure>
<p>一次分配一个包含100个元素的数组的内存，从而使该数组效率更高（不需要扩展）</p>
<p>缺点，<strong>从中删除对象时<code>ArrayList</code>，内部数组的大小不会自动减小。</strong> </p>
<p>使用<code>ArrayList</code>该类的一种特殊方法来优化内存使用：<code>trimToSize()</code>。此方法将内部数组的长度“修剪”到当前存储在内部数组中的元素数量。</p>
<h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h1 id="集合与接口"><a href="#集合与接口" class="headerlink" title="集合与接口"></a>集合与接口</h1><p>四个列表、三个集和四个映射</p>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">   Set&lt;String&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br>   set.add(<span class="hljs-string">&quot;西班牙&quot;</span>);<br>   set.add(<span class="hljs-string">&quot;的&quot;</span>);<br>   set.add(<span class="hljs-string">&quot;雨&quot;</span>);<br><br>    <span class="hljs-comment">// 获取集的迭代器</span><br>    Iterator&lt;String&gt; iterator = set.iterator();<br><br>   <span class="hljs-keyword">while</span> (iterator.hasNext())        <span class="hljs-comment">// 检查是否存在另一个元素</span><br>   &#123;<br>      <span class="hljs-comment">// 获取当前元素并移至下一个</span><br>      String text = iterator.next();<br><br>       System.out.println(text);<br>   &#125;<br><span class="hljs-comment">//简写</span><br><span class="hljs-keyword">for</span> (String text : set)<br>   &#123;<br>       System.out.println(text);<br>   &#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 所有元素成对存储</span><br>    Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>    map.put(<span class="hljs-string">&quot;第一个&quot;</span>, <span class="hljs-string">&quot;西班牙&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;第二个&quot;</span>, <span class="hljs-string">&quot;的&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;第三个&quot;</span>, <span class="hljs-string">&quot;雨&quot;</span>);<br><br>    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();<br><br>   <span class="hljs-keyword">while</span> (iterator.hasNext())<br>    &#123;<br>        <span class="hljs-comment">// 获取键-值对</span><br>        Map.Entry&lt;String, String&gt; pair = iterator.next();<br>        String key = pair.getKey();            <span class="hljs-comment">// 键</span><br>        String value = pair.getValue();        <span class="hljs-comment">// 值</span><br>        System.out.println(key + <span class="hljs-string">&quot;:&quot;</span> + value);<br>    &#125;<br>	<span class="hljs-comment">//简写</span><br>	<span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; pair : map.entrySet())<br>    &#123;<br>        String key = pair.getKey();                      <span class="hljs-comment">// 键</span><br>        String value = pair.getValue();                  <span class="hljs-comment">// 值</span><br>        System.out.println(key + <span class="hljs-string">&quot;:&quot;</span> + value);<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h2 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>String s = reader.readLine();<br></code></pre></div></td></tr></table></figure>
<p><code>System.in</code>是一个<code>InputStream</code>对象</p>
<p><code>System.in.read()</code>读取的是<strong>字节</strong></p>
<p><code>InputStreamReader</code>不仅从流接收数据。它还将<strong>字节流转换为字符流</strong></p>
<p><code>BufferedReader</code>读取数据时，它使用一个称为<strong>缓冲区</strong>的特殊区域，在该区域中“存储”读取的字符。最终，当程序中需要这些字符时，它们将从缓冲区中获取，而不是直接从数据源（键盘，文件等）中获取。这样可以节省大量资源。</p>
<h1 id="持续更新中"><a href="#持续更新中" class="headerlink" title="持续更新中"></a>持续更新中</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>KNN和K-mean算法学习</title>
    <url>/25312a79/</url>
    <content><![CDATA[<h1 id="KNN算法"><a href="#KNN算法" class="headerlink" title="KNN算法"></a>KNN算法</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近的K个实例，这K个实例的多数属于某个类，就把该输入实例分类到这个类中。</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-c3f1d2553e7467d7da5f9cd538d2b49a_720w.png" alt="img"></p>
<h2 id="k值选取"><a href="#k值选取" class="headerlink" title="k值选取"></a>k值选取</h2><p>当k值过小，会被周围的<strong>噪声</strong>影响，导致出现过拟合现象</p>
<p>当k值过大，与输入实例<strong>较远的不相关的训练实例</strong>也会对预测起作用，导致预测失误</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-b7dc18ee84e5c099c21fbaa175a7b9c6_720w.png" alt="img"></p>
<p><strong>如何选取</strong></p>
<p>一般选取一个较小的数值，通常采取<strong>交叉验证法</strong>来选取最优的k值。<strong>也就是说，选取k值很重要的关键是实验调参，类似于神经网络选取多少层这种，通过调整超参数来得到一个较好的结果</strong></p>
<h2 id="距离的度量"><a href="#距离的度量" class="headerlink" title="距离的度量"></a>距离的度量</h2><p><strong>如何计算k邻近距离</strong></p>
<p>有以下几种方式</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-60bb382b0d22ec0ce296ed0e024f31bc_720w.png" alt="img"></p>
<h2 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h2><p><strong>对样本特征的归一化</strong>：避免因为不同维度可能<strong>特征量纲不同</strong>，导致注意力偏向</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-be30691d37ac93b2237217cadca2e967_720w.png" alt="img"></p>
<p><strong>即除以样本中，每一特征的最大差值</strong></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>优点</strong></p>
<p>1）算法简单，理论成熟，既可以用来做分类也可以用来做回归。</p>
<p>2）可用于非线性分类。</p>
<p>3）没有明显的训练过程，而是在程序开始运行时，把数据集加载到内存后，不需要进行训练，直接进行预测，所以训练时间复杂度为0。</p>
<p>4）由于KNN方法主要靠周围有限的邻近的样本，而不是靠判别类域的方法来确定所属的类别，因此对于类域的交叉或重叠较多的待分类样本集来说，KNN方法较其他方法更为适合。</p>
<p>5）该算法比较适用于样本容量比较大的类域的自动分类，而那些样本容量比较小的类域采用这种算法比较容易产生误分类情况。</p>
<p><strong>缺点</strong></p>
<p>1）需要算每个测试点与训练集的距离，当训练集较大时，计算量相当大，时间复杂度高，特别是特征数量比较大的时候。</p>
<p>2）需要大量的内存，空间复杂度高。</p>
<p>3）样本不平衡问题（即有些类别的样本数量很多，而其它样本的数量很少），对稀有类别的预测准确度低。</p>
<p>4）是lazy learning方法，基本上不学习，导致预测时速度比起逻辑回归之类的算法慢。</p>
<blockquote>
<p>注意，为了克服降低样本不平衡对预测准确度的影响，我们可以<strong>对类别进行加权</strong>，例如对样本数量多的类别用较小的权重，而对样本数量少的类别，我们使用较大的权重。 另外，作为KNN算法唯一的一个超参数K,它的设定也会算法产生重要影响。因此，为了降低K值设定的影响，可以<strong>对距离加权</strong>。为每个点的距离增加一个权重，使得距离近的点可以得到更大的权重。</p>
</blockquote>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/25994179">一文搞懂k近邻（k-NN）算法（一）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/53084915">KNN算法介绍</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux多节点环境打造</title>
    <url>/d49360d3/</url>
    <content><![CDATA[<h1 id="基本准备"><a href="#基本准备" class="headerlink" title="基本准备"></a>基本准备</h1><h2 id="软件资源准备"><a href="#软件资源准备" class="headerlink" title="软件资源准备"></a>软件资源准备</h2><h3 id="Linux-CentOS7"><a href="#Linux-CentOS7" class="headerlink" title="Linux CentOS7"></a>Linux CentOS7</h3><p>进入<a href="https://www.centos.org/">CentOS官网</a>，点击CentOS Linux</p>
<p><img src="/d49360d3/image-20210221150445096.png" style="zoom:50%;"></p>
<p>选择CentOS7下的x86_64</p>
<p><img src="/d49360d3/image-20210221151338404.png" style="zoom:50%;"></p>
<p>选择合适镜像链接下载CentOS-7-x86_64-DVD-2009.iso </p>
<p>也可以点击<a href="http://mirrors.huaweicloud.com/centos/7.9.2009/isos/x86_64/">安装链接</a>直接安装</p>
<a id="more"></a>
<h3 id="VMware-Workstation-Pro（虚拟机软件）"><a href="#VMware-Workstation-Pro（虚拟机软件）" class="headerlink" title="VMware Workstation Pro（虚拟机软件）"></a>VMware Workstation Pro（虚拟机软件）</h3><p>此软件适用于window和Linux操作系统</p>
<p>点击<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">下载链接</a>选择合适的版本下载</p>
<p>若使用mac操作系统，请下载<a href="https://www.vmware.com/products/fusion/fusion-evaluation.html">VMware fusion</a></p>
<h3 id="Xshell（SSH终端）"><a href="#Xshell（SSH终端）" class="headerlink" title="Xshell（SSH终端）"></a>Xshell（SSH终端）</h3><p>在该<a href="https://www.netsarang.com/zh/free-for-home-school/">网站</a>提交邮箱即可获得免费版下载地址</p>
<h3 id="Xftp（SFTP文件传输工具）"><a href="#Xftp（SFTP文件传输工具）" class="headerlink" title="Xftp（SFTP文件传输工具）"></a>Xftp（SFTP文件传输工具）</h3><p>在该<a href="https://www.netsarang.com/zh/free-for-home-school/">网站</a>提交邮箱即可获得免费版下载地址</p>
<h2 id="安装Linux"><a href="#安装Linux" class="headerlink" title="安装Linux"></a>安装Linux</h2><p>打开VMware，点击创建新的虚拟机</p>
<p><img src="/d49360d3/image-20210221162508578.png" style="zoom:50%;"></p>
<p>选择-典型</p>
<p><img src="/d49360d3/image-20210221162708548.png" alt="image-20210221162708548" style="zoom:50%;"></p>
<p>选择-稍后安装操作系统</p>
<p><img src="/d49360d3/image-20210221162749238.png" alt="image-20210221162749238" style="zoom:50%;"></p>
<p>选择-CentOS7 64位版本</p>
<p><img src="/d49360d3/image-20210221162901609.png" alt="image-20210221162901609" style="zoom:50%;"></p>
<p>设置名称和路径</p>
<p><img src="/d49360d3/image-20210221163030778.png" alt="image-20210221163030778" style="zoom:50%;"></p>
<p>分配磁盘大小，实际占用的是刚刚我们选择路径的磁盘空间</p>
<p><img src="/d49360d3/image-20210221163144702.png" alt="image-20210221163144702" style="zoom:50%;"></p>
<p>自定义硬件</p>
<p>选择刚刚下载CentOS7 ios文件</p>
<p><img src="/d49360d3/image-20210221163526501.png" alt="image-20210221163526501" style="zoom:50%;"></p>
<p>设置处理器内核数量，博主笔记本为8核处理器，因此设置2核</p>
<p><img src="/d49360d3/image-20210221163738134.png" alt="image-20210221163738134" style="zoom:50%;"></p>
<p>设置内存，博主笔记本为8g内存（打算以后再升级），设置2g内存</p>
<p><img src="/d49360d3/image-20210221163847605.png" alt="image-20210221163847605" style="zoom:50%;"></p>
<p>点击完成，然后启动</p>
<p>按下键盘↑方向键，回车</p>
<p><img src="/d49360d3/image-20210221201145200.png" alt="image-20210221201145200" style="zoom:50%;"></p>
<p>然后选择语言（选中文），点击继续，选择自己安装的软件，点击安装</p>
<p>设置root密码</p>
<p><img src="/d49360d3/image-20210221202349911.png" alt="image-20210221202349911" style="zoom:50%;"></p>
<p>静静等待安装~</p>
<p>最后创建用户名即可</p>
<h1 id="设置静态ip"><a href="#设置静态ip" class="headerlink" title="设置静态ip"></a>设置静态ip</h1><h2 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h2><p>点击虚拟机——设置——网络适配器——桥接模式</p>
<p>点击编辑——虚拟网络编辑器——VMnet0设置桥接模式且选择对应网卡</p>
<p>如何查看自己的网卡</p>
<p>打开网络与共享中心——点击你所连接的网络——属性</p>
<p><img src="/d49360d3/image-20210221213438143.png" alt="image-20210221213438143" style="zoom:50%;"></p>
<h2 id="Linux设置"><a href="#Linux设置" class="headerlink" title="Linux设置"></a>Linux设置</h2><p>打开控制台，输入<code>su root</code>,进入管理员模式</p>
<p>输入密码（密码不会显示），回车</p>
<p>输入<code>dhclient</code></p>
<p>输入<code>ifconfig</code></p>
<p><img src="/d49360d3/image-20210221205753363.png" alt="image-20210221205753363" style="zoom:100%;"></p>
<p>ens33下的inet会有一串ip，记住</p>
<p>然后输入</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">vim /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></div></td></tr></table></figure>
<p>修改</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yes">BROOTPROTO&#x3D;static<br>ONBOOT&#x3D;yes<br></code></pre></div></td></tr></table></figure>
<p>添加</p>
<figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">IPADDR</span>=刚刚生成的ip<br><span class="hljs-attr">NETMASK</span>=子网掩码<br><span class="hljs-attr">GATEWAY</span>=默认网关<br><span class="hljs-attr">DNS1</span>=DNS<br></code></pre></div></td></tr></table></figure>
<p>打开网络与共享中心</p>
<p>点击你所连接的网络</p>
<p><img src="/d49360d3/image-20210221210909932.png" alt="image-20210221210909932" style="zoom:50%;"></p>
<p>点击详细信息，即可看到所需信息</p>
<p><img src="/d49360d3/image-20210221211130883.png" alt="image-20210221211130883" style="zoom:80%;"></p>
<p>将对应信息填入即可，按esc退出编辑，输入<code>:wq</code>保存并退出</p>
<p>输入以下命令，重启网卡</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">systemctl restart network.service<br></code></pre></div></td></tr></table></figure>
<p>检验是否可以连接外网</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">ping www.baidu.com<br></code></pre></div></td></tr></table></figure>
<p>若有数据，即成功</p>
<p><img src="/d49360d3/image-20210221212843755.png" alt="image-20210221212843755" style="zoom:75%;"></p>
<h1 id="多节点打造"><a href="#多节点打造" class="headerlink" title="多节点打造"></a>多节点打造</h1><p>关闭Linux——右键刚刚创建的CentOS7——快照——拍摄快照</p>
<p>虚拟机——管理——克隆——创建完整克隆</p>
<p>设置静态ip参考上文</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习</title>
    <url>/c6fb831a/</url>
    <content><![CDATA[<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="查找第N高数据"><a href="#查找第N高数据" class="headerlink" title="查找第N高数据"></a>查找第N高数据</h2><p><a href="https://leetcode-cn.com/problems/second-highest-salary/">176.第二高的薪水</a></p>
<blockquote>
<p>思路一</p>
<p>先找到第一高的</p>
<p>再以最高的作为条件选择第二高的</p>
</blockquote>
<p>使用<code>distinct</code>进行去重</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select max(distinct Salary ) as &quot;SecondHighestSalary&quot;<br>from Employee<br>where Salary &lt; (select max(distinct Salary)<br>                from Employee);<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>思路二</p>
<p>使用<code>limit</code>,<code>offset</code></p>
<p>降序返回第二条记录</p>
<p>使用<code>ifnull()</code>判断是否为null</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select ifnull(<br>(select distinct Salary<br>from Employee<br>order by Salary desc<br>limit 1 offset 1),<br>null) as SecondHighestSalary;<br></code></pre></div></td></tr></table></figure>
<p><a href="https://leetcode-cn.com/problems/nth-highest-salary/">177.第N高的薪水</a></p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT<br>BEGIN<br>    DECLARE M INT;<br>    SET M &#x3D;N-1;<br>     RETURN (<br>      # Write your MySQL query statement below.<br>      select ifnull(<br>          (select distinct Salary<br>          from Employee<br>          order by Salary desc<br>          limit M,1 )<br>          ,null<br>      ) as getNthHighestSalary     <br>  );<br>END<br></code></pre></div></td></tr></table></figure>
<h2 id="查找连续出现N次的内容"><a href="#查找连续出现N次的内容" class="headerlink" title="查找连续出现N次的内容"></a>查找连续出现N次的内容</h2><p><a href="https://leetcode-cn.com/problems/consecutive-numbers/">180.连续出现的数字</a></p>
<blockquote>
<p>思路一</p>
<p>自链接（不适用于次数较高）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select distinct a.num as ConsecutiveNums<br>from Logs as a,<br>    Logs as b,<br>    Logs as c<br>where a.Id &#x3D; b.Id-1<br>    and b.Id &#x3D; c.Id-1<br>    and a.num &#x3D; b.num<br>    and b.num &#x3D; c.num;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>利用分组排序</p>
<p><a href="https://leetcode-cn.com/problems/consecutive-numbers/solution/sql-server-jie-fa-by-neilsons/">参考</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select distinct num  as ConsecutiveNums from<br>(select num,COUNT(1) as Scount from<br>(select id,num,<br>    row_number() over (order by id) -<br>    row_number() over (partition by num order by id) as flag<br>from Logs) as sub<br>GROUP by num,flag HAVING COUNT(1)&gt;&#x3D;3) as Result;<br></code></pre></div></td></tr></table></figure>
<h2 id="查找重复数据"><a href="#查找重复数据" class="headerlink" title="查找重复数据"></a>查找重复数据</h2><p><a href="https://leetcode-cn.com/problems/duplicate-emails/">182.查找重复的电子邮箱</a></p>
<blockquote>
<p><code>group</code>分组</p>
<p><code>count</code>计数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select Email <br>from Person<br>GROUP by Email<br>HAVING COUNT(1)&gt;1;<br></code></pre></div></td></tr></table></figure>
<h2 id="查找不在表里的数据"><a href="#查找不在表里的数据" class="headerlink" title="查找不在表里的数据"></a>查找不在表里的数据</h2><p><a href="https://leetcode-cn.com/problems/customers-who-never-order/">183.从不订购的客户</a></p>
<blockquote>
<p>多表联结</p>
<p><code>where</code>筛选</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select a.Name as Customers<br>from Customers as a left join Orders as b <br>    on a.Id &#x3D; b.CustomerId<br>    where b.CustomerId is null;<br></code></pre></div></td></tr></table></figure>
<h2 id="分组比较"><a href="#分组比较" class="headerlink" title="分组比较"></a>分组比较</h2><p><a href="https://leetcode-cn.com/problems/department-highest-salary/">184.部门工资最高的员工</a></p>
<blockquote>
<p>多表联结</p>
<p>分组</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select b.Name as Department,a.Name as Employee,a.Salary <br>from Employee as a join Department as b<br>    on a.DepartmentId &#x3D; b.id<br>where(<br>    (a.DepartmentId,a.Salary) in<br>    (select a.DepartmentId, max(Salary) from Employee as a<br>        group by a.DepartmentId)<br>);<br></code></pre></div></td></tr></table></figure>
<h2 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h2><p><a href="https://leetcode-cn.com/problems/delete-duplicate-emails/">196.删除重复的电子邮箱</a></p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">delete p1 <br>from Person p1,<br>    Person p2<br>where <br>    p1.Email&#x3D;p2.Email and p1.Id &gt; p2.Id;<br></code></pre></div></td></tr></table></figure>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="排名问题"><a href="#排名问题" class="headerlink" title="排名问题"></a>排名问题</h2><p><a href="https://leetcode-cn.com/problems/rank-scores/">178.分数排名</a></p>
<blockquote>
<p>使用窗口函数，<code>dense_rank()</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># Write your MySQL query statement below<br>select Score,<br>        dense_rank() over(order by Score desc) as &#39;Rank&#39;<br>from Scores;<br></code></pre></div></td></tr></table></figure>
<h2 id="TOPN"><a href="#TOPN" class="headerlink" title="TOPN"></a>TOPN</h2><p><a href="https://leetcode-cn.com/problems/department-top-three-salaries/">185.部门工资前三高的所有员工</a></p>
<blockquote>
<p>排序</p>
<p>多表联结</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select b.Name as Department,a.Name as Employee,a.Salary<br>from Employee as a join Department as b <br>    on a.DepartmentId &#x3D; b.Id<br>where(<br>    (a.DepartmentId,a.Salary) in<br>    (select DepartmentId,Salary from<br>        (select a.DepartmentId,a.Salary,<br>            dense_rank() over(partition by a.DepartmentId order by a.Salary desc) as ranking<br>        from Employee as a <br>        ) as c<br>        where ranking &lt;&#x3D;3<br>    ) <br>);<br></code></pre></div></td></tr></table></figure>
<h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><h2 id="比较日期"><a href="#比较日期" class="headerlink" title="比较日期"></a>比较日期</h2><p><a href="https://leetcode-cn.com/problems/rising-temperature/">197.上升的温度</a></p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select w1.id <br>from Weather as w1 cross join Weather as w2 <br>    on datediff(w1.recordDate,w2.recordDate) &#x3D; 1<br>where w1.Temperature &gt; w2.Temperature;<br></code></pre></div></td></tr></table></figure>
<h1 id="语法函数总结"><a href="#语法函数总结" class="headerlink" title="语法函数总结"></a>语法函数总结</h1><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p><code>datediff</code></p>
<blockquote>
<p><code>datediff(日期1, 日期2)</code><br>得到的结果是日期1与日期2相差的天数。<br>如果日期1比日期2大，结果为正；如果日期1比日期2小，结果为负。</p>
</blockquote>
<p><code>timestampdiff</code></p>
<blockquote>
<p><code>timestampdiff(时间类型, 日期1, 日期2)</code><br>这个函数和上面<code>diffdate</code>的正、负号规则刚好相反。<br>日期1大于日期2，结果为负，日期1小于日期2，结果为正。</p>
<p>在“时间类型”的参数位置，通过添加“day”, “hour”, “second”等关键词，来规定计算天数差、小时数差、还是分钟数差。</p>
</blockquote>
<h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a><code>limit</code></h2><p><code>limit n</code>表示返回查询结果中前n条数据</p>
<p><code>limit n,m</code>表示从第n+1条数据开始，取m条数据</p>
<h2 id="offset"><a href="#offset" class="headerlink" title="offset"></a><code>offset</code></h2><p><code>offset n</code>表示跳过n条数据</p>
<h2 id="ifnull"><a href="#ifnull" class="headerlink" title="ifnull()"></a><code>ifnull()</code></h2><p><code>ifnull(a,b)</code></p>
<blockquote>
<p>如果a不为空，则返回a</p>
<p>否则，返回b</p>
</blockquote>
<h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><p>解决<strong>排名问题</strong>，<strong>topN问题</strong></p>
<blockquote>
<p><code>rank()</code>，并列会占用下一名次的位置，如1，1，1，4</p>
<p><code>dense_rank()</code>，并列不占用下一名次的位置，如1，1，1，2</p>
<p><code>row_number()</code>，不考虑并列</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>成绩</th>
<th>rank</th>
<th>dense_rank</th>
<th>row_number</th>
</tr>
</thead>
<tbody>
<tr>
<td>98</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>98</td>
<td>1</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>98</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>85</td>
<td>4</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>83</td>
<td>5</td>
<td>3</td>
<td>5</td>
</tr>
</tbody>
</table>
</div>
<h2 id="多表联结"><a href="#多表联结" class="headerlink" title="多表联结"></a>多表联结</h2><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/2f5ff13e22b0494e19d327562d970016bbaa88569c0590fa86f9c7dde947bc71-6.jpg" alt></p>
<p><a href="https://leetcode-cn.com/problems/customers-who-never-order/solution/tu-jie-sqlmian-shi-ti-cha-zhao-bu-zai-biao-li-de-s/">感谢</a></p>
<h2 id="优先顺序"><a href="#优先顺序" class="headerlink" title="优先顺序"></a>优先顺序</h2><p><code>where</code>&gt;<code>group by</code>&gt;<code>having</code>&gt;<code>order by</code></p>
<h1 id="各种模板"><a href="#各种模板" class="headerlink" title="各种模板"></a>各种模板</h1><h2 id="TopN"><a href="#TopN" class="headerlink" title="TopN"></a>TopN</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># topN问题 sql模板<br>select *<br>from (<br>   select *, <br>          row_number() over (partition by 要分组的列名<br>                       order by 要排序的列名 desc) as 排名<br>   from 表名) as a<br>where 排名 &lt;&#x3D; N;<br></code></pre></div></td></tr></table></figure>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>该笔记参考了LeeCode许多优秀大佬的题解</p>
<p>在此由衷感谢</p>
<p><a href="https://leetcode-cn.com/u/houzidata/">猴子数据分析</a></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Transformer简单学习</title>
    <url>/5d3de09a/</url>
    <content><![CDATA[<h1 id="简单了解"><a href="#简单了解" class="headerlink" title="简单了解"></a>简单了解</h1><p>Transformer是一个基于Attention机制的encoder-decoder模型，丢弃了循环与卷积结构，而<strong>采用Self-Attention机制</strong>。</p>
<p>与RNN模型不同，Transformer模型把序列中的所有word进行<strong>并行</strong>处理，同时使用<strong>Self-Attention</strong>机制对句子中所有word之间的关系直接进行建模，没有考虑各自的位置。</p>
<h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><h2 id="采用encoder-decoder架构"><a href="#采用encoder-decoder架构" class="headerlink" title="采用encoder-decoder架构"></a>采用encoder-decoder架构</h2><p>Transformer将多个encoder-decoder堆叠在了一起</p>
<p>简化版</p>
<p>encoder</p>
<blockquote>
<p>包含self-attention和Feed Forward Neural Network</p>
<p>self-attention让当前节点不仅仅关注当前的word，还能获得上下文的语义</p>
</blockquote>
<p>decoder</p>
<blockquote>
<p>包含Self-Attention，Encoder-Decoder Attention和Feed Froward Neural Network</p>
<p>Encoder-Decoder Attention 让当前节点获取当前需要重点关注的内容</p>
</blockquote>
<p>Transformer首先对输入的数据进行embedding，然后将得到的数据输入到encoder，self-attention对数据进行处理过后传入Feed Froward，Feed Froward进行并行计算，将得到的输出传入到下一个encoder</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/pic2.png" alt="简化版" style="zoom:50%;"></p>
<h2 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h2><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/transformer_encoder.png" alt="Encoder" style="zoom:50%;"></p>
<p>组成</p>
<blockquote>
<ul>
<li>Multi-Head Attention</li>
<li>Residual connection</li>
<li>Normalisation</li>
<li>Position-wise Feed-Forward Networks</li>
</ul>
</blockquote>
<h2 id="Self-Attention"><a href="#Self-Attention" class="headerlink" title="Self-Attention"></a>Self-Attention</h2><p>Self-Attention利用了Attention机制，计算每个word与其他所有word(包括自身)之间的关联，然后根据<strong>对齐模型</strong>分布得到加权表示作为该word的新表示，同时考虑了上下文信息。</p>
<p>Self-Attention 可以捕获句子中长距离的相互依赖特征，从而缩短远距离依赖</p>
<p>采用了残差网络的short-cut机制（还未理解）</p>
<p><strong>处理过程</strong></p>
<p>首先，Self-Attention用embedding向量与随机初始化的矩阵相乘，生成三个向量Query，Key，Value。</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/pic4.png" alt="Self-Attention处理过程1" style="zoom:67%;"></p>
<p>计算Self-Attention的score，该score决定了对每个位置encoder一个word时，对输入句子其余word的关注程度。由Query与Key进行点乘计算得到。</p>
<p>然后进行score归一化，将点乘结果乘以一个缩放因子$\frac{1}{\sqrt{d_k}}$（该缩放因子可以防止结果过大，使得结果经过softmax计算后落入饱和区间）</p>
<p>再进行<strong>softmax</strong>计算，得到每个word对当前位置的word的相关性大小。</p>
<p>对Value与softmax的值进行加权，得到Self-Attention在当前节点的值</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/pic7.png" alt="Self-Attention处理过程2" style="zoom: 67%;"></p>
<p>也可以采用矩阵方式，直接计算出Query，Key，Value矩阵，来提高计算速度</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/pic8.png" alt="矩阵计算方式" style="zoom: 50%;"></p>
<p><img src="/5d3de09a/pic9.png" alt="矩阵计算方式" style="zoom:50%;"></p>
<p>该Attention又被称为<strong>Scaled Dot-Product Attention</strong></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/a7445eec-3dd8-4e62-948c-e3c3f9b3a987_self-attention_head.svg" alt="Scaled Dot-Product Attention" style="zoom: 50%;"></p>
<h2 id="Multi-Headed-Attention"><a href="#Multi-Headed-Attention" class="headerlink" title="Multi-Headed Attention"></a>Multi-Headed Attention</h2><p>初始化多组Q，K，V矩阵，然后对于生成的多个特征矩阵Z进行压缩(列排列)得到一个大矩阵，然后用一个随机初始化矩阵与该矩阵相乘，得到最终矩阵</p>
<script type="math/tex; mode=display">
Attention(Q,K,V)=softmax(\frac{QK^T}{\sqrt{d_k}})V</script><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/pic13.png" alt="Multi-Headed Attention流程" style="zoom: 50%;"></p>
<p>最终，生成的Z被传入下一个模块，Position-wise Feed-Forward Network</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/ee0b5ada-211f-4d33-ba6b-91a2ace50714_self-attention_multihead.svg" alt="MSA" style="zoom:50%;"></p>
<h2 id="Add-amp-Norm"><a href="#Add-amp-Norm" class="headerlink" title="Add &amp; Norm"></a>Add &amp; Norm</h2><p>计算公式</p>
<script type="math/tex; mode=display">
LayerNorm(X+MultiHeadAttention(X))\\
LayerNorm(X+FeedForward(X))</script><p>X表示<strong>Multi-Head Attention</strong> 或者 <strong>Feed Forward</strong> 的输入，<strong>MultiHeadAttention(X)</strong> 和 <strong>FeedForward(X)</strong> 表示输出</p>
<p><strong>Add</strong>表示Residual connection，通常用于解决多层网络训练的问题，可以让网络只关注当前差异的部分，在 ResNet 中经常用到。</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/640" alt="Add" style="zoom:50%;"></p>
<p><strong>Norm</strong>表示Layer Normalisation，通常用于 RNN 结构，Layer Normalization 会将每一层神经元的输入都转成均值方差都一样的，这样可以加快收敛。</p>
<h2 id="Position-wise-Feed-Forward-Network"><a href="#Position-wise-Feed-Forward-Network" class="headerlink" title="Position-wise Feed-Forward Network"></a>Position-wise Feed-Forward Network</h2><p>一个前馈全连接网络，一共两层</p>
<p>第一层的激活函数是 ReLU，</p>
<p>第二层是一个线性激活函数， $FFN(Z)=max(0,ZW_1+b_1)W_2+b_2$</p>
<h2 id="Positional-Encoding"><a href="#Positional-Encoding" class="headerlink" title="Positional Encoding"></a>Positional Encoding</h2><p>Transformer在encoder和decoder之间引入一个额外向量<strong>Position Encoding</strong>，该向量可以决定当前word的位置，从而使Transformer可以解释输入序列中word的顺序。</p>
<p>计算方法</p>
<script type="math/tex; mode=display">
PE(pos,2i)=sin(\frac{pos}{10000^{\frac{2i}{d_model}}})\\
PE(pos,2i+1)=cos(\frac{pos}{10000^{\frac{2i}{d_model}}})</script><p>然后将Position Encoding与embedding相加，作为输入传入下一层</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/pic16.png" alt="Position Encoding" style="zoom: 50%;"></p>
<h2 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h2><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/pic24.jpg" alt="Decoder" style="zoom:50%;"></p>
<p>相比于Encoder，在最下层多了一个<strong>Masked Multi-Head Attention</strong></p>
<p><strong>Masked</strong></p>
<p>在解码过程中，结果是一个time_step一个time_step生成的，在当前time_step解码输出只能依赖当前时刻之前的输出，所以使用 Mask 将后面的掩盖</p>
<p>两种方法</p>
<blockquote>
<ul>
<li>Padding Mask</li>
<li>Sequence Mask</li>
</ul>
</blockquote>
<p> <img src="https://gitee.com/mihaoyoung/blog_image/raw/master/multi_head_attention.png" alt="Masked"></p>
<p><strong>输出</strong></p>
<p>当Decoder层全部执行完毕后，通过在结尾加一个全连接层和softmax层，将输出的向量映射为我们需要的word</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/pic23.png" alt="output" style="zoom:50%;"></p>
<h1 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h1><p><a href="https://mp.weixin.qq.com/s/m0pphf3ZA-ieymkU1iWK5g">Transformer 模型详解</a></p>
]]></content>
      <categories>
        <category>Transformer</category>
      </categories>
      <tags>
        <tag>Transformer</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot:MyBatis-plus学习</title>
    <url>/a9385db7/</url>
    <content><![CDATA[<p>这是博主在初学使用MyBatis-plus时遇到的一些问题和经验</p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>博主使用idea来创建springboot项目</p>
<p>创建时所勾选的配置</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210403002251625.png" alt></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210403002311874.png" alt></p>
<p>博主使用MySQL数据库</p>
<p><img src="/a9385db7/image-20210403002412963.png" alt></p>
<p>导入依赖</p>
<p>进入<a href="https://baomidou.com/guide/">MyBatis-plus官网</a>查询所需要的依赖</p>
<p><strong>当我们配置环境时，应养成首先查询官网手册</strong>的好习惯，之后在查找相关技术博客解决遇到的问题。</p>
<p>在pom.xml添加以下代码</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>博主就是一开始没加这个,然后后面使用代码生成工具虽然没问题,但没法使用所生成的代码文件,找了很多技术大佬博客,也是没解决问题</p>
<p>所以,养成习惯,<strong>官方文档必看!!!</strong></p>
<h1 id="使用代码生成工具"><a href="#使用代码生成工具" class="headerlink" title="使用代码生成工具"></a>使用代码生成工具</h1><p>在pom.xml加入以下依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis plus 代码生成器 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>配置数据库环境</p>
<p>修改application.yml文件</p>
<figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://你的数据库地址/数据库名?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">密码</span><br>  <span class="hljs-attr">jackson:</span><br>    <span class="hljs-attr">date-format:</span> <span class="hljs-string">yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss</span><br>    <span class="hljs-attr">time-zone:</span> <span class="hljs-string">GMT+8</span><br>    <span class="hljs-attr">serialization:</span><br>      <span class="hljs-attr">write-dates-as-timestamps:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">auto-mapping-behavior:</span> <span class="hljs-string">full</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:mapper/**/*Mapper.xml</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-comment"># 逻辑删除配置</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-comment"># 删除前</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">1</span><br>      <span class="hljs-comment"># 删除后</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure>
<p>在com.xxx.xxx下创建代码生成工具类</p>
<p>同样在<a href="https://baomidou.com/guide/">MyBatis-plus官网</a>有该代码的样例模板,读者可以参考按照需要修改</p>
<p>记得,数据源配置和刚刚的application.yml配置一致</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.markhub;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.*;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeneratorCode</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 读取控制台内容</span><br><span class="hljs-comment">     * &lt;/p&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">scanner</span><span class="hljs-params">(String tip)</span> </span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        StringBuilder help = <span class="hljs-keyword">new</span> StringBuilder();<br>        help.append(<span class="hljs-string">&quot;请输入&quot;</span> + tip + <span class="hljs-string">&quot;：&quot;</span>);<br>        System.out.println(help.toString());<br>        <span class="hljs-keyword">if</span> (scanner.hasNext()) &#123;<br>            String ipt = scanner.next();<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;<br>                <span class="hljs-keyword">return</span> ipt;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MybatisPlusException(<span class="hljs-string">&quot;请输入正确的&quot;</span> + tip + <span class="hljs-string">&quot;！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 代码生成器</span><br>        AutoGenerator mpg = <span class="hljs-keyword">new</span> AutoGenerator();<br><br>        <span class="hljs-comment">// 全局配置</span><br>        GlobalConfig gc = <span class="hljs-keyword">new</span> GlobalConfig();<br>        String projectPath = System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>        gc.setOutputDir(projectPath + <span class="hljs-string">&quot;/src/main/java&quot;</span>);<br>        gc.setAuthor(<span class="hljs-string">&quot;Mihao&quot;</span>);<br>        gc.setOpen(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span><br>        mpg.setGlobalConfig(gc);<br><br>        <span class="hljs-comment">// 数据源配置</span><br>        DataSourceConfig dsc = <span class="hljs-keyword">new</span> DataSourceConfig();<br>        dsc.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/vueblog?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&quot;</span>);<br>        <span class="hljs-comment">// dsc.setSchemaName(&quot;public&quot;);</span><br>        dsc.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dsc.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dsc.setPassword(<span class="hljs-string">&quot;709011730&quot;</span>);<br>        mpg.setDataSource(dsc);<br><br>        <span class="hljs-comment">// 包配置</span><br>        PackageConfig pc = <span class="hljs-keyword">new</span> PackageConfig();<br>        pc.setModuleName(<span class="hljs-keyword">null</span>);<br>        pc.setParent(<span class="hljs-string">&quot;com.markhub&quot;</span>);<br>        mpg.setPackageInfo(pc);<br><br>        <span class="hljs-comment">// 自定义配置</span><br>        InjectionConfig cfg = <span class="hljs-keyword">new</span> InjectionConfig() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initMap</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-comment">// to do nothing</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// 如果模板引擎是 freemarker</span><br>        String templatePath = <span class="hljs-string">&quot;/templates/mapper.xml.ftl&quot;</span>;<br>        <span class="hljs-comment">// 如果模板引擎是 velocity</span><br>        <span class="hljs-comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span><br><br>        <span class="hljs-comment">// 自定义输出配置</span><br>        List&lt;FileOutConfig&gt; focList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">// 自定义配置会被优先输出</span><br>        focList.add(<span class="hljs-keyword">new</span> FileOutConfig(templatePath) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">outputFile</span><span class="hljs-params">(TableInfo tableInfo)</span> </span>&#123;<br>                <span class="hljs-comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span><br>                <span class="hljs-keyword">return</span> projectPath + <span class="hljs-string">&quot;/src/main/resources/mapper/&quot;</span> + pc.getModuleName()<br>                        + <span class="hljs-string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="hljs-string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        cfg.setFileCreate(new IFileCreate() &#123;</span><br><span class="hljs-comment">            @Override</span><br><span class="hljs-comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span><br><span class="hljs-comment">                // 判断自定义文件夹是否需要创建</span><br><span class="hljs-comment">                checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);</span><br><span class="hljs-comment">                if (fileType == FileType.MAPPER) &#123;</span><br><span class="hljs-comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span><br><span class="hljs-comment">                    return !new File(filePath).exists();</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                // 允许生成模板文件</span><br><span class="hljs-comment">                return true;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;);</span><br><span class="hljs-comment">        */</span><br>        cfg.setFileOutConfigList(focList);<br>        mpg.setCfg(cfg);<br><br>        <span class="hljs-comment">// 配置模板</span><br>        TemplateConfig templateConfig = <span class="hljs-keyword">new</span> TemplateConfig();<br><br>        <span class="hljs-comment">// 配置自定义输出模板</span><br>        <span class="hljs-comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span><br>        <span class="hljs-comment">// templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span><br>        <span class="hljs-comment">// templateConfig.setService();</span><br>        <span class="hljs-comment">// templateConfig.setController();</span><br><br>        templateConfig.setXml(<span class="hljs-keyword">null</span>);<br>        mpg.setTemplate(templateConfig);<br><br>        <span class="hljs-comment">// 策略配置</span><br>        StrategyConfig strategy = <span class="hljs-keyword">new</span> StrategyConfig();<br>        strategy.setNaming(NamingStrategy.underline_to_camel);<br>        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<br>        <span class="hljs-comment">//strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);</span><br>        strategy.setEntityLombokModel(<span class="hljs-keyword">true</span>);<br>        strategy.setRestControllerStyle(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">// 公共父类</span><br>        <span class="hljs-comment">//strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;);</span><br>        <span class="hljs-comment">// 写于父类中的公共字段</span><br>        <span class="hljs-comment">//strategy.setSuperEntityColumns(&quot;id&quot;);</span><br>        strategy.setInclude(scanner(<span class="hljs-string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="hljs-string">&quot;,&quot;</span>));<br>        strategy.setControllerMappingHyphenStyle(<span class="hljs-keyword">true</span>);<br>        strategy.setTablePrefix(<span class="hljs-string">&quot;m_&quot;</span>);<br>        mpg.setStrategy(strategy);<br>        mpg.setTemplateEngine(<span class="hljs-keyword">new</span> FreemarkerTemplateEngine());<br>        mpg.execute();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>
<h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="项目启动失败"><a href="#项目启动失败" class="headerlink" title="项目启动失败"></a>项目启动失败</h2><p>成功使用代码生成器，创建代码后，项目无法启动</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210401231655943.png" alt></p>
<p><strong>解决方案</strong></p>
<p>在Mapper里的文件加上注解，<code>@Mapper</code></p>
<h1 id="持续更新ing"><a href="#持续更新ing" class="headerlink" title="持续更新ing"></a>持续更新ing</h1><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://www.cnblogs.com/liuyj-top/p/12976396.html">Springboot整合MybatisPlus（超详细）完整教程~</a></p>
<p><a href="https://baomidou.com/guide/">MyBatis-plus官网</a></p>
]]></content>
      <categories>
        <category>Sringboot</category>
      </categories>
      <tags>
        <tag>Sringboot</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>next8.0主题配置</title>
    <url>/4c5284d4/</url>
    <content><![CDATA[<h1 id="next主题安装及美化"><a href="#next主题安装及美化" class="headerlink" title="next主题安装及美化"></a>next主题安装及美化</h1><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p><a href="https://theme-next.js.org/">next主题官方文档</a></p>
<p>使用工具 Notepad++、Typora、Git</p>
<blockquote>
<p>博主一开始直接使用next 8.2.0版本（当时最新版本），由于该版本不再支持valine评论系统，所以博主安装了next 8.0.0 版本</p>
<p>但8.2.0支持其它评论系统，读者可以在<a href="https://theme-next.js.org/docs/third-party-services/comments.html">官方文档</a>阅读查看</p>
</blockquote>
<a id="more"></a>
<p>在你的博客路径下</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">$ cd blog<br></code></pre></div></td></tr></table></figure>
<p>安装最新版next</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">$ git clone https://github.com/next-theme/hexo-theme-next themes/next<br></code></pre></div></td></tr></table></figure>
<p>镜像安装，速度较快（推荐）</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">$ git clone https://gitlab.com/hexo-theme-next/hexo-theme-next themes/next<br></code></pre></div></td></tr></table></figure>
<p>指定安装版本text</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">$ git clone --branch v8.0.0 https://github.com/next-theme/hexo-theme-next themes/next<br></code></pre></div></td></tr></table></figure>
<p>镜像安装，速度较快（推荐）</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">$ git clone --branch v8.0.0 https://gitlab.com/hexo-theme-next/hexo-theme-next themes/next<br></code></pre></div></td></tr></table></figure>
<p>然后将你博客根目录下的_config.yml打开（使用 Notepad++ 打开）</p>
<p>搜索themes，将里面的值改为next</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">theme: next<br></code></pre></div></td></tr></table></figure>
<h2 id="text基本配置信息"><a href="#text基本配置信息" class="headerlink" title="text基本配置信息"></a>text基本配置信息</h2><blockquote>
<p>由于next版本升级后，官方不建议直接修改next文件夹下的_config.yml</p>
<p>因此我们将 themes/next/config.yml 复制到你的博客根目录，重命名为_config.next.yml</p>
</blockquote>
<p>选择Schemes</p>
<p>打开 _config.next.yml，通过 Ctrl+F 搜索Scheme Settings，里面提供了四种模式，可以根据自己的喜好更改。</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text"># Schemes<br>#scheme: MuseC<br>#scheme: Mist<br>scheme: Pisces<br>#scheme: Gemini<br></code></pre></div></td></tr></table></figure>
<h2 id="设置菜单栏"><a href="#设置菜单栏" class="headerlink" title="设置菜单栏"></a>设置菜单栏</h2><p>搜索menu，可以设置菜单显示内容，此版本next支持font awesome图标，可以去<a href="https://link.zhihu.com/?target=https%3A//fontawesome.com/">官网</a>更换其它图标。</p>
<p>若出现页面404情况，可将||前面空格删去</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">menu:<br> home: / || fa fa-home<br> #about: /about/ || fa fa-user<br> tags: /tags/ || fa fa-tags<br> categories: /categories/ || fa fa-th<br> archives: /archives/ || fa fa-archive<br> #schedule: /schedule/ || fa fa-calendar<br> #sitemap: /sitemap.xml || fa fa-sitemap<br> #commonweal: /404/ || fa fa-heartbeat<br></code></pre></div></td></tr></table></figure>
<h2 id="开启tags标签栏"><a href="#开启tags标签栏" class="headerlink" title="开启tags标签栏"></a>开启tags标签栏</h2><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">$ cd blog<br>$ hexo new page tags<br></code></pre></div></td></tr></table></figure>
<p>此时在你的 source/ 文件夹下会出现一个对应的tags文件夹，打开index.md（使用Typora）并编辑为：</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">---<br>title: tags<br>date: 2021-02-19 20:08:14<br>type: tags<br>---<br></code></pre></div></td></tr></table></figure>
<p>其它菜单栏同理操作，编辑各自对应type类型即可</p>
<h2 id="设置新建文章模板"><a href="#设置新建文章模板" class="headerlink" title="设置新建文章模板"></a>设置新建文章模板</h2><p>新建文章</p>
<figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> blog<br><span class="hljs-variable">$</span> hexo new <span class="hljs-string">&quot;文章名称&quot;</span><br></code></pre></div></td></tr></table></figure>
<p>进入 scaffolds 文件夹，打开 post.md 文件，根据你刚刚开启的菜单栏进行修改</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br>tags:<br>categories:<br></code></pre></div></td></tr></table></figure>
<h2 id="设置超链接样式"><a href="#设置超链接样式" class="headerlink" title="设置超链接样式"></a>设置超链接样式</h2><p>在根目录的source里新建 _data/styles.styl 文件，然后进入_config.next.yml，搜索 custom_file_path，删去下面style前面的#</p>
<figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">custom_file_path:<br>  #head: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>head.njk<br>  #header: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>header.njk<br>  #sidebar: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>sidebar.njk<br>  #postMeta: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>post-meta.njk<br>  #postBodyEnd: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>post-body-end.njk<br>  #footer: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>footer.njk<br>  #bodyEnd: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>body-end.njk<br>  #variable: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>variables.styl<br>  #mixin: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/mi</span>xins.styl<br>  style: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>styles.styl<br></code></pre></div></td></tr></table></figure>
<p>然后打开刚刚新建的 styles.styl ，添加以下信息，颜色代码可在该<a href="https://htmlcolorcodes.com/zh/">网站</a>查询</p>
<figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">// 修改链接样式<br>// 修改文章内<br><span class="hljs-selector-class">.post-body</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">a</span>&#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#0593d3</span>;<br>  <span class="hljs-attribute">border-bottom</span>: none;<br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#E71DF7</span>;<br>  &#125;<br>&#125;<br>// 修改侧栏<br><span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.exturl</span> &#123;<br>  <span class="hljs-attribute">border-bottom</span>: none;<br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#76C4F5</span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="菜单侧栏设置"><a href="#菜单侧栏设置" class="headerlink" title="菜单侧栏设置"></a>菜单侧栏设置</h2><p>打开 _config.next.yml ，搜索sidebar</p>
<figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">sidebar</span>:<span class="hljs-string"></span><br><span class="hljs-comment">  # Sidebar Position.</span><br>  <span class="hljs-attr">position</span>: <span class="hljs-string">left</span><br><span class="hljs-comment">  #position: right</span><br><br><span class="hljs-comment">  # Manual define the sidebar width. If commented, will be default for:</span><br><span class="hljs-comment">  # Muse | Mist: 320</span><br><span class="hljs-comment">  # Pisces | Gemini: 240</span><br><span class="hljs-comment">  #width: 300</span><br><br><span class="hljs-comment">  # Sidebar Display (only for Muse | Mist), available values:</span><br><span class="hljs-comment">  #  - post    expand on posts automatically. Default.</span><br><span class="hljs-comment">  #  - always  expand for all pages automatically.</span><br><span class="hljs-comment">  #  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="hljs-comment">  #  - remove  totally remove sidebar including sidebar toggle.</span><br>  <span class="hljs-attr">display</span>: <span class="hljs-string">post</span><br><br><span class="hljs-comment">  # Sidebar padding in pixels.</span><br>  <span class="hljs-attr">padding</span>: <span class="hljs-string">18</span><br><span class="hljs-comment">  # Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span><br>  <span class="hljs-attr">offset</span>: <span class="hljs-string">12</span><br></code></pre></div></td></tr></table></figure>
<h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><p>打开 _config.next.yml ，搜索Sidebar Avatar</p>
<p>将你的头像图片命名好，我的是header.jpg，然后放入 themes/next/source/images  里</p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Sidebar Avatar</span><br><span class="hljs-attr">avatar:</span><br>  <span class="hljs-comment"># Replace the default image and set the url here.</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">/images/header.jpg</span><br>  <span class="hljs-comment"># If true, the avatar will be dispalyed in circle.</span><br>  <span class="hljs-attr">rounded:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># If true, the avatar will be rotated with the cursor.</span><br>  <span class="hljs-attr">rotated:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure>
<h2 id="设置代码高亮"><a href="#设置代码高亮" class="headerlink" title="设置代码高亮"></a>设置代码高亮</h2><p>进入 _config.yml ，搜索hightlight，将auto_detect改为true:</p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span><br></code></pre></div></td></tr></table></figure>
<p>进入 _config.next.yml ，搜索 codeblock ，修改theme下的主题，可以该<a href="https://theme-next.js.org/highlight/">网站</a>查找自己喜欢的代码高亮样式</p>
<figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">codeblock:</span><br>  <span class="hljs-meta"># Code Highlight theme</span><br>  <span class="hljs-meta"># All available themes: https:<span class="hljs-comment">//theme-next.js.org/highlight/</span></span><br><span class="hljs-symbol">  theme:</span><br><span class="hljs-symbol">    light:</span> tomorrow-night-eighties<br><span class="hljs-symbol">    dark:</span> tomorrow-night-eighties<br><span class="hljs-symbol">  prism:</span><br><span class="hljs-symbol">    light:</span> prism<br><span class="hljs-symbol">    dark:</span> prism-dark<br>  <span class="hljs-meta"># Add copy button on codeblock</span><br><span class="hljs-symbol">  copy_button:</span><br><span class="hljs-symbol">    enable:</span> false<br>    <span class="hljs-meta"># Available values: default | flat | mac</span><br><span class="hljs-symbol">    style:</span><br></code></pre></div></td></tr></table></figure>
<h2 id="添加阅读全文按钮和修改其样式"><a href="#添加阅读全文按钮和修改其样式" class="headerlink" title="添加阅读全文按钮和修改其样式"></a>添加阅读全文按钮和修改其样式</h2><p>添加按钮</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">文章中添加<span class="hljs-comment">&lt;!--more--&gt;</span>,你想再哪儿截止就在哪儿添加<br></code></pre></div></td></tr></table></figure>
<p>修改样式</p>
<p>进入之前的 styles.styl ，添加以下代码，读者可以根据自己喜好进行修改</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">// [Read More]按钮样式<br>.post-button .btn &#123;<br>    color: #555 !important;<br>    background-color: rgb(255, 255, 255);<br>    border-radius: 3px;<br>    font-size: 15px;<br>    box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35);<br>    border: none !important;<br>    transition-property: unset;<br>    padding: 0px 15px;<br>&#125;<br><br>.post-button .btn:hover &#123;<br>    color: rgb(255, 255, 255) !important;<br>    border-radius: 3px;<br>    font-size: 15px;<br>    box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35);<br>    background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="修改标题栏颜色"><a href="#修改标题栏颜色" class="headerlink" title="修改标题栏颜色"></a>修改标题栏颜色</h2><p>进入之前的 styles.styl ，添加以下代码，读者可以根据自己喜好进行修改</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">.site-meta &#123;<br>  background: #FF8C00; //修改为自己喜欢的颜色<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="添加本地搜索功能"><a href="#添加本地搜索功能" class="headerlink" title="添加本地搜索功能"></a>添加本地搜索功能</h2><p>安装 <a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fflashlab%2Fhexo-generator-search">hexo-generator-searchdb</a> 插件</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">$ npm install hexo-generator-searchdb --save<br></code></pre></div></td></tr></table></figure>
<p>打开 _config.yml ，添加以下代码</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text"># 搜索<br>search:<br>  path: search.xml<br>  field: post<br>  format: html<br>  limit: 10000<br></code></pre></div></td></tr></table></figure>
<p>打开 _config.next.yml ，搜索local_search </p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">local_search:<br>  enable: true<br>  # If auto, trigger search by changing input.<br>  # If manual, trigger search by pressing enter key or search button.<br>  trigger: auto<br>  # Show top n results per article, show all results by setting to -1<br>  top_n_per_article: 1<br>  # Unescape html strings to the readable one.<br>  unescape: false<br>  # Preload the search data when the page loads.<br>  preload: false<br></code></pre></div></td></tr></table></figure>
<h2 id="添加个人社交链接"><a href="#添加个人社交链接" class="headerlink" title="添加个人社交链接"></a>添加个人社交链接</h2><p>打开 _config.next.yml ，搜索social</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">social:<br>  GitHub: https://github.com/xxxxx || fab fa-github<br>  E-Mail: mailto:xxxxxx@gmail.com || fa fa-envelope<br>  QQ-Mail: mailto:xxxxxx@qq.com || fab fa-qq<br>  #Weibo: https://weibo.com/yourname || fab fa-weibo<br>  #Google: https://plus.google.com/yourname || fab fa-google<br>  #Twitter: https://twitter.com/yourname || fab fa-twitter<br>  #FB Page: https://www.facebook.com/yourname || fab fa-facebook<br>  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow<br>  #YouTube: https://youtube.com/yourname || fab fa-youtube<br>  #Instagram: https://instagram.com/yourname || fab fa-instagram<br>  #Skype: skype:yourname?call|chat || fab fa-skype<br></code></pre></div></td></tr></table></figure>
<h2 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h2><p>打开 _config.next.yml ，搜索 links</p>
<p>链接格式设置，block 一行一个链接，inline一行多个链接</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">links_settings:<br>  icon: fa fa-globe<br>  title: Links<br>  # Available values: block | inline<br>  layout: inline<br></code></pre></div></td></tr></table></figure>
<p>添加友情链接</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">links:<br>  #Title: http://yoursite.com<br>  Bing: https://cn.bing.com/<br>  Google: https://www.google.com/<br>  BiliBili: https://www.bilibili.com/<br>  YouTube: https://www.youtube.com/<br>  知乎: https://www.zhihu.com/<br></code></pre></div></td></tr></table></figure>
<h2 id="修改文章底部tag的"><a href="#修改文章底部tag的" class="headerlink" title="修改文章底部tag的"></a>修改文章底部tag的</h2><p>进入themes\next\layout_macro，打开post.njk，搜索” rel=”tag”，将后面的替换成<code>&lt;i class=&quot;fas fa-tags&quot;&gt;&lt;/i&gt;</code></p>
<h2 id="网站logo"><a href="#网站logo" class="headerlink" title="网站logo"></a>网站logo</h2><p>从<a href="https://link.zhihu.com/?target=http%3A//www.iconfont.cn/">阿里巴巴矢量图标库</a>查找自己喜欢的的图标或者在<a href="https://www.bitbug.net/">比特虫</a>制作图标</p>
<p>将制作好图标重新命名，然后放入image文件夹中</p>
<p>打开_config.next.yml，搜索favicon，将刚刚重新命名的文件填入</p>
<figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">favicon:</span><br><span class="hljs-symbol">  small:</span> <span class="hljs-meta-keyword">/images/</span>favicon_16x16.ico<br><span class="hljs-symbol">  medium:</span> <span class="hljs-meta-keyword">/images/</span>favicon_32x32.ico<br></code></pre></div></td></tr></table></figure>
<h2 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h2><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">$ cd themes/next<br>$ git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest<br></code></pre></div></td></tr></table></figure>
<p>打开_config.next.yml ，添加以下信息</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text"># Canvas-nest<br># Dependencies: https://github.com/theme-next/theme-next-canvas-nest<br>canvas_nest:<br>  enable: true<br>  onmobile: true # display on mobile or not<br>  color: &quot;0,0,255&quot; # RGB values, use &#x27;,&#x27; to separate<br>  opacity: 0.5 # the opacity of line: 0~1<br>  zIndex: -1 # z-index property of the background<br>  count: 99 # the number of lines<br></code></pre></div></td></tr></table></figure>
<p>然后在_data文件夹下新建footer.njk，添加以下信息</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">&lt;script color=&quot;0,0,255&quot; opacity=&quot;0.5&quot; zIndex=&quot;-1&quot; count=&quot;99&quot; src=&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>
<p>打开_config.next.yml，搜索<code>custom_file_path</code>，删去footer前的#</p>
<figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">custom_file_path:<br>  #head: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>head.njk<br>  #header: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>header.njk<br>  #sidebar: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>sidebar.njk<br>  #postMeta: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>post-meta.njk<br>  #postBodyEnd: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>post-body-end.njk<br>  footer: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>footer.njk<br>  #bodyEnd: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>body-end.njk<br>  #variable: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>variables.styl<br>  #mixin: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/mi</span>xins.styl<br>  style: <span class="hljs-keyword">source</span><span class="hljs-regexp">/_data/</span>styles.styl<br></code></pre></div></td></tr></table></figure>
<h2 id="添加文章计数功能"><a href="#添加文章计数功能" class="headerlink" title="添加文章计数功能"></a>添加文章计数功能</h2><p>参考<a href="https://theme-next.js.org/docs/theme-settings/posts.html">官方文档</a></p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">$ npm install hexo-word-counter<br></code></pre></div></td></tr></table></figure>
<p>打开_config.yml，添加以下信息</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">symbols_count_time:<br>  symbols: true # 文章字数统计<br>  time: true # 文章时长统计<br>  total_symbols: true # 全局字数统计<br>  total_time: true # 全局时长统计<br>  exclude_codeblock: false  # 排除代码字数统计<br>  awl: 4<br>  wpm: 275<br></code></pre></div></td></tr></table></figure>
<p>打开_config.next.yml，搜索symbols_count_time</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">symbols_count_time:<br>  separated_meta: true #分行显示<br>  item_text_total: true #显示文本<br></code></pre></div></td></tr></table></figure>
<h2 id="添加阅读进度条"><a href="#添加阅读进度条" class="headerlink" title="添加阅读进度条"></a>添加阅读进度条</h2><p>打开 _config.next.yml ，搜索reading</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text"># Reading progress bar<br>reading_progress:<br>  enable: true<br>  # Available values: top | bottom<br>  position: top<br>  color: &quot;#FDDF96&quot;<br>  height: 5px<br></code></pre></div></td></tr></table></figure>
<h2 id="修改博客底部显示"><a href="#修改博客底部显示" class="headerlink" title="修改博客底部显示"></a>修改博客底部显示</h2><p>打开 _config.next.yml ，搜索 <code>footer</code></p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">footer:<br>  # Specify the date when the site was setup. If not defined, current year will be used.<br>  #since: 2021<br><br>  # Icon between year and copyright info.<br>  icon:<br>    # Icon name in Font Awesome. See: https://fontawesome.com/icons<br>    name: fa fa-heart<br>    # If you want to animate the icon, set it to true.<br>    animated: true<br>    # Change the color of icon, using Hex Code.<br>    color: &quot;#ff0000&quot;<br><br>  # If not defined, `author` from Hexo `_config.yml` will be used.<br>  copyright:<br><br>  # Powered by Hexo &amp; NexT<br>  powered: false<br></code></pre></div></td></tr></table></figure>
<h2 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h2><p>打开 footer.njk ,添加以下信息</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">&lt;span&gt;本站已运行&lt;span id=&quot;showDays&quot;&gt;&lt;/span&gt;&lt;/span&gt;<br>&lt;script&gt;<br>  var seconds = 1000;<br>  var minutes = seconds * 60;<br>  var hours = minutes * 60;<br>  var days = hours * 24;<br>  var years = days * 365;<br>  var birthDay = Date.UTC(2021,02,20,08,00,00); // 这里设置建站时间<br>  setInterval(function() &#123;<br>    var today = new Date();<br>    var todayYear = today.getFullYear();<br>    var todayMonth = today.getMonth()+1;<br>    var todayDate = today.getDate();<br>    var todayHour = today.getHours();<br>    var todayMinute = today.getMinutes();<br>    var todaySecond = today.getSeconds();<br>    var now = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);<br>    var diff = now - birthDay;<br>    var diffYears = Math.floor(diff/years);<br>    var diffDays = Math.floor((diff/days)-diffYears*365);<br>    var diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours);<br>    var diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes);<br>    var diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);<br>      document.getElementById(&#x27;showDays&#x27;).innerHTML=&quot;&quot;+diffYears+&quot;年&quot;+diffDays+&quot;天&quot;+diffHours+&quot;小时&quot;+diffMinutes+&quot;分钟&quot;+diffSeconds+&quot;秒&quot;;<br>  &#125;, 1000);<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>
<h2 id="添加文章版权声明"><a href="#添加文章版权声明" class="headerlink" title="添加文章版权声明"></a>添加文章版权声明</h2><p>打开 _config.next.yml ,搜索creative_commons</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">creative_commons:<br>  license: by-nc-sa<br>  sidebar: false<br>  post: true<br>  language:<br></code></pre></div></td></tr></table></figure>
<p>打开 _config.yml ,将url设置为自己的域名</p>
<h2 id="图片放大查看"><a href="#图片放大查看" class="headerlink" title="图片放大查看"></a>图片放大查看</h2><p>打开 _config.next.yml ,搜索<code>fancybox</code>, 设置为true</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">cd next<br>$ git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox<br></code></pre></div></td></tr></table></figure>
<h2 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h2><p>打开 style.styl , 添加</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">body &#123;<br> 	background:url(/images/background.jpg);<br> 	background-repeat: no-repeat;<br>    background-attachment:fixed;<br>    background-position:50% 50%;<br>    background-size:cover<br>&#125; <br></code></pre></div></td></tr></table></figure>
<h2 id="修改透明度"><a href="#修改透明度" class="headerlink" title="修改透明度"></a>修改透明度</h2><p>打开 style.styl , 添加</p>
<figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-comment">//博客内容透明化</span><br><span class="hljs-comment">//文章内容的透明度设置</span><br>.main-<span class="hljs-class">inner </span>&#123; <br>   <span class="hljs-comment">// margin-top: 60px;</span><br>   <span class="hljs-comment">// padding: 60px 60px 60px 60px;</span><br><span class="hljs-symbol">    opacity:</span> <span class="hljs-number">0.8</span>;<br>&#125;<br><br><span class="hljs-comment">//侧边框的透明度设置</span><br>.<span class="hljs-class">sidebar </span>&#123;<br><span class="hljs-symbol">  opacity:</span> <span class="hljs-number">0.9</span>;<br>&#125;<br><br><span class="hljs-comment">//菜单栏的透明度设置</span><br>.header-<span class="hljs-class">inner </span>&#123;<br><span class="hljs-symbol">  background:</span> rgba(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.9</span>);<br>&#125;<br><br><span class="hljs-comment">//搜索框（local-search）的透明度设置</span><br>.<span class="hljs-class">popup </span>&#123;<br><span class="hljs-symbol">  opacity:</span> <span class="hljs-number">0.9</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="修改行代码样式"><a href="#修改行代码样式" class="headerlink" title="修改行代码样式"></a><p id="test">修改行代码样式</p></h2><p>打开 style.styl</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">// 代码行样式<br>code&#123;<br>  background: #FCDF9A;<br>  color: #FF7029;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="文章内跳转"><a href="#文章内跳转" class="headerlink" title="文章内跳转"></a>文章内跳转</h2><p>语法:</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">&lt;p id=&quot;XXX&quot;&gt;应该跳转到的地方的文字&lt;/p&gt;<br><br>&lt;a href=&quot;#XXX&quot;&gt;你的跳转按钮的文字&lt;/a&gt;<br></code></pre></div></td></tr></table></figure>
<p>样例</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">&lt;p id=&quot;test&quot;&gt;修改行代码样式&lt;/p&gt;<br>&lt;a href=&quot;#test&quot;&gt;点击查看修改行代码样式&lt;/a&gt;<br></code></pre></div></td></tr></table></figure>
<p><a href="#test">点击查看修改行代码样式</a></p>
<h2 id="链接持久化"><a href="#链接持久化" class="headerlink" title="链接持久化"></a>链接持久化</h2><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">cd blog<br>$ npm install hexo-abbrlink --save<br></code></pre></div></td></tr></table></figure>
<p>打开 _config.yml ,搜索permalink</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">permalink: :abbrlink/<br>abbrlink:<br>  alg: crc32  # 算法：crc16(default) and crc32<br>  rep: hex    # 进制：dec(default) and hex<br>permalink_defaults:<br></code></pre></div></td></tr></table></figure>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><blockquote>
<p>感谢以下文章的帮助</p>
<p><a href="https://zhuanlan.zhihu.com/p/251383216">hexo主题安装以及next8.0主题美化</a></p>
<p><a href="https://www.hxhowl.com/posts/e6f9a475/">blog - hexo NexT主题下配置和美化</a></p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
        <category>next</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>softmax函数</title>
    <url>/bbca9587/</url>
    <content><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://zhuanlan.zhihu.com/p/25723112">详解softmax函数以及相关求导过程</a></p>
<p><a href="https://blog.csdn.net/bitcarmanlee/article/details/82320853">小白都能看懂的softmax详解</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>二分法</title>
    <url>/649c2087/</url>
    <content><![CDATA[<h1 id="掌握算法思想"><a href="#掌握算法思想" class="headerlink" title="掌握算法思想"></a><strong>掌握算法思想</strong></h1><h2 id="while-left-lt-right-的写法"><a href="#while-left-lt-right-的写法" class="headerlink" title="while (left &lt; right)的写法"></a><code>while (left &lt; right)</code>的写法</h2><p>将<code>mid</code>放在左边区间，区间分成 <code>[left..mid]</code> 与 <code>[mid + 1..right]</code>，此时分别设置 <code>right = mid</code> 与 <code>left = mid + 1</code>；</p>
<p>并且把 循环可以继续的条件 写成 <code>while (left &lt; right)</code>。在上面把待搜索区间分成两个部分的情况下，退出循环以后一定会有 <code>left == right</code> 成立，因此在退出循环以后，不需要考虑到底返回 <code>left</code> 还是返回 <code>right</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>	<span class="hljs-comment">// 为了防止 left + right 整形溢出，写成这样</span><br>	<span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>	<span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>		<span class="hljs-comment">// 下一轮搜索区间：[mid + 1..right]</span><br>		left = mid + <span class="hljs-number">1</span>;<br> 	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-comment">// 下一轮搜索区间：[left..mid]</span><br>		right = mid;<br>	&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>在写 if 语句的时候，通常把容易想到的，不容易出错的逻辑写在 if 的里面，这样就把复杂的、容易出错的情况放在了 else 的部分，这样编写代码不容易出错。</p>
<p>如果我们要找的元素的性质比较复杂：例如需要满足「条件 1」并且「条件 2」。我们在编写 if 语句的时候，就可以把其中一个条件取反，就可以达到缩减搜索区间的目的。</p>
</blockquote>
<h2 id="while-left-lt-right-的写法-1"><a href="#while-left-lt-right-的写法-1" class="headerlink" title="while (left &lt;= right)的写法"></a><code>while (left &lt;= right)</code>的写法</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>   	<span class="hljs-comment">// 为了防止 left + right 整形溢出，写成这样</span><br>	<span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>	<span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>		<span class="hljs-keyword">return</span> mid;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>		<span class="hljs-comment">// 下一轮搜索区间：[left..mid - 1]</span><br>		right = mid - <span class="hljs-number">1</span>;<br>	&#125; <span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-comment">// 此时：nums[mid] &lt; target，下一轮搜索区间：[mid + 		1..right]</span><br>		left = mid + <span class="hljs-number">1</span>;<br>	&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>退出循环以后 <code>left = right + 1</code> 成立，因此在退出循环以后，返回 <code>left</code> 或 <code>right + 1</code>。</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] searchRange(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>        &#125;<br>        <span class="hljs-keyword">int</span> firstPosition = findFirstPosition(nums, target);<br>        <span class="hljs-keyword">int</span> lastPosition = findLastPosition(nums, target);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;firstPosition, lastPosition&#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findFirstPosition</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 可能左边还有target</span><br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (left != nums.length &amp;&amp; nums[left] == target)<br>            <span class="hljs-keyword">return</span> left;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findLastPosition</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>                <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>                    left = mid + <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>                    right = mid - <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 可能右边还有target</span><br>                    left = mid + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (right != -<span class="hljs-number">1</span> &amp;&amp; nums[right] == target)<br>                <span class="hljs-keyword">return</span> right;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br></code></pre></div></td></tr></table></figure>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/">题解参考liweiwei1419</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二分法</tag>
      </tags>
  </entry>
  <entry>
    <title>swin-transformer图像分类测试</title>
    <url>/fd80b557/</url>
    <content><![CDATA[<p><strong>本文只阐述博主遇到的问题及其如何解决，仅供参考</strong></p>
<p>如何运行代码测试可以参考这篇Blog</p>
<p><a href="https://www.jianshu.com/p/d50c1855e583">Swin-Transformer分类源码(已跑通)</a></p>
<h1 id="服务器多个cuda问题"><a href="#服务器多个cuda问题" class="headerlink" title="服务器多个cuda问题"></a>服务器多个cuda问题</h1><p>由于博主使用的服务器配置了多个cuda，根据swin-transformer的要求，指定<strong>cuda10.1</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux"># 先用vim打开.bashrc文件<br>vim ~&#x2F;.bashrc<br><br># 加入配置<br>export PATH&#x3D;&quot;$PATH:&#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;bin&quot;<br>export LD_LIBRARY_PATH&#x3D;&quot;$LD_LIBRARY_PATH:&#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;lib64&#x2F;&quot;<br>export LIBRARY_PATH&#x3D;&quot;$LIBRARY_PATH:&#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;lib64&quot;<br><br># 执行修改<br>source ~&#x2F;.bashrc<br></code></pre></div></td></tr></table></figure>
<h1 id="apex相关"><a href="#apex相关" class="headerlink" title="apex相关"></a>apex相关</h1><p>报错信息</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">=&gt; merge config from configs/swin_base_patch4_window7_224.yaml Traceback (most recent call last): File &quot;main.py&quot;, line 302, in &lt;module&gt; assert amp is not None, &quot;amp not installed!&quot; AssertionError: amp not installed! Traceback (most recent call last): File &quot;/home/anaconda3/envs/swin1/lib/python3.7/runpy.py&quot;, line 193, in _run_module_as_main &quot;__main__&quot;, mod_spec)<br>File &quot;/home/anaconda3/envs/swin1/lib/python3.7/runpy.py&quot;, line 85, in _run_code exec(code, run_globals) File &quot;/home/anaconda3/envs/swin1/lib/python3.7/site-packages/torch/distributed/launch.py&quot;, line 260, in &lt;module&gt; main()<br>File &quot;/home/anaconda3/envs/swin1/lib/python3.7/site-packages/torch/distributed/launch.py&quot;, line 256, in main cmd=cmd) subprocess.CalledProcessError: Command &#x27;[&#x27;/home/anaconda3/envs/swin1/bin/python&#x27;, &#x27;-u&#x27;, &#x27;main.py&#x27;, &#x27;--local_rank=0&#x27;, &#x27;--cfg&#x27;, &#x27;configs/swin_base_patch4_window7_224.yaml&#x27;, &#x27;--data-path&#x27;, &#x27;imagenet&#x27;, &#x27;--batch-size&#x27;, &#x27;64&#x27;]&#x27; returned non-zero exit status 1.<br></code></pre></div></td></tr></table></figure>
<p>一开始是遇到<strong>缺乏amp</strong>的问题，但这其实是apex安装没成功导致的错误</p>
<p>于是博主重新安装<strong>apex</strong></p>
<p>发现安装失败原因</p>
<ul>
<li>cuda不匹配，因为博主使用的服务器默认为cuda10.0</li>
<li>找不到setup.py</li>
</ul>
<p>原因一上文已解决</p>
<p>原因二解决</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">git clone https://github.com/NVIDIA/apex.git<br>cd apex<br><br># 加入该语句<br>python setup.py install --cuda_ext --cpp_ext<br><br>pip install -v --disable-pip-version-check --no-cache-dir --global-option=&quot;--cpp_ext&quot; --global-option=&quot;--cuda_ext&quot; ./<br></code></pre></div></td></tr></table></figure>
<h1 id="torch-cuda-set-device-config-LOCAL-RANK"><a href="#torch-cuda-set-device-config-LOCAL-RANK" class="headerlink" title="torch.cuda.set_device(config.LOCAL_RANK)"></a>torch.cuda.set_device(config.LOCAL_RANK)</h1><p>由于设置的GPU数量超过服务器配置报错</p>
<p>查看服务器GPU配置</p>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">watch -n 10 nvidia-smi <br></code></pre></div></td></tr></table></figure>
<p>博主服务器配置GPU数量为2</p>
<p>于是重新执行命令</p>
<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> -m torch.distributed.launch --nproc_per_node <span class="hljs-number">2</span> --master_port <span class="hljs-number">88888</span> main.py --cfg configs/swin_tiny_patch<span class="hljs-number">4</span>_window<span class="hljs-number">7</span>_<span class="hljs-number">224</span>.yaml --data-path imagenet --batch-size <span class="hljs-number">64</span><br></code></pre></div></td></tr></table></figure>
<h1 id="RuntimeError-Address-already-in-use"><a href="#RuntimeError-Address-already-in-use" class="headerlink" title="RuntimeError: Address already in use"></a>RuntimeError: Address already in use</h1><p>执行命令中<code>--master_port 12345</code>，12345端口被占用，重新设置新的端口即可，如<code>--master_port 88888</code></p>
]]></content>
      <categories>
        <category>Transformer</category>
      </categories>
      <tags>
        <tag>Transformer</tag>
      </tags>
  </entry>
  <entry>
    <title>从线性变换角度理解线性代数</title>
    <url>/47d0bf4a/</url>
    <content><![CDATA[<h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><p>在计算机学科中，以<strong>有序列表</strong>表示一个向量</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
1\\\\
2
\end{bmatrix}
=1\hat i+2\hat j</script>]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络-CNN</title>
    <url>/7cf03a4e/</url>
    <content><![CDATA[<h1 id="CNN原理"><a href="#CNN原理" class="headerlink" title="CNN原理"></a>CNN原理</h1><h2 id="局部连接"><a href="#局部连接" class="headerlink" title="局部连接"></a>局部连接</h2><p>对于一张图片，保留其原本的图形结构，通过<strong>局部扫描</strong>的方式，每次对图像的一个区域进行计算，进而得到一个权重，最终得到一个小矩阵。</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/2019-06-19-juanji.gif" alt="卷积层运算过程"></p>
<p>用来提取局部信息的小矩阵被称为过滤器Filter或卷积核Kernel</p>
<h2 id="共享权重"><a href="#共享权重" class="headerlink" title="共享权重"></a>共享权重</h2><p>每一次对整张图片的扫描，使用一个Kernel，该Kernel由设定的step大小来遍历图片矩阵的所有位置，进而得到一个权重矩阵(Feature Map)。</p>
<p>即在一次卷积计算中，所有的每一个权重值都是有一个Kernel计算来的，这就是共享权重。</p>
<p>通过不同的Kernel，可以提取不同的特征信息。</p>
<h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/1889079d809eff1324d9027b4adcc86d.png" alt="基本结构"></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210503111228027.png" alt="基本结构" style="zoom: 67%;"></p>
<h2 id="输入层"><a href="#输入层" class="headerlink" title="输入层"></a>输入层</h2><p>对原始图像进行预处理</p>
<ul>
<li>去均值<ul>
<li>把输入数据各个维度都中心化为 0</li>
</ul>
</li>
<li>归一化<ul>
<li>幅度归一化到同样的范围</li>
</ul>
</li>
<li>PCA/白化<ul>
<li>用 PCA 降维；白化是对数据各个特征轴上的幅度归一化</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/a5e9421fba6f1faf53b6340fb2802308.png" alt="去均值，归一化" style="zoom: 67%;"></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/b8f88552197525cfa9261fe44739a18e.png" alt="去相关与白化" style="zoom:67%;"></p>
<h2 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h2><p>卷积层由一组Filter组成，Filter可以理解为一个简单的二维矩阵</p>
<p><strong>计算流程</strong>：</p>
<ul>
<li>对图片转化的RGB矩阵进行<strong>Patch匹配</strong>，即将图片划分为每个小块，而不是一个像素一个像素来匹配。</li>
</ul>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-df0a51f10a46347704274ee6ddbb614a_720w.png" alt="Patch"></p>
<ul>
<li><p>确定提取局部特征信息的 <strong>Feature</strong> (Filter，Kernel)，一般为$3 \times 3或5\times 5$</p>
</li>
<li><p>遍历图像，由设置的步长Stride大小滑动Patch块(蓝色窗口)，将每一个Patch块与Feature对应相乘，求均值，最终得到<strong>Feature Map</strong></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-68a6efb63fbbb0b83ebded0d6268d0fe_720w.png" alt="Feature Map" style="zoom:50%;"></p>
</li>
</ul>
<p>  <img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-683c8d63e22eef01a271a08016006d17_720w.png" alt="Feature Map" style="zoom:50%;"></p>
<blockquote>
<p>对于一个Feature，经过一次卷积计算后，得到一个Feature Map，对Feature Map中的值，越接近1，说明匹配度越高；接近-1，则与Feature反面匹配度高；接近0，说明无关联。</p>
</blockquote>
<p><strong>填充</strong></p>
<p>上述经过计算流程，空间维度减小了</p>
<p>假如之后还要继续经历多个卷积层，图片维度下降过快，导致低层特征信息的丢失</p>
<p>因此，为了在开始的卷积层保留原始图片的信息，更好提取低层特征，我们对输入信息进行边界填充</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/23c9a459bc8e29114063656584d6c3c2.png" alt="填充" style="zoom:80%;"></p>
<h2 id="非线性激活层"><a href="#非线性激活层" class="headerlink" title="非线性激活层"></a>非线性激活层</h2><p>对于卷积计算得到的Feature Map，我们关注的是匹配度高的信息。因此，为了提高性能，我们舍弃那些关联度不高的信息</p>
<p><strong>Relu函数</strong></p>
<script type="math/tex; mode=display">
f(x)=max(0,x)</script><p>即保留大于等于0的信息</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-f9af9fde70d5d3b7db5562956c6cc213_720w.png" alt="Relu" style="zoom:50%;"></p>
<h2 id="池化Pooling"><a href="#池化Pooling" class="headerlink" title="池化Pooling"></a>池化Pooling</h2><p><strong>核心思想</strong>，CNN关注的是图像<strong>是否具备</strong>某种特征，不用关注这个特征的具体位置</p>
<p>图片相邻像素往往是相似的，所以在Feature Map中会有许多相似冗余的信息</p>
<p>两种方式</p>
<ul>
<li>Max Pooling<ul>
<li>保留了每一小块的最大值，相当于保留了这一小块的最佳匹配结果</li>
</ul>
</li>
<li>Average Pooling</li>
</ul>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-bdc0421a13e06122b6d13fb84cdf5e9f_720w.png" alt="Pooling" style="zoom:50%;"></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-e58c86e2a784a341afe648607ab2f1a7_720w.png" alt="Pooling" style="zoom:50%;"></p>
<h2 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h2><p>对得到的一系列Feature Map进行维度上的改变，得到对应概率值</p>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://zhuanlan.zhihu.com/p/58818595">卷积神经网络（CNN）的简单理解</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/27908027">卷积神经网络CNN完全指南终极版（一）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/28173972">卷积神经网络CNN完全指南终极版（二）</a></p>
<p><a href="https://www.qbitai.com/2020/07/16758.html">什么是CNN？写给小白的机器学习入门贴，Facebook员工打造，47k访问量</a></p>
<p><a href="https://xie.infoq.cn/article/c4d846096c92c7dfcd6539075">机器学习算法之——卷积神经网络（CNN）原理讲解</a></p>
<p><a href="http://shiyanjun.cn/archives/1963.html">卷积神经网络介绍</a></p>
<p><a href="https://easyai.tech/ai-definition/cnn/">卷积神经网络 – CNN</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希</title>
    <url>/2e3b1176/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1.两数之和</a></h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 暴力破解</span><br>        <span class="hljs-comment">/*int len = nums.length;</span><br><span class="hljs-comment">        for(int i=0;i&lt;len-1;i++)&#123;</span><br><span class="hljs-comment">            for(int j=i+1;j&lt;len;j++)&#123;</span><br><span class="hljs-comment">                if(nums[i]+nums[j]==target)&#123;</span><br><span class="hljs-comment">                    ans[0]=i;</span><br><span class="hljs-comment">                    ans[1]=j;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;*/</span><br>        Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(map.containsKey(target-nums[i]))&#123;<br>                ans[<span class="hljs-number">0</span>] = map.get(target-nums[i]);<br>                ans[<span class="hljs-number">1</span>] = i;<br>                <span class="hljs-keyword">return</span> ans;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                map.put(nums[i],i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h1 id="语法总结"><a href="#语法总结" class="headerlink" title="语法总结"></a>语法总结</h1>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>反向传播算法</title>
    <url>/437097cd/</url>
    <content><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://www.cnblogs.com/charlotte77/p/5629865.html">一文弄懂神经网络中的反向传播法——BackPropagation</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/40378224">Back Propagation（梯度反向传播）实例讲解</a></p>
<p><a href="https://www.cnblogs.com/charlotte77/p/5629865.html">一文弄懂神经网络中的反向传播法——BackPropagation</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>损失函数</title>
    <url>/4863b368/</url>
    <content><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://www.jiqizhixin.com/graph/technologies/4c38563a-2d9b-439e-bfb4-21d209eeff3e">机器之心——损失函数</a></p>
<p><a href="https://www.cnblogs.com/guoyaohua/p/9217206.html">一文读懂机器学习常用损失函数（Loss Function）</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>损失函数</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/340249a9/</url>
    <content><![CDATA[<p>该篇博客主要是博主刷LeetCode的数组相关题目时，遇到的坑点，有新意的题解等。</p>
<p>点击题目可以直接跳转到LeetCode题目页面</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="1512-好数对的数目"><a href="#1512-好数对的数目" class="headerlink" title="1512. 好数对的数目"></a><a href="https://leetcode-cn.com/problems/number-of-good-pairs/">1512. 好数对的数目</a></h2><p>这道题暴力搜索很简单，博主也是这么做的。但博主看了一下题解，发现了有一位大佬<a href="https://leetcode-cn.com/u/jayceondu/">Jayceon</a>思路很有新意。</p>
<p>参考大佬<a href="https://leetcode-cn.com/problems/number-of-good-pairs/solution/zhe-gu-ji-shi-wo-xie-zen-yao-duo-ti-yi-lai-zui-dua/">题解</a>代码</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numIdenticalPairs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//        for(int i=0;i&lt;nums.length-1;i++)&#123;</span><br><span class="hljs-comment">//            for(int j=i+1;j&lt;nums.length;j++)&#123;</span><br><span class="hljs-comment">//                if(nums[j]==nums[i])&#123;</span><br><span class="hljs-comment">//                    count++;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-keyword">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : nums)&#123;<br>            count += temp[num-<span class="hljs-number">1</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<p>然后讲一讲这个思路吧，<code>temp</code>数组的下标对应了<code>nums</code>数组中的值，记录出现次数，索引从1开始，因此有<code>temp[num-1]</code>的操作。每一次遍历，出现的数字对应在<code>temp</code>数组的值+1。</p>
<p>假设数字1第一次出现，<code>temp[0]</code>为1，好数对数量为0</p>
<p>第二次出现，<code>temp[0]</code>为2，好数对数量为1</p>
<p>第二次出现，<code>temp[0]</code>为3，好数对数量为3</p>
<p>第二次出现，<code>temp[0]</code>为4，好数对数量为6</p>
<p><strong>这题也说明了不要固化思维，可以多尝试能不能简化题目</strong></p>
<h2 id="1470-重新排列数组"><a href="#1470-重新排列数组" class="headerlink" title="1470. 重新排列数组"></a><a href="https://leetcode-cn.com/problems/shuffle-the-array/">1470. 重新排列数组</a></h2><p>这道题还是蛮简单的，博主一开始使用的是数组映射的思路的方法解题的的，但空间复杂度(N)。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findDuplicate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            ans[nums[i]]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;ans.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(ans[i]&gt;=<span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<p>精益求精的博主开始看题解，寻找优化方法</p>
<p>从左向右遍历，找到每一个数的目标位置，于该位置的数进行交换，然后该数标记为负数，说明已经放置在正确位置，遍历到该位置时就跳过。</p>
<p><code>while</code>的作用，一次交换后，j指向刚刚被交换的数字原本的索引，找到它的目标的位置，直到当前i索引为正确位置。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] shuffle(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> n) &#123;<br><span class="hljs-comment">//        int[] ans = new int[2*n];</span><br><span class="hljs-comment">//        for(int i=0;i&lt;n;i++)&#123;</span><br><span class="hljs-comment">//            ans[2*i] = nums[i];</span><br><span class="hljs-comment">//            ans[2*i+1] = nums[i+n];</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">2</span>*n; i++)&#123;<br>            <span class="hljs-comment">// 该数不在正确位置</span><br>            <span class="hljs-keyword">if</span>(nums[i]&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">int</span> j =i;<br>                <span class="hljs-keyword">while</span> (nums[i]&gt;<span class="hljs-number">0</span>)&#123;<br>                    j = j&lt;n ? <span class="hljs-number">2</span>*j : <span class="hljs-number">2</span>*(j-n)+<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">int</span> temp = nums[i];<br>                    nums[i] = nums[j];<br>                    nums[j] = temp;<br><br>                    nums[j] = -nums[j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>*n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]&lt;<span class="hljs-number">0</span>)<br>            nums[i] = -nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<p><strong>画图可以更方便理解</strong></p>
<h1 id="持续更新ing"><a href="#持续更新ing" class="headerlink" title="持续更新ing"></a>持续更新ing</h1>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Transformer系列论文阅读</title>
    <url>/ef1f339e/</url>
    <content><![CDATA[<h1 id="阅读论文"><a href="#阅读论文" class="headerlink" title="阅读论文"></a>阅读论文</h1><p><a href="https://arxiv.org/abs/2012.12556">A Survey on Visual Transformer</a>[1]</p>
<p><a href="https://arxiv.org/abs/2101.01169">Transformers in Vision: A Survey</a>[2]</p>
<p><a href="https://arxiv.org/abs/2010.11929">An Image Is Worth 16X16 Words: Transformers for Image Recognition at Scale</a>[3]</p>
<p><a href="https://arxiv.org/abs/2103.14030">Swin Transformer: Hierarchical Vision Transformer using Shifted Windows</a>[4]</p>
<p><a href="https://arxiv.org/abs/2102.12122">Pyramid Vision Transformer: A Versatile Backbone for Dense Prediction without Convolutions</a>[5]</p>
<p><a href="https://arxiv.org/abs/2103.00112">Transformer in Transformer</a>[6]</p>
<p><a href="https://arxiv.org/abs/2008.02496">ConvBERT: Improving BERT with Span-based Dynamic Convolution</a>[7]</p>
<p><a href="https://arxiv.org/abs/2101.11986">Tokens-to-Token ViT: Training Vision Transformers from Scratch on ImageNet</a>[8]</p>
<p><a href="https://arxiv.org/abs/2009.02070">AutoTrans: Automating Transformer Design via Reinforced Architecture Search</a>[9]</p>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>[1]，[2]讲述了目前<strong>Visual Transformer</strong>的爆火和Transformer在CV方面的各种应用，</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/20201224105635731.png" alt="Transformer应用" style="zoom: 50%;"></p>
<p>虽然<strong>Transformer</strong>爆火，但目前CV领域还是由<strong>CNN</strong>主导</p>
<p>但人们依然很看好Transformer在CV领域的应用于前景，希望将Transformer迁移到CV领域中，</p>
<p>主要分为两大类</p>
<ul>
<li>将self-attention机制与常见的CNN架构结合</li>
<li>用self-attention机制完全替代CNN，如[3]，[4]，[5]</li>
</ul>
<p>[3]提出VIT模型，应用于CV领域的Image Classification，在大规模数据上训练的得到的模型达到不错的效果</p>
<p>[4]提出Swin Transformer模型，基于VIT模型的改进，应用于Image classification，Object detection，Semantic segmentation</p>
<p>[5]提出Pyramid Vision Transformer模型，基于VIT模型的改进，应用于Object detection，Semantic segmentation</p>
<p>[6]提出Transformer in Transformer模型，应用于Image benchmark and downstream tasks</p>
<p>[7]提出ConvBERT模型，基于BERT的预训练语言模型</p>
<p>[8]提出Tokens-to-Token ViT模型，基于VIT模型改进</p>
<p>[9]讨论了Transformer  Model 的自动化设计，对于layer-norm的位置，个数，attention head 的个数，使用哪个激活函数的问题</p>
<h1 id="VIT"><a href="#VIT" class="headerlink" title="VIT"></a>VIT</h1><p>VIT是早期提出用于CV中<strong>Image classification</strong>的结构，虽然存在着不足，但对最近<strong>Swin Transformer</strong>，<strong>Pyramid Vision Transformer</strong>等模型提出提供了宝贵经验。</p>
<p>Transformer在NLP中处理的是序列化的数据，而CV中处理的是三维的图像数据（H，W，C）</p>
<p>所以，VIT提出了<strong>Patch</strong>划分的方法，将三维图像数据<strong>转化为序列化数据</strong></p>
<h2 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h2><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/640.png" alt="Model" style="zoom:50%;"></p>
<ul>
<li><p>将图像转化为序列化数据</p>
<ul>
<li>将图像划分为一个个Patch，对这一系列Patch进行reshape，从而得到序列化的Patch数据，即Flattened Patch</li>
</ul>
<p>对于一张$H \times W \times C$的图片，采用$P \times P$的Patch来划分，得到$N=\frac{H}{P} \times \frac{W}{P}$个patch($P\times P\times C$)，reshape后得到维度$P^2C$的Flattened Patch(向量)，对N个Flattened Patch进行concat之后得到一个$N\times (P^2C)$的二维矩阵，相对于<strong>NLP中输入Transformer的Word Embedding</strong></p>
<ul>
<li><strong>Linear Projection</strong>：对维度$P^2C$的Flattened Patch进行维度转化，得到固定长度$D$的特征向量<ul>
<li>防止模型结构受Patch大小的影响</li>
</ul>
</li>
</ul>
<p>综上，原本$H \times W \times C$的图片转化为了$N个D$维向量（或一个$N \times D$的二维矩阵）</p>
</li>
<li><p>Position embedding</p>
<ul>
<li>0-9的紫色框表示各个位置的position embedding，粉色框为经过Linear Projection后的Flattened Patch，二者相加</li>
</ul>
</li>
<li><p>Learnable embedding</p>
<ul>
<li>分类标志位[class]，即图中0编号，它经过Encoder后的结果作为整个图像的表示</li>
<li>假如随意指定1-9作为整个图像的表示，则会导致整体表示偏向这个Embedding信息，即图像表示偏重于反映某个Patch</li>
</ul>
</li>
<li><p>Transformer Encoder</p>
<ul>
<li><p>第一层输入，$x$表示一个Patch，$E$表示Linear Projection转化矩阵</p>
<script type="math/tex; mode=display">
z_0=[x_{class};x^1_pE;...x_p^NE]+E_{pos}\\
E\in \Bbb R^{(P^2·C)\times D},E_{pos}\in \Bbb R^{(N+1)\times D}</script></li>
<li><p>对于第$l$层</p>
</li>
</ul>
<script type="math/tex; mode=display">
z^{'}_l=MSA(LN(z_{l-1}))+z_{l-1}\\
z_l=MLP(LN(z^{'}_l))+z^{'}_l\\
l = 1...L</script><ul>
<li>每个块后使用Residual connection，每个块前使用Layernorm</li>
</ul>
</li>
</ul>
<h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>在中等大小的数据集（如 ImageNet）上训练得到的VIT模型准确率低于CNN模型</p>
<h1 id="Swin"><a href="#Swin" class="headerlink" title="Swin"></a>Swin</h1><p><strong>Swin Transformer</strong>基于VIT进行了改进，可以作为通用backone，应用于Image classification，Object detection，Semantic segmentation</p>
<ul>
<li>引入<strong>层次化结构</strong><ul>
<li>解决CV领域scale变化范围大的问题</li>
</ul>
</li>
<li>将self-attention计算<strong>限制在local window中</strong><ul>
<li>解决CV使用Transformer计算复杂度为图像size二次方的问题</li>
</ul>
</li>
<li>支持<strong>cross-window connection</strong></li>
</ul>
<h2 id="基础模型-1"><a href="#基础模型-1" class="headerlink" title="基础模型"></a>基础模型</h2><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/20210414162359586.png" alt="总体结构"></p>
<blockquote>
<p>创新</p>
<ul>
<li>引入stage，随着网络深度增加，<strong>合并patch</strong></li>
<li>使用<strong>基于Shifted Windows</strong>的W-MSA替换标准的MSA</li>
<li>提出<strong>Shifted Window划分</strong></li>
</ul>
</blockquote>
<h3 id="Stage"><a href="#Stage" class="headerlink" title="Stage"></a>Stage</h3><p><strong>引入4个stage</strong>，每个stage的操作类似于上述的VIT模型</p>
<blockquote>
<p>区别</p>
<p>Swin随着网络深度的加深，patch的数量在不断减少，且每个patch的感知范围在不断扩大，而VIT模型的patch保持不变</p>
</blockquote>
<ul>
<li><strong>Patch Partition</strong>：如VIT模型将图像转化为序列化数据，将原始图像划分为一个个Patch，但<strong>彼此不重叠</strong><ul>
<li>根据设置的Patch大小（$4 \times 4$），对输入的Image（$H\times W\times 3$）划分为$\frac{H}{4} \times \frac{W}{4}$个Patch</li>
<li>将原始图像的像素值作为其 <strong>Feature</strong></li>
<li>每个Patch的维度为$4 \times 4 \times 3 = 48$</li>
</ul>
</li>
<li><p><strong>Stage1</strong></p>
<ul>
<li><strong>Linear Embedding</strong>：将 Feature 映射到任意维度，记作$C$</li>
<li><strong>Transformer Block</strong>：进行Self-Attention运算，不改变token数量</li>
</ul>
</li>
<li><p><strong>Stage2</strong></p>
<ul>
<li><strong>Patch Merging</strong>：对$2 \times 2$的相邻Patch进行合并，通过linear layer将Feature映射到$4C$维度    <ul>
<li>合并过后，Patch数量降为$\frac{1}{4}$，MLP作用后，维度为$2C$</li>
</ul>
</li>
</ul>
</li>
<li><strong>Stage3，Stage4</strong><ul>
<li>类似于Stage2，最终得到一个层次化的结构</li>
</ul>
</li>
</ul>
<h3 id="W-MSA"><a href="#W-MSA" class="headerlink" title="W-MSA"></a>W-MSA</h3><p>每个window包含$M \times M$个patch，整个图像包含$h \times w$个patch，总共$\frac{h}{4} \times \frac{w}{4}$个Patch</p>
<p>复杂度计算</p>
<script type="math/tex; mode=display">
\Omega(MSA) = 4hwC^2 + 2(hw)^2C\\
\Omega(W-MSA)=4hwC^2 + 2M^2hwC</script><p>当$M$固定大小时，$\Omega(W-MSA)$为<strong>线性增长</strong></p>
<h3 id="Shifted-Window-划分"><a href="#Shifted-Window-划分" class="headerlink" title="Shifted Window 划分"></a>Shifted Window 划分</h3><p>在连续的Swin Transformer Block之间交替进行两种划分配置，进而保持 <strong>non-overlapped windows</strong> 的高效计算同时引入 <strong>cross-window connection</strong></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/20210414113658286-1620198501546.png" alt="Shifted Windows划分"></p>
<ul>
<li><strong>Layer1</strong>：将$8\times 8$的Feature Map 划分为$2 \times 2$个window，每个window大小为$4 \times4,即M=4$</li>
<li><strong>Layer2</strong>：将Layer1的一系列window移动$(\lfloor\frac{M}{2} \rfloor,\lfloor\frac{M}{2} \rfloor)$个像素</li>
</ul>
<p><strong>存在问题</strong></p>
<ul>
<li>可能会生成<strong>过多</strong>window，范围$[\lceil\frac{h}{M} \rceil\times\lceil\frac{w}{M} \rceil,(\lceil\frac{h}{M} \rceil+1)\times(\lceil\frac{w}{M} \rceil+1)]$</li>
<li>生成window大小不一致，部分window较小</li>
</ul>
<p><strong>解决方案</strong></p>
<p><strong>Cyclic Shift</strong></p>
<p>经过循环填补，<strong>Layer2</strong>的window划分类似于<strong>Layer1</strong>，此时的batch window由不相邻的sub-window构成，采用<strong>masking mechanism</strong>来限制seft attention在sub-window中的计算</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/20210415101857516.png" alt="Cyclic Shift"></p>
<h2 id="不足-1"><a href="#不足-1" class="headerlink" title="不足"></a>不足</h2><p>图像分类上比ViT、DeiT等Transformer类型的网络效果更好，但是比不过CNN类型的EfficientNet，猜测Swin Transformer还是更加适用于更加复杂、尺度变化更多的任务。</p>
<p>Swin Transformer没有提供类似反卷积的上采样的算法</p>
<p>每一个window的Q，K，V都是独立的，即没有CNN的权值共享特性</p>
<h1 id="PVT"><a href="#PVT" class="headerlink" title="PVT"></a>PVT</h1><p><strong>Pyramid Vision Transformer</strong>同样基于VIT模型进行改进，是一种使用Transformer模型的无卷积骨干网络，主要用于除图像分类外的密集预测任务。</p>
<ul>
<li>引入金字塔结构        <ul>
<li>Feature Map的<strong>分辨率</strong>随着网络加深，<strong>逐渐减小</strong></li>
<li>Feature Map 的<strong>Channel数</strong>随着网络加深，<strong>逐渐增大</strong></li>
<li>解决了VIT模型中，输入高分辨率图像产生高内存占用甚至显存溢出的问题</li>
</ul>
</li>
<li>PVT继承了CNN和Transformer的优势，通过简单的替换CNN骨干使其成为不同视觉任务的统一骨干结构</li>
<li>在object detection，semantic and instance segmentation 任务上取得优越性</li>
</ul>
<h2 id="基础模型-2"><a href="#基础模型-2" class="headerlink" title="基础模型"></a>基础模型</h2><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/24367789-e30f1e268cbb734e-1620200105904.png" alt="PVT"></p>
<blockquote>
<p> 创新</p>
<ul>
<li>引入stage，随着网络深度增加，Feature Map的<strong>分辨率</strong>，<strong>逐渐减小</strong>，<strong>Channel数</strong>，<strong>逐渐增大</strong></li>
<li>使用<strong>spatial-reduction attention(SRA)</strong>替换标准的MSA</li>
</ul>
</blockquote>
<h3 id="Stage-1"><a href="#Stage-1" class="headerlink" title="Stage"></a>Stage</h3><ul>
<li><strong>Stage1</strong><ul>
<li><strong>patch embedding</strong>：对输入的$H\times W\times 3$ 图像(Feature Map)进行token化，设定其patch的大小$p\times p$，将RGB图像划分为$\frac{HW}{P^2}$个patch<ul>
<li>对这一系列的patch进行展开，然后传入<strong>linear projection</strong>中进行Patch Embedding</li>
<li>将结果<strong>reshape</strong>后得到大小$\frac{HW}{P^2}\times C$的embedded patch</li>
</ul>
</li>
<li>将embedded patch 和其对应的<strong>position embedding</strong> 一起传入Transformer Encoder中<ul>
<li>SRA处理：使用函数$Reshape(x,R_i)$将传入的embedding patch进行变形，由$\Bbb R^{(HW)\times C}$转换为$\Bbb R^{\frac{HW}{R_i^2}\times(R_i^2C)}$，然后乘以一个$W^s\in \Bbb R^{(R_i^2C)\times C}$矩阵，进而将原本的空间规模降为$\frac{1}{R_i^2}$，即$\Bbb R^{\frac{HW}{R_i^2}\times C}$，这是<strong>SRA的核心</strong></li>
</ul>
</li>
<li>将Transformer Encoder的结果进行reshape得到$\frac{H}{P}\times\frac{W}{P}\times C$ Feature Map，即$F_1$</li>
</ul>
</li>
<li><strong>Stage2，Stage3，Stage4</strong><ul>
<li>由上一个Stage的输出作为输入，重复流程</li>
</ul>
</li>
</ul>
<h3 id="SRA"><a href="#SRA" class="headerlink" title="SRA"></a>SRA</h3><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/ce93432eb169c8f9d135e49ea1d7dcea.webp" alt="SRA"></p>
<p>SRA的核心是减少K与V的空间规模，也就是<K,V>对的数量，对比于MHA，K与V的空间规模降为其$\frac{1}{R_i^2}$</K,V></p>
<p><strong>处理过程</strong></p>
<script type="math/tex; mode=display">
SRA(Q,K,V)=Concat(head_0,...,head_{N_{i}})W^o\\
head_j=Attention(QW_j^Q,SR(K)W_j^V,SR(V)W_j^V)</script><p>SR(·)为spatial-reduction operation，$W^s$是一个linear projection，它把input sequence的维度降到$C_i$。</p>
<script type="math/tex; mode=display">
SR(x)=Norm(Reshape(x,R_i)W^s)</script><h2 id="不足-2"><a href="#不足-2" class="headerlink" title="不足"></a>不足</h2><ul>
<li>随着输入图片的增大，PVT的资源消耗增长率比ResNet高</li>
</ul>
<h1 id="TNT"><a href="#TNT" class="headerlink" title="TNT"></a>TNT</h1><p><strong>Transformer in Transformer</strong>，用于视觉识别</p>
<ul>
<li>对patch-level和pixel-level representation都进行建模<ul>
<li>解决VIT相关模型忽略了每个patch内部固有结构信息的问题</li>
</ul>
</li>
<li>堆叠TNT Block来构建TNT模型</li>
</ul>
<h2 id="基础模型-3"><a href="#基础模型-3" class="headerlink" title="基础模型"></a>基础模型</h2><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210505163417844.png" alt="TNT"></p>
<blockquote>
<p>创新</p>
<ul>
<li><strong>Inner Transformer Block</strong>用于提取pixel embedding的局部结构信息</li>
<li><strong>Outer Transformer Block</strong>用于提取patch embedding的全局信息</li>
<li>通过Linear Projection将pixel embedding投影到patch embedding space</li>
</ul>
</blockquote>
<ul>
<li><p>将输入图像划分为一个个Patch，</p>
</li>
<li><p><strong>Unfold &amp; Linear</strong>：将输入的Patch，转换为对应的Patch Embedding，Pixel Embedding</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210514155640723.png" alt="TNT"></p>
<ul>
<li><p>Patch</p>
<script type="math/tex; mode=display">
\gamma_0=[Y_0^1,...Y_0^n]\in\Bbb R^{n \times p^{'}\times p^{'} \times c}\\
Y_0^i\in \Bbb R^{p^{'}\times p^{'} \times c}</script></li>
<li><p>Pixel</p>
<script type="math/tex; mode=display">
Y_0^i=[y_0^{i,1},...,y_0^{i,m}]\\
m=p^{'2}</script></li>
</ul>
</li>
<li><p>TNT Block</p>
<ul>
<li><p>inner transformer block</p>
<script type="math/tex; mode=display">
Y_l^{'i}=Y_{l-1}^{i}+MSA(LN(Y_{l-1}^{i}))\\
Y_l^{i}=Y_{l}^{'i}+MLP(LN(Y_{l}^{'i}))\\</script></li>
<li><p>outer transformer block 输入，$Vec()$将Pixel展开成向量，b为bias</p>
<script type="math/tex; mode=display">
Z_{l-1}^i=Z_{l-1}^i+Vec(Y_{l-1}^{i})W_{l-1}+b_{l-1}</script></li>
<li><p>outer transformer block</p>
<script type="math/tex; mode=display">
Z_l^{'i}=Z_{l-1}^{i}+MSA(LN(Z_{l-1}^{i}))\\
Z_l^{i}=Z_{l}^{'i}+MLP(LN(Z_{l}^{'i}))\\</script></li>
<li><p>TNT block</p>
<script type="math/tex; mode=display">
\gamma_l,Z_l=TNT(\gamma_{l-1},Z_{l-1})</script></li>
</ul>
</li>
</ul>
<h3 id="position-encoding"><a href="#position-encoding" class="headerlink" title="position encoding"></a>position encoding</h3><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210505173817956.png" alt="position encoding"></p>
<ul>
<li>Pixel position encoding 在每一个Patch是共享的</li>
</ul>
<h1 id="ConvBERT"><a href="#ConvBERT" class="headerlink" title="ConvBERT"></a>ConvBERT</h1><p><strong>ConvBERT</strong>是一种基于span的动态卷积模型</p>
<ul>
<li>提出span-based dynamic convolution来代替一些冗余的self-attention head<ul>
<li>减少了预训练的计算花销，提高了local dependencies的建模能力</li>
</ul>
</li>
<li>提出mixed attention block<ul>
<li>结合span-based dynamic convolution和剩余的self-attention head</li>
<li>更高效地学习 global and local context</li>
</ul>
</li>
<li>基于BERT结合mixed attention block，建立ConvBERT模型<ul>
<li>在各种downstream tasks中表现比BERT及其变体模型优越</li>
<li>且更少的训练花销和更少的模型参数</li>
</ul>
</li>
</ul>
<h2 id="基础模型-4"><a href="#基础模型-4" class="headerlink" title="基础模型"></a>基础模型</h2><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/v2-d7b781576e71a2f20a2d80dd26523356_720w.jpg" alt="Span-based dynamic convolution" style="zoom: 50%;"></p>
<ul>
<li><p><strong>self-attention</strong>：使用所有token来捕获全局依赖关系，但由观察得知，BERT模型学习的更多是局部依赖关系</p>
<ul>
<li><p>随着序列增长，复杂度呈现二次增长</p>
</li>
<li><p>故传统BERT模型存在大量冗余</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/22097296-9320a32f5e2fefa8.png" alt="attention map" style="zoom:50%;"></p>
</li>
</ul>
</li>
<li><p><strong>dynamic convolution</strong>：使用一个Kernel Generator来为每一个word embedding生成自己的Kernel</p>
<ul>
<li>但对于上下文相同的word生成的Kernel是相同的，无法解决一词多义的问题</li>
</ul>
</li>
<li><p><strong>span-based dynamic convolution</strong>：通过输入的word embedding和其周围的word embedding结合来生成Kernel</p>
<ul>
<li>解决一词多义的问题</li>
</ul>
</li>
</ul>
<p><strong>Span-based dynamic convolution</strong></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/22097296-bc431f7a42f85809.png" alt="Span-based dynamic convolution" style="zoom: 80%;"></p>
<p>生成dynamic Kernel</p>
<script type="math/tex; mode=display">
f(Q,K_s)=softmax(W_f(Q\circ K_s))</script><p>span-based dynamic convolution公式</p>
<script type="math/tex; mode=display">
SDConv(Q,K_s,V;W_f,i)=LConv(V,softmax(W_f(Q \circ K_s)),i)</script><p><strong>ConvBERT架构</strong></p>
<ul>
<li>Mixed Attention<ul>
<li>结合Self-Attention和Span-based dynamic convolution</li>
<li>Self-Attention捕获全局信息，Span-based dynamic convolution捕获局部信息</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/22097296-5c3e0e565733fbd1.png" alt="ConvBERT" style="zoom:80%;"></p>
<script type="math/tex; mode=display">
MixedAttention(K,Q,K_s,V;W_f)=Cat(SelfAttention(Q,K,V),SDConv(Q,K_s,V;W_f))</script><ul>
<li><p>Bottleneck design for Self-Attention</p>
<ul>
<li>使用bottleneck structure来减少attention head</li>
<li>将输入的embedding映射到更低维度</li>
</ul>
</li>
<li><p>Grouped Feed-Forward module</p>
<ul>
<li>对Feed-Forward的改进，减少参数数量<script type="math/tex; mode=display">
M=\prod_{i=0}^{g}[f_{\frac{d}{g} \rightarrow \frac{m}{g}}^i(H_{[:,i-1:i\times \frac{d}{g}]})\\
M^{'} = GeLU(M)\\
H^{'}=\prod_{i=0}^{g}[f_{\frac{d}{g} \rightarrow \frac{m}{g}}^i(M_{[:,i-1:i\times \frac{d}{g}]}^{'})]</script></li>
</ul>
</li>
</ul>
<h1 id="Tokens-to-Token-ViT"><a href="#Tokens-to-Token-ViT" class="headerlink" title="Tokens-to-Token ViT"></a>Tokens-to-Token ViT</h1><p><strong>Tokens-to-Token Vit</strong>是基于Vit模型进行改进的</p>
<ul>
<li>提出Tokens-to-token<ul>
<li>解决Vit无法对图像相邻像素的局部结构信息（边缘，线条，纹理）进行建模</li>
<li>对token进行局部建模，保留token局部结构信息并且减少token长度</li>
</ul>
</li>
<li>结合了deep-narrow结构的高效backone<ul>
<li>解决Vit冗余attention对feature richness的限制</li>
</ul>
</li>
</ul>
<h2 id="基础模型-5"><a href="#基础模型-5" class="headerlink" title="基础模型"></a>基础模型</h2><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210506105719357.png" alt="T2T"></p>
<blockquote>
<p>创新</p>
<ul>
<li><strong>Tokens to token Module</strong>：对图像的local structure 信息进行建模，并且减少了token的长度<ul>
<li><strong>re-structurization</strong></li>
<li><strong>soft split</strong></li>
</ul>
</li>
<li><strong>T2T-ViT backone</strong>：应用了<strong>deep-narrow</strong>结构，减少了attention冗余，提高feature richness</li>
</ul>
</blockquote>
<p><strong>Tokens to token Module</strong></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210506110931523.png" alt="T2T process"></p>
<ul>
<li><p>Re-structurization</p>
<ul>
<li><p>对输入进行传统Transformer处理</p>
<script type="math/tex; mode=display">
T^{'}=MLP(MSA(T))</script></li>
<li><p>Reshape：将$T^{‘}\in \Bbb R^{l\times c}$转为$I \in \Bbb R^{h \times w\times c}$</p>
<script type="math/tex; mode=display">
I=Reshape(T^{'})</script></li>
</ul>
</li>
<li><p>Soft Split</p>
<ul>
<li><p>建立local structure信息，减少token长度$l$</p>
</li>
<li><p>避免re-structurization过程中信息丢失，在split中采取overlap机制，将每一个patch与其周围的patch联系起来，从而捕获周围pixel和patch的信息</p>
<script type="math/tex; mode=display">
l_0=\lfloor\frac{h+2p-k}{k-s}+1 \rfloor \times \lfloor\frac{w+2p-k}{k-s}+1 \rfloor</script><script type="math/tex; mode=display">
T_{i+1}=SS(T_i)</script></li>
</ul>
</li>
</ul>
<p><strong>T2T-ViT backone</strong></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210506115247688.png" alt="backone"></p>
<h1 id="AutoTrans"><a href="#AutoTrans" class="headerlink" title="AutoTrans"></a>AutoTrans</h1><ul>
<li><strong>comprehensive search space</strong><ul>
<li>对layer-norm的位置设置</li>
</ul>
</li>
<li><strong>PL strategy and parameter sharing strategy </strong><ul>
<li>对attention head数量的设置</li>
</ul>
</li>
</ul>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>感谢下列文章提供的帮助，推荐大伙们阅读</p>
<p><a href="https://zhuanlan.zhihu.com/p/266311690">用Transformer完全替代CNN</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/360513527">Swin Transformer对CNN的降维打击</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/353222035">大白话Pyramid Vision Transformer</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/355848545">Transformer in Transformer论文解读</a></p>
<p><a href="https://www.jianshu.com/p/3f424a7f12de">ConvBERT：使用基于区间的动态卷积来提升BERT</a></p>
]]></content>
      <categories>
        <category>Transformer</category>
      </categories>
      <tags>
        <tag>Transformer</tag>
        <tag>论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>监督学习与无监督学习</title>
    <url>/72510051/</url>
    <content><![CDATA[<h1 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h1><blockquote>
<p>得到一个数据集，知道<strong>正确</strong>的输出数据，并且认为输入和输出数据之间<strong>存在某种关系</strong>，</p>
<p>即，<strong>在知道输入和输出的情况下训练出一个模型，将输入映射到输出</strong></p>
</blockquote>
<p>流程</p>
<ul>
<li>选择一个适合目标任务的数学模型</li>
<li>先把一部分已知的“问题和答案”（训练集）给机器去学习</li>
<li>机器总结出了自己的“方法论”</li>
<li>人类把”新的问题”（测试集）给机器，让他去解答</li>
</ul>
<p>监督学习分为两大问题，”<strong>regression</strong>“和”<strong>classification</strong>“</p>
<blockquote>
<p>回归问题，利用<strong>连续</strong>的输出数据来预测结果，得到的是一个<strong>实际值</strong>，而不是分类结果，我们需要某个<strong>函数</strong>来建立输入与输出之间的映射</p>
<p>例，市场价格预测，降水量预测等问题</p>
<p>分类问题，利用<strong>离散</strong>的输出数据来预测结果，因此，通过输入变量预测出这一样本所属的<strong>类别</strong>，以<strong>不同的类别</strong>来建立输入与输出之间的映射</p>
<p>例，植物品种、客户年龄和偏好的预测问题</p>
</blockquote>
<h1 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h1><blockquote>
<p>得到一个数据集，<strong>不知道</strong>其正确的结果（输出数据）/标签/属性，或者说<strong>所有的数据都是一样的</strong>（没有区别），但可以找到数据中<strong>存在某种结构</strong>（不确定的），且不用关注变量（输入数据）的影响</p>
<p>通过研究<strong>变量之间的联系</strong>来推测出该结构</p>
<p>没有基于预测结果的反馈</p>
<p>例，设想我们有一批照片其中包含着不同颜色的几何形状。在这里计算机面对的是没有任何标记的图片，它并不知道几何形状的颜色和外形，它看到的只是一张张照片而已。但通过将数据输入到非监督学习的模型中去，算法可以尝试着理解图中的内容，通过相关性和特征将图中的相似的物体聚为一类。在<strong>理想的情况</strong>下它可以将不同形状不同颜色的几何形状聚集到不同的类别中去，特征提取和标签都是<strong>机器自己完成</strong>的。</p>
</blockquote>
<p>使用场景</p>
<ul>
<li>发现异常，通过无监督学习，快速将数据分类，虽然不知道这些分类的意义，但可以快速排出正常的数据，更有针对性的对异常数据进行深入分析</li>
<li>用户细分，如广告平台对用户按性别，年龄，位置，行为等维度进行用户细分，使广告投放更有针对性</li>
<li>推荐系统，如淘宝根据我们的浏览行为推荐相关商品。无监督学习通过聚类得到购物行为相似的用户，然后将这类用户的商品推荐给我们</li>
</ul>
<blockquote>
<p>Clustering（聚类算法），自动分类的方法，但不知道聚类后的几个分类分别代表什么</p>
<p>例如收集1,000,000个不同的基因，并找到一种方法，如不同变量（例如寿命，位置，角色等）之间的联系，将这些基因自动分组为在某种程度上相似或相关的组，即<strong>存在的某种结构</strong>。</p>
<p>我们只告知这个方法，有一堆（未知）数据，然后自动找到这些数据中的类型，并根据所找到类型对数据进行分类。也就是说，对于数据样本，我们没有给方法一个正确的答案，这便是无监督学习。</p>
<p>Non-clustering</p>
<p>降维</p>
</blockquote>
<h1 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h1><div class="table-container">
<table>
<thead>
<tr>
<th>监督学习</th>
<th>无监督学习</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>目的明确</strong>的训练方式，知道会得到什么结果</td>
<td><strong>没有明确</strong>的训练方式，无法提前知道结果是什么</td>
</tr>
<tr>
<td>数据<strong>有标签</strong></td>
<td>数据<strong>没有标签</strong></td>
</tr>
<tr>
<td>目标明确，可以衡量效果</td>
<td>几乎无法评估效果</td>
</tr>
<tr>
<td>一种训练方式/学习方式，有明确的目标，很清楚自己想要什么结果</td>
<td>本质上是一个统计手段，在没有标签的数据里发现潜在的结构</td>
</tr>
</tbody>
</table>
</div>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://easyai.tech/blog/supervised-reinforcement-unsupervised-learning/">机器学习三兄弟概念大揭秘：「监督学习」「非监督学习」「强化学习」</a></p>
<p><a href="https://easyai.tech/ai-definition/unsupervised-learning/">无监督学习 – Unsupervised learning | UL</a></p>
<p><a href="https://easyai.tech/ai-definition/supervised-learning/">监督学习 – Supervised learning</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>吴恩达——机器学习</title>
    <url>/91a709bb/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><blockquote>
<p>A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.                                                                ——Tom Mitchell</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">Example: playing checkers.<br><br>E = the experience of playing many games of checkers<br><br>T = the task of playing checkers.<br><br>P = the probability that the program will win the next game.<br></code></pre></div></td></tr></table></figure>
<h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><blockquote>
<p>得到一个数据集，知道<strong>正确</strong>的输出数据，并且认为输入和输出数据之间<strong>存在某种关系</strong>，</p>
<p>即，<strong>在知道输入和输出的情况下训练出一个模型，将输入映射到输出</strong></p>
</blockquote>
<p>流程</p>
<ul>
<li>选择一个适合目标任务的数学模型</li>
<li>先把一部分已知的“问题和答案”（训练集）给机器去学习</li>
<li>机器总结出了自己的“方法论”</li>
<li>人类把”新的问题”（测试集）给机器，让他去解答</li>
</ul>
<p>监督学习分为两大问题，”<strong>regression</strong>“和”<strong>classification</strong>“</p>
<blockquote>
<p>回归问题，利用<strong>连续</strong>的输出数据来预测结果，得到的是一个<strong>实际值</strong>，而不是分类结果，我们需要某个<strong>函数</strong>来建立输入与输出之间的映射</p>
<p>例，市场价格预测，降水量预测等问题</p>
<p>分类问题，利用<strong>离散</strong>的输出数据来预测结果，因此，通过输入变量预测出这一样本所属的<strong>类别</strong>，以<strong>不同的类别</strong>来建立输入与输出之间的映射</p>
<p>例，植物品种、客户年龄和偏好的预测问题</p>
</blockquote>
<h2 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h2><blockquote>
<p>得到一个数据集，<strong>不知道</strong>其正确的结果（输出数据）/标签/属性，或者说<strong>所有的数据都是一样的</strong>（没有区别），但可以找到数据中<strong>存在某种结构</strong>（不确定的），且不用关注变量（输入数据）的影响</p>
<p>通过研究<strong>变量之间的联系</strong>来推测出该结构</p>
<p>没有基于预测结果的反馈</p>
<p>例，设想我们有一批照片其中包含着不同颜色的几何形状。在这里计算机面对的是没有任何标记的图片，它并不知道几何形状的颜色和外形，它看到的只是一张张照片而已。但通过将数据输入到非监督学习的模型中去，算法可以尝试着理解图中的内容，通过相关性和特征将图中的相似的物体聚为一类。在<strong>理想的情况</strong>下它可以将不同形状不同颜色的几何形状聚集到不同的类别中去，特征提取和标签都是<strong>机器自己完成</strong>的。</p>
</blockquote>
<p>使用场景</p>
<ul>
<li>发现异常，通过无监督学习，快速将数据分类，虽然不知道这些分类的意义，但可以快速排出正常的数据，更有针对性的对异常数据进行深入分析</li>
<li>用户细分，如广告平台对用户按性别，年龄，位置，行为等维度进行用户细分，使广告投放更有针对性</li>
<li>推荐系统，如淘宝根据我们的浏览行为推荐相关商品。无监督学习通过聚类得到购物行为相似的用户，然后将这类用户的商品推荐给我们</li>
</ul>
<blockquote>
<p>Clustering（聚类算法），自动分类的方法，但不知道聚类后的几个分类分别代表什么</p>
<p>例如收集1,000,000个不同的基因，并找到一种方法，如不同变量（例如寿命，位置，角色等）之间的联系，将这些基因自动分组为在某种程度上相似或相关的组，即<strong>存在的某种结构</strong>。</p>
<p>我们只告知这个方法，有一堆（未知）数据，然后自动找到这些数据中的类型，并根据所找到类型对数据进行分类。也就是说，对于数据样本，我们没有给方法一个正确的答案，这便是无监督学习。</p>
<p>Non-clustering</p>
<p>降维</p>
</blockquote>
<h2 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h2><div class="table-container">
<table>
<thead>
<tr>
<th>监督学习</th>
<th>无监督学习</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>目的明确</strong>的训练方式，知道会得到什么结果</td>
<td><strong>没有明确</strong>的训练方式，无法提前知道结果是什么</td>
</tr>
<tr>
<td>数据<strong>有标签</strong></td>
<td>数据<strong>没有标签</strong></td>
</tr>
<tr>
<td>目标明确，可以衡量效果</td>
<td>几乎无法评估效果</td>
</tr>
<tr>
<td>一种训练方式/学习方式，有明确的目标，很清楚自己想要什么结果</td>
<td>本质上是一个统计手段，在没有标签的数据里发现潜在的结构</td>
</tr>
</tbody>
</table>
</div>
<h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><blockquote>
<p>To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function h : X → Y so that h(x) is a “good” predictor for the corresponding value of y. For historical reasons, this function h is called a <strong>hypothesis</strong>. </p>
</blockquote>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210306142126309.png" style="zoom:80%;"></p>
<h1 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h1><blockquote>
<p>通过 cost Function 来确定我们的hypothesis，即，h(X)。</p>
<p>m表示样本数量</p>
</blockquote>
<script type="math/tex; mode=display">
h_\Theta(x)=\Theta_0+\Theta_1x</script><script type="math/tex; mode=display">
J(\Theta_0,\Theta_1)=\frac {1}{2m}\sum_{i=1}^m(\hat y_i-y_i)^2=\frac {1}{2m}\sum_{i=1}^m(h_\Theta(x_i)-y_i)^2</script><blockquote>
<p>cost Function 越小，表示hypothesis（拟合函数）约合理</p>
<p>因此寻找出使 cost Function 最小的参数</p>
</blockquote>
<h1 id="梯度下降算法Gradient-Descent"><a href="#梯度下降算法Gradient-Descent" class="headerlink" title="梯度下降算法Gradient Descent"></a>梯度下降算法Gradient Descent</h1><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210306163104402.png" alt></p>
<p>重复，直到趋近最小值(收敛)</p>
<script type="math/tex; mode=display">
\Theta_j:=\Theta_j-\alpha\frac {\partial}{\partial{\Theta_j}}J(\Theta_0,\Theta_1)</script><blockquote>
<p>首先假设一对$\Theta_0,\Theta_1$,然后由costFunction的导数确定梯度下降最大的方向，逐步找到costFunction的最小值（可能是局部最小值）</p>
<p>参数$\alpha$(学习速率)确定每一步的大小，即更新$\Theta_j$大小的幅度</p>
<p>不同的起点，可能会导致不同的结果，这也是梯度下降算法的重要特征</p>
</blockquote>
<p>梯度下降方程，需同步更新$\Theta_0,\Theta_1$</p>
<p>$temp0:=\Theta_0-\alpha\frac {\partial}{\partial{\Theta_0}}J(\Theta_0,\Theta_1)$</p>
<p>$temp1:=\Theta_1-\alpha\frac {\partial}{\partial{\Theta_1}}J(\Theta_0,\Theta_1)$</p>
<p>$\Theta_0:=temp0$</p>
<p>$\Theta_1:=temp1$</p>
<blockquote>
<p>利用梯度下降法，可以优化找到<strong>任何</strong>costFunction的(局部)最小值</p>
</blockquote>
<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><script type="math/tex; mode=display">
h_\Theta(x)=\Theta_0+\Theta_1x</script><p>线性回归不仅适用于2个变量（二维平面），也适用于多个变量。</p>
<p>如，3个变量是一个平面，4个变量是一个体</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210307131430617.png" alt></p>
<blockquote>
<p>梯度下降法——线性回归，得到的是最优解，而不是局部最优解</p>
</blockquote>
<p>重复，直到收敛</p>
<p>$temp0:=\Theta_0-\alpha\frac {1}{m}\sum_{i=1}^{m}(h_\Theta(x_i)-y_i)$</p>
<p>$temp1:=\Theta_1-\alpha\frac {1}{m}\sum_{i=1}^{m}((h_\Theta(x_i)-y_i)x_i)$</p>
<p>$\Theta_0:=temp0$</p>
<p>$\Theta_1:=temp1$</p>
<h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><blockquote>
<p>n表示特征变量个数</p>
</blockquote>
<p>hypothesis:</p>
<script type="math/tex; mode=display">
h_\Theta(x)=\Theta_0+\Theta_1x_1+\Theta_2x_2+\cdots+\Theta_nx_n</script><p>由矩阵乘法，简化上式</p>
<script type="math/tex; mode=display">
h_\Theta(x)=
\begin{bmatrix}
\Theta_0&\Theta_1\cdots\Theta_n
\end{bmatrix}
\begin{bmatrix}
x_0\\\\
x_1\\\\
\vdots\\\\
x_n
\end{bmatrix}
=\Theta^Tx</script><h2 id="多个变量的梯度下降"><a href="#多个变量的梯度下降" class="headerlink" title="多个变量的梯度下降"></a>多个变量的梯度下降</h2><script type="math/tex; mode=display">
\Theta_j:=\Theta_j-\alpha\frac {1}{m}\sum_{i=1}^{m}(h_\Theta(x^{(i)})-y^{(i)})x_j^{(i)}</script><h2 id="优化梯度下降算法"><a href="#优化梯度下降算法" class="headerlink" title="优化梯度下降算法"></a>优化梯度下降算法</h2><p>当样本不均匀时，如0&lt;$x_1$&lt;20000，0&lt;$x_2$&lt;5，$\Theta$下降会十分缓慢，因此采用<strong>特征放缩</strong>和<strong>均值归一化</strong>将所有变量大致控制在较小范围</p>
<script type="math/tex; mode=display">
x_i:=\frac{x_i-\mu_i}{s_i}</script><blockquote>
<p>$\mu_i$为平均值</p>
<p>$s_i$为标准差</p>
</blockquote>
<h2 id="学习率a"><a href="#学习率a" class="headerlink" title="学习率a"></a>学习率a</h2><blockquote>
<p>a太小，$J(\Theta)$收敛很慢</p>
<p>a太大，每一次迭代$J(\Theta)$可能不会减少，无法收敛</p>
</blockquote>
<h2 id="特征与多项式回归"><a href="#特征与多项式回归" class="headerlink" title="特征与多项式回归"></a>特征与多项式回归</h2><blockquote>
<p>运用不同的方法改善<strong>特征变量</strong>和<strong>hypothesis</strong></p>
<p>如由$x_1*x_2$创建新的特征变量$x_3$</p>
</blockquote>
<p>当线性函数无法满足数据要求，更改<strong>hypothesis</strong>函数，如二次，三次等形式。</p>
<p>例如，</p>
<p>原hypothesis函数</p>
<script type="math/tex; mode=display">
h(\Theta)=\Theta_1+\Theta_2x_1</script><p>改进为</p>
<script type="math/tex; mode=display">
h(\Theta)=\Theta_1+\Theta_2x_1+\Theta_3x_1^2</script><p>更改新特征变量的范围</p>
<blockquote>
<p>如$0&lt;x_1&lt;10$，则$0&lt;x_1^2&lt;100$</p>
</blockquote>
<h2 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h2><p>一次性求解$\theta$的最优值，不需要像梯度下降法多次迭代</p>
<script type="math/tex; mode=display">
\theta=(X^TX)^{-1}X^Ty</script><p>有m个样本$(x^{(1)},y^{(1)},…,(x^{(m)},y^{(m)}))$，n个特征变量</p>
<script type="math/tex; mode=display">
x^{(i)}=
\begin{bmatrix}
x_0^{(i)}\\\\
x_1^{(i)}\\\\
\vdots\\\\
x_n^{(i)}\\\\
\end{bmatrix}
\in R^{n+1}</script><p>设计矩阵design matrix (m*(n+1))</p>
<script type="math/tex; mode=display">
X=\begin{bmatrix}
(x^{(1)})^T\\\\
(x^{(2)})^T\\\\
\vdots\\\\
(x^{(m)})^T
\end{bmatrix}</script><div class="table-container">
<table>
<thead>
<tr>
<th>正规方程</th>
<th>梯度下降法</th>
</tr>
</thead>
<tbody>
<tr>
<td>不需要学习率a</td>
<td>需要学习率a</td>
</tr>
<tr>
<td>需要多次迭代</td>
<td>需要多次迭代</td>
</tr>
<tr>
<td>$O(n^3)$，需要计算$X^TX$</td>
<td>$O(kn^2)$</td>
</tr>
<tr>
<td>n很大时，运算很慢</td>
<td>适合于n很大(n&gt;10000)</td>
</tr>
</tbody>
</table>
</div>
<p>当$X^TX$不可逆，</p>
<p>原因</p>
<blockquote>
<ul>
<li>存在两个特征变量，它们（近似）线性相关</li>
<li>m&lt;n，样本数量少于特征变量数量</li>
</ul>
</blockquote>
<p>解决</p>
<blockquote>
<ul>
<li>删去存在线性相关的特征变量</li>
<li>减少特征变量</li>
</ul>
</blockquote>
<h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>逻辑函数Logistic/Sigmoid Function</p>
<script type="math/tex; mode=display">
h_\theta(x)=g(\theta^Tx)
\\\\
z=\theta^Tx
\\\\
g(z)=\frac {1}{1+e^{-z}}</script><p>图像$g(z)$</p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210316161356522.png" alt></p>
<script type="math/tex; mode=display">
h_\theta(x)=P(y=1|x;\theta)=1-P(y=0|x;\theta)</script><h2 id="决策边界Decision-Boundary"><a href="#决策边界Decision-Boundary" class="headerlink" title="决策边界Decision Boundary"></a>决策边界Decision Boundary</h2><p>假设</p>
<script type="math/tex; mode=display">
h_\theta(x)\ge0.5\rightarrow y=1\\
h_\theta(x)\le0.5\rightarrow y=0</script><p>因此</p>
<script type="math/tex; mode=display">
\theta^Tx\ge0\Rightarrow y=1\\
\theta^Tx\le0\Rightarrow y=0</script><p><strong>decision boundary</strong>可以是任意图像，将区域划分为两个部分，$y=1$和$y=0$</p>
<p>通过给定的$\theta$来找到<strong>decision boundary</strong></p>
<p>通过<strong>hypothesis function</strong>来找到合适的$\theta$</p>
<h2 id="Cost-Function-1"><a href="#Cost-Function-1" class="headerlink" title="Cost Function"></a>Cost Function</h2><p>训练集，m个样本</p>
<script type="math/tex; mode=display">
\begin{Bmatrix}
(x^{(1)},y^{(1)},x^{(2)},y^{(2)},\cdots,x^{(m)},y^{(m)})
\end{Bmatrix}
\\
x=\in 
\begin{bmatrix}
x_0\\\\
x_1\\\\
\vdots\\\\
x_n
\end{bmatrix}
\ \ \ \ 
x_0=1\ \ \ \ 
y=
\begin{Bmatrix}
0,1
\end{Bmatrix}</script><p><strong>hypothesis function</strong></p>
<script type="math/tex; mode=display">
h_\theta(x)=\frac {1}{1+e^{-\theta^Tx}}</script><p><strong>Logistic regression cost function</strong></p>
<script type="math/tex; mode=display">
Cost(h_\theta(x),y)=
\begin{cases}
-log(h_\theta(x)),& if \ y=1
\\\\
-log(1-h_\theta(x)),&if\ y=0
\end{cases}</script><p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210316172644451.png" style="zoom:50%;"><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210316172711040.png" style="zoom:50%;"></p>
<script type="math/tex; mode=display">
Cost(h_\theta(x),y)=0 \ if \ h_\theta(x)=y\\
Cost(h_\theta(x),y)\rightarrow\infty \ if \ y=0\ and\ h_\theta(x)\rightarrow1\\
Cost(h_\theta(x),y)\rightarrow\infty \ if \ y=1 \ and\ h_\theta(x)\rightarrow0</script><h2 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h2><script type="math/tex; mode=display">
J(\theta)=-\frac{1}{m}[\sum_{i=1}^mCost(h_\theta(x),y)]\\\\
=-\frac{1}{m}[\sum_{i=1}^my^{(i)}logh_\theta(x^{(i)})+(1-y^{(i)})(1-logh_\theta(x^{(i)}))]</script><p>向量化</p>
<script type="math/tex; mode=display">
h=g(X\theta)\\\\
J(\theta)=\frac{1}{m}(-y^Tlog(h)-(1-y)^Tlog(1-h))</script><p>得到$min_\theta J(\theta)$，多次迭代</p>
<script type="math/tex; mode=display">
\theta_j:=\theta_j-\alpha\frac {\partial}{\partial{\theta_j}}J(\theta)\\\\
\theta_j:=\theta_j-\alpha\frac {1}{m}\sum_{i=1}^{m}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}</script><p>向量化</p>
<script type="math/tex; mode=display">
\theta:=\theta-\frac{\alpha}{m}X^T(g(X\theta)-\overrightarrow{y})</script><h1 id="过度拟合-Overfitting"><a href="#过度拟合-Overfitting" class="headerlink" title="过度拟合 Overfitting"></a>过度拟合 Overfitting</h1><p>由于设置过多特征变量，<strong>hypothesis</strong>几乎适应所有的训练样本，但该<strong>hypothesis</strong>并不能进行很好的预测。</p>
<p>因为这个复杂的函数创建了许多与数据没有关联的曲线</p>
<p>解决方法</p>
<blockquote>
<p>减少特征变量</p>
<p>正规化Regularization</p>
</blockquote>
<h2 id="Regularization-Cost-Function"><a href="#Regularization-Cost-Function" class="headerlink" title="Regularization Cost Function"></a>Regularization Cost Function</h2><script type="math/tex; mode=display">
min_\theta\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2+\lambda\sum_{j=1}^{n}\theta_j^2</script><h2 id="Regularized-Linear-Regression"><a href="#Regularized-Linear-Regression" class="headerlink" title="Regularized Linear Regression"></a>Regularized Linear Regression</h2><p><strong>Gradient Descent</strong></p>
<p>多次迭代</p>
<script type="math/tex; mode=display">
\theta_0:=\theta_0-\alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_0^{(i)}\\\\
\theta_j:=\theta_j-\alpha[(\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)})+\frac{\lambda}{m}\theta_j]</script><p><strong>正规方程</strong></p>
<script type="math/tex; mode=display">
\theta=(X^TX+\lambda L)^{-1}X^Ty\\\\
L=
\begin{bmatrix}
0&0&\cdots&0\\\\
0&1&\cdots&0\\\\
\vdots&\vdots&\ddots&\vdots\\\\
0&0&\cdots&1
\end{bmatrix}
\in R^{n+1}</script><h2 id="Regularized-Logistic-Regression"><a href="#Regularized-Logistic-Regression" class="headerlink" title="Regularized Logistic Regression"></a>Regularized Logistic Regression</h2><script type="math/tex; mode=display">
J(\theta)=-\frac{1}{m}[\sum_{i=1}^my^{(i)}logh_\theta(x^{(i)})+(1-y^{(i)})(1-logh_\theta(x^{(i)}))]+\frac{\lambda}{2m}\sum_{j=1}^n\theta_j^2</script><h1 id="神经网络-Neural-Network"><a href="#神经网络-Neural-Network" class="headerlink" title="神经网络 Neural Network"></a>神经网络 Neural Network</h1><p>In our model, our dendrites are like the input features $x_1\cdots x_n$, and the output is the result of our hypothesis function. </p>
<p>In this model our $x_0$ input node is sometimes called the “bias unit.” It is always equal to 1.</p>
<p>In neural networks, we use the same logistic function as in classification, $\frac{1}{1 + e^{-\theta^Tx}}$, yet we sometimes call it a sigmoid (logistic) <strong>activation</strong> function. In this situation, our “theta” parameters are sometimes called “weights”.</p>
<p>Our input nodes (layer 1), also known as the “input layer”, go into another node (layer 2), which finally outputs the hypothesis function, known as the “output layer”.</p>
<p>We can have <strong>intermediate layers</strong> of nodes between the input and output layers called the <strong>“hidden layers.”</strong></p>
<p><img src="https://gitee.com/mihaoyoung/blog_image/raw/master/image-20210324100709079.png" alt></p>
<p>This is saying that we compute our activation nodes by using a 3×4 matrix of parameters. We apply each row of the parameters to our inputs to obtain the value for one activation node. Our hypothesis output is the logistic function applied to the sum of the values of our activation nodes, which have been multiplied by yet another parameter matrix$ \Theta^{(2)} $containing the weights for our second layer of nodes.</p>
<p>Each layer gets its own matrix of weights, $\Theta^{(j)}$.</p>
<p>The dimensions of these matrices of weights is determined as follows:</p>
<p>If network has $s_j$ units in layer $j$ and $s_{j+1}$ units in layer $j+1$, then $\Theta^{(j)}$ will be of dimension $s_{j+1} \times (s_j + 1)$.</p>
<p>The +1 comes from the addition in$ \Theta^{(j)}$ of the “bias nodes,”$ x_0 $and$ \Theta_0^{(j)}$. In other words the output nodes will not include the bias nodes while the inputs will. The following image summarizes our model representation: </p>
<p><img src="/91a709bb/image-20210324101135246.png" alt></p>
<p>Example: If layer 1 has 2 input nodes and layer 2 has 4 activation nodes. Dimension of $\Theta^{(1)}$ is going to be 4×3 where $s_j$ =2 and $s_{j+1} = 4$, so $s_{j+1} \times (s_j + 1) = 4 \times 3$</p>
<h2 id="向量化"><a href="#向量化" class="headerlink" title="向量化"></a>向量化</h2><p>an example of a neural network</p>
<script type="math/tex; mode=display">
\begin{align*} a_1^{(2)} = g(\Theta_{10}^{(1)}x_0 + \Theta_{11}^{(1)}x_1 + \Theta_{12}^{(1)}x_2 + \Theta_{13}^{(1)}x_3) \newline a_2^{(2)} = g(\Theta_{20}^{(1)}x_0 + \Theta_{21}^{(1)}x_1 + \Theta_{22}^{(1)}x_2 + \Theta_{23}^{(1)}x_3) \newline a_3^{(2)} = g(\Theta_{30}^{(1)}x_0 + \Theta_{31}^{(1)}x_1 + \Theta_{32}^{(1)}x_2 + \Theta_{33}^{(1)}x_3) \newline h_\Theta(x) = a_1^{(3)} = g(\Theta_{10}^{(2)}a_0^{(2)} + \Theta_{11}^{(2)}a_1^{(2)} + \Theta_{12}^{(2)}a_2^{(2)} + \Theta_{13}^{(2)}a_3^{(2)}) \newline \end{align*}</script><p>define a new variable $z_k^{(j)}$that encompasses the parameters inside our g function.</p>
<script type="math/tex; mode=display">
\begin{align*}a_1^{(2)} = g(z_1^{(2)}) \newline a_2^{(2)} = g(z_2^{(2)}) \newline a_3^{(2)} = g(z_3^{(2)}) \newline \end{align*}</script><p>In other words, for layer j=2 and node k, the variable z will be:</p>
<p>The vector representation of x and $z^{j}$ is:</p>
<script type="math/tex; mode=display">
\begin{align*}x = \begin{bmatrix}x_0 \newline x_1 \newline\cdots \newline x_n\end{bmatrix} &z^{(j)} = \begin{bmatrix}z_1^{(j)} \newline z_2^{(j)} \newline\cdots \newline z_n^{(j)}\end{bmatrix}\end{align*}</script><p>Setting $x = a^{(1)}$, we can rewrite the equation as:</p>
<p>We are multiplying our matrix $\Theta^{(j-1)}$ with dimensions $s_j\times (n+1)$(where $s_j$ is the number of our activation nodes) by our vector $a^{(j-1)}$ with height (n+1). This gives us our vector $z^{(j)}$ with height $s_j$. Now we can get a vector of our activation nodes for layer j as follows:</p>
<p>$a^{(j)} = g(z^{(j)})$</p>
<p>Where our function g can be applied element-wise to our vector $z^{(j)}$.</p>
<p>We can then add a bias unit (equal to 1) to layer j after we have computed $a^{(j)}$. This will be element $a_0^{(j)}$ and will be equal to 1. To compute our final hypothesis, let’s first compute another z vector:</p>
<p>$z^{(j+1)} = \Theta^{(j)}a^{(j)}$</p>
<p>We get this final z vector by multiplying the next theta matrix after $\Theta^{(j-1)}$with the values of all the activation nodes we just got. This last theta matrix $\Theta^{(j)}$ will have only <strong>one row</strong> which is multiplied by one column $a^{(j)}$ so that our result is a single number. We then get our final result with:</p>
<p>$h_\Theta(x) = a^{(j+1)} = g(z^{(j+1)})$</p>
<p>Notice that in this <strong>last step</strong>, between layer j and layer j+1, we are doing <strong>exactly the same thing</strong> as we did in logistic regression. Adding all these intermediate layers in neural networks allows us to more elegantly produce interesting and more complex non-linear hypotheses.</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
</search>
